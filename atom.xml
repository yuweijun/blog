<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一</title>
  <subtitle>{&quot;type&quot;:&quot;编程笔记&quot;}</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://www.4e00.com/"/>
  <updated>2017-10-16T05:42:13.343Z</updated>
  <id>https://www.4e00.com/</id>
  
  <author>
    <name>yuweijun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>byte order - little-endian and big-endian</title>
    <link href="https://www.4e00.com/linux/2017/10/11/byte-order-little-endian-and-big-endian.html"/>
    <id>https://www.4e00.com/linux/2017/10/11/byte-order-little-endian-and-big-endian.html</id>
    <published>2017-10-11T13:01:42.000Z</published>
    <updated>2017-10-16T05:42:13.343Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是little-endian和big-endian"><a href="#什么是little-endian和big-endian" class="headerlink" title="什么是little-endian和big-endian"></a>什么是little-endian和big-endian</h2><p><code>字节序</code>(<code>byte order</code>)又称端序或尾序(<code>Endianness</code>)，多字节对象都被存储为连续的字节序列，存储地址内的排列有两个通用规则：</p>
<ol>
<li>little-endian: 小端序，就是低位字节放在内存的起始地址，即最低有效位在最高有效位的前面。</li>
<li>big-endian:    大端序，就是高位字节放在内存的起始地址，即最高有效位在最低有效位的前面。</li>
</ol>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>比如16进制数字<code>0x12345678</code>(10进制为<code>305419896</code>)在内存中的表示形式为：</p>
<h4 id="大端模式"><a href="#大端模式" class="headerlink" title="大端模式"></a>大端模式</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">低地址     ------------------------&gt;  高地址</div><div class="line">0x12      |  0x34     |  0x56     |  0x78</div><div class="line">00010010  |  00110100 |  01010110 |  01111000</div></pre></td></tr></table></figure>
<h4 id="小端模式"><a href="#小端模式" class="headerlink" title="小端模式"></a>小端模式</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">低地址     ------------------------&gt;  高地址</div><div class="line">0x78      |  0x56     |  0x34     |  0x12</div><div class="line">01111000  |  01010110 |  00110100 |  00010010</div></pre></td></tr></table></figure>
<ol>
<li>上面2者比较可见，大端模式和直接阅读数字的习惯一致。</li>
<li>这2个模式中，共同点就是每个字节<code>byte</code>都是由<code>8bit</code>组成，而<code>bit</code>只有2个值，即<code>0</code>和<code>1</code>。</li>
<li>比如上面<code>0x78</code>在内存中保存在一个字节中，其表现是一样的，其8个bit都是自右向左，和数学数字表示法一样，高位在左边，即<code>01111000</code>。</li>
</ol>
<a id="more"></a>
<h2 id="big-endian还是little-endian"><a href="#big-endian还是little-endian" class="headerlink" title="big-endian还是little-endian"></a>big-endian还是little-endian</h2><ol>
<li>x86架构的是小端模式的，所以当前大多数的cpu是小端模式的。</li>
<li>多数的powerpc架构的cpu是大端模式的。</li>
<li>arm架构的cpu可以设置使用大端还是小端模式。</li>
<li>jpeg是大端模式，而gif则是小端模式。</li>
<li><code>网络字节序</code>是tcp/ip中规定好的一种数据表示格式，它与具体的cpu类型、操作系统等无关，从而可以保证数据在不同主机之间传输时能够被正确解释。<code>网络字节序</code>采用<code>big-endian</code>排序方式。</li>
</ol>
<h3 id="UNIX-Networking-Programming-书中的例子"><a href="#UNIX-Networking-Programming-书中的例子" class="headerlink" title="UNIX Networking Programming 书中的例子"></a>UNIX Networking Programming 书中的例子</h3><p>c语言中可以利用联合体<code>union</code>判断cpu对内存采用<code>little-endian</code>还是<code>big-endian</code>模式读写。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</div><div class="line">    <span class="keyword">union</span> &#123;</div><div class="line">        <span class="keyword">short</span> s;</div><div class="line">        <span class="keyword">char</span> c[<span class="keyword">sizeof</span>(<span class="keyword">short</span>)];</div><div class="line">    &#125; un;</div><div class="line"></div><div class="line">    un.s = <span class="number">0x0102</span>;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">sizeof</span>(<span class="keyword">short</span>) == <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (un.c[<span class="number">0</span>] == <span class="number">1</span> &amp;&amp; un.c[<span class="number">1</span>] == <span class="number">2</span>) &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"big-endian\n"</span>);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (un.c[<span class="number">0</span>] == <span class="number">2</span> &amp;&amp; un.c[<span class="number">1</span>] == <span class="number">1</span>) &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"little-endian\n"</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"unknown\n"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"sizeof(short) = %d\n"</span>, <span class="keyword">sizeof</span>(<span class="keyword">short</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="通过类型强转进行判断"><a href="#通过类型强转进行判断" class="headerlink" title="通过类型强转进行判断"></a>通过类型强转进行判断</h3><figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">big_endian</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> a = <span class="number">0x1234</span>;</div><div class="line">    <span class="comment">// 通过将int强制类型转换成char单字节，通过判断起始存储位置。</span></div><div class="line">    <span class="comment">// 即取b等于a的低地址部分</span></div><div class="line">    <span class="keyword">char</span> b = *(<span class="keyword">char</span> *) &amp;a;</div><div class="line">    <span class="keyword">if</span> (b == <span class="number">0x12</span>) &#123;</div><div class="line">        <span class="comment">// 高位存储在起始地址，即为大端</span></div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="网络字节序与主机字节序转换函数"><a href="#网络字节序与主机字节序转换函数" class="headerlink" title="网络字节序与主机字节序转换函数"></a>网络字节序与主机字节序转换函数</h2><ol>
<li><code>htons()</code>: host to network short，将short类型数据从主机字节序转换为网络字节序。</li>
<li><code>ntohs()</code>: network to host short，将short类型数据从网络字节序转换为主机字节序。</li>
<li><code>htonl()</code>: host to network long，将long类型数据从主机字节序转换为网络字节序。</li>
<li><code>ntohl()</code>: network to host long，将long类型数据从网络字节序转换为主机字节序。</li>
</ol>
<p>通常，以<code>s</code>为后缀的函数中，<code>s</code>代表<code>2</code>个字节<code>short</code>，因此用于端口号转换；以<code>l</code>为后缀的函数中，<code>l</code>代表<code>4</code>个字节的<code>long</code>，因此用于IP地址转换。</p>
<h3 id="网络字节序与主机字节序转换函数测试代码"><a href="#网络字节序与主机字节序转换函数测试代码" class="headerlink" title="网络字节序与主机字节序转换函数测试代码"></a>网络字节序与主机字节序转换函数测试代码</h3><figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> host_port = <span class="number">0x1234</span>, net_port;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> host_addr = <span class="number">0x12345678</span>, net_addr;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"0x12345678: %d\n"</span>, host_addr); <span class="comment">// 305419896</span></div><div class="line"></div><div class="line">    net_port = htons(host_port);</div><div class="line">    net_addr = htonl(host_addr);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Host ordered port: %#x\n"</span>, host_port);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Network ordered port: %#x\n"</span>, net_port);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Host ordered address: %#lx\n"</span>, host_addr);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Network ordered address: %#lx\n"</span>, net_addr);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>0x12345678: 305419896<br>Host ordered port: 0x1234<br>Network ordered port: 0x3412<br>Host ordered address: 0x12345678<br>Network ordered address: 0x78563412</p>
</blockquote>
<h2 id="UTF-8编码和UTF-16编码"><a href="#UTF-8编码和UTF-16编码" class="headerlink" title="UTF-8编码和UTF-16编码"></a>UTF-8编码和UTF-16编码</h2><ol>
<li>UTF-8编码的规则决定了其存储与字节序没有关系，所以UTF-8文件头可以有<code>BOM</code>(byte order mark)，也可以没有，一般linux下面的创建的UTF-8文件默认是没有<code>BOM</code>的。</li>
<li>UTF-16编码则是用2个字节来保存一个字符，一个字母<code>a</code>和一个中文字<code>中</code>都用2个字节保存，所以必须要知道文件保存的字节序，才能正确的读写相应的内容。</li>
<li>对于UTF-16编码的文件，不论是大端模式还是小端模式，存储的第一个字符都是<code>BOM</code>，占2个字节，<code>BOM</code>的unicode码是<code>0xFEFF</code>，存储在大端模式unicode文件里是<code>0xFEFF</code>，存储在小端模式unicode文件里是<code>0xFFFE</code>。</li>
</ol>
<h2 id="java中的字节序"><a href="#java中的字节序" class="headerlink" title="java中的字节序"></a>java中的字节序</h2><p>java中字节存储默认为大端模式，可以查看包含多字节字符的字符串方法<code>String#getBytes()</code>返回的数组内容进行确认，下面示例中的字符串中有个多字节的字符<code>中</code>字，其字节码输出为<code>[-28, -72, -83]</code>，高位在前，即大端模式。另外这3个字节在16进制的表现形式为<code>[E4, B8, AD]</code>，即<code>中</code>字<code>UTF-8</code>编码：<code>%E4%B8%AD</code>，具体可以看下面代码的备注说明，之前我在这篇<a href="/blog/linux/2008/10/11/utf-8-unicode-relationship.html">文章</a>里用javascript演示了<code>UNICODE</code>码和<code>UTF-8</code>编码之间的转换关系。</p>
<h3 id="使用UTF-8编码并使用java默认字节序"><a href="#使用UTF-8编码并使用java默认字节序" class="headerlink" title="使用UTF-8编码并使用java默认字节序"></a>使用UTF-8编码并使用java默认字节序</h3><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUTF8ByteSort</span><span class="params">()</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</div><div class="line">    <span class="keyword">byte</span>[] dst;</div><div class="line">    ByteBuffer byteBuffer = ByteBuffer.wrap(<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">16</span>]); <span class="comment">// 创建字节缓冲区，java中字节存储默认为大端模式</span></div><div class="line"></div><div class="line">    String abcdef = <span class="string">"abcde中"</span>;          <span class="comment">// “中”字16进制为： 0x4e2d ，其 unicode 码为： 20013</span></div><div class="line">    byteBuffer.put(abcdef.getBytes());  <span class="comment">// default charset UTF-8</span></div><div class="line">    System.out.println(Arrays.toString(abcdef.getBytes())); <span class="comment">// [97, 98, 99, 100, 101, -28, -72, -83]</span></div><div class="line"></div><div class="line">    <span class="comment">// 计算机中负数用补码表示:</span></div><div class="line">    <span class="comment">// -28 的2进制表示：　~(28) + 1，即 11100100，再转成16进制，即为e4</span></div><div class="line">    <span class="comment">// 同样得到 -72 对应的16进制 b8</span></div><div class="line">    <span class="comment">// -83 对应的16进制 ad</span></div><div class="line">    String b1 = Integer.toBinaryString(-<span class="number">28</span>);</div><div class="line">    String b0 = Integer.toBinaryString(-<span class="number">28</span> &amp; <span class="number">0xFF</span>);</div><div class="line">    System.out.println(b1); <span class="comment">// 11111111111111111111111111100100</span></div><div class="line">    System.out.println(b0); <span class="comment">// 11100100</span></div><div class="line">    System.out.println(Integer.parseInt(b0, <span class="number">2</span>)); <span class="comment">// 228</span></div><div class="line">    System.out.println(Integer.toHexString(Integer.valueOf(b0, <span class="number">2</span>))); <span class="comment">// e4</span></div><div class="line">    System.out.println(Integer.toHexString(Integer.valueOf(Integer.toBinaryString(-<span class="number">28</span> &amp; <span class="number">0xFF</span>), <span class="number">2</span>))); <span class="comment">// e4</span></div><div class="line"></div><div class="line">    <span class="comment">// 每个byte的16进制数</span></div><div class="line">    System.out.println(<span class="string">"=========================="</span>);</div><div class="line">    System.out.println(Integer.toHexString(-<span class="number">28</span> &amp; <span class="number">0xFF</span>)); <span class="comment">// e4</span></div><div class="line">    System.out.println(Integer.toHexString(-<span class="number">72</span> &amp; <span class="number">0xFF</span>)); <span class="comment">// b8</span></div><div class="line">    System.out.println(Integer.toHexString(-<span class="number">83</span> &amp; <span class="number">0xFF</span>)); <span class="comment">// ad</span></div><div class="line">    System.out.println(<span class="string">"=========================="</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 因此 "中" 字uri encode的编码即为: "%e4%b8%ad"</span></div><div class="line">    String encode = URLEncoder.encode(<span class="string">"中"</span>, Charsets.UTF_8.name());</div><div class="line">    System.out.println(encode);</div><div class="line">    String decode = URLDecoder.decode(<span class="string">"%e4%b8%ad"</span>, Charsets.UTF_8.name());</div><div class="line">    System.out.println(decode);</div><div class="line"></div><div class="line">    System.out.println(<span class="string">"=========================="</span>);</div><div class="line">    System.out.println(byteBuffer); <span class="comment">// java.nio.HeapByteBuffer[pos=8 lim=16 cap=16]</span></div><div class="line">    byteBuffer.flip();              <span class="comment">// 注意flip()之后的pos/limit值的变化</span></div><div class="line">    System.out.println(byteBuffer); <span class="comment">// java.nio.HeapByteBuffer[pos=0 lim=8 cap=16]</span></div><div class="line">    System.out.println(<span class="string">"=========================="</span>);</div><div class="line"></div><div class="line">    dst = <span class="keyword">new</span> <span class="keyword">byte</span>[byteBuffer.limit()];</div><div class="line">    byteBuffer.get(dst);                        <span class="comment">// byteBuffer中有效的字节</span></div><div class="line">    System.out.println(Arrays.toString(dst));   <span class="comment">// [97, 98, 99, 100, 101, -28, -72, -83]</span></div><div class="line">    System.out.println(<span class="keyword">new</span> String(dst));        <span class="comment">// abcde中</span></div><div class="line"></div><div class="line">    <span class="comment">// 下面打印ByteBuffer中所有的字节内容</span></div><div class="line">    System.out.println(Arrays.toString(byteBuffer.array())); <span class="comment">// [97, 98, 99, 100, 101, -28, -72, -83, 0, 0, 0, 0, 0, 0, 0, 0]</span></div><div class="line">    System.out.println(<span class="keyword">new</span> String(byteBuffer.array()));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="javascript中-quot-28-quot-的无符号数2进制和16进制转化"><a href="#javascript中-quot-28-quot-的无符号数2进制和16进制转化" class="headerlink" title="javascript中&quot;-28&quot;的无符号数2进制和16进制转化"></a>javascript中&quot;-28&quot;的无符号数2进制和16进制转化</h3><p>上面的代码用java对<code>-28</code>的16进制无符号数的转化过程做了一个演示，下面再用javascript演示一下转化过程如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// a zero fill right shift converts it's operand to a 32 signed bit integer.</span></div><div class="line"><span class="keyword">var</span> binary = (<span class="number">-28</span> &gt;&gt;&gt; <span class="number">0</span>).toString(<span class="number">2</span>);  <span class="comment">// coerced to uint32</span></div><div class="line"><span class="built_in">console</span>.log(binary);                   <span class="comment">// 11111111111111111111111111100100</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(binary, <span class="number">2</span>) &gt;&gt; <span class="number">0</span>); <span class="comment">// -28, binary to int32</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> b0 = <span class="number">-28</span> &amp; <span class="number">0xFF</span>;             <span class="comment">// -28 用1个字节来表示其无符号数即为228</span></div><div class="line"><span class="built_in">console</span>.log(b0);                 <span class="comment">// 228</span></div><div class="line"><span class="built_in">console</span>.log(b0.toString(<span class="number">16</span>));    <span class="comment">// e4</span></div><div class="line"></div><div class="line"><span class="built_in">encodeURIComponent</span>(<span class="string">"中"</span>);        <span class="comment">// '%E4%B8%AD'</span></div><div class="line"><span class="built_in">decodeURIComponent</span>(<span class="string">"%e4%b8%ad"</span>); <span class="comment">// '中'</span></div></pre></td></tr></table></figure>
<h3 id="使用UTF-16编码并使用java默认的字节序"><a href="#使用UTF-16编码并使用java默认的字节序" class="headerlink" title="使用UTF-16编码并使用java默认的字节序"></a>使用UTF-16编码并使用java默认的字节序</h3><p>当上述字符串使用<code>UTF-16</code>编码格式进行存储时，仍然是高位在前，即大端模式，而且因为16进制有字节序的问题，必须声明当前存储的内容的字节序是什么模式的，所以最前面有<code>0xFEFF</code>的2个字节来表示<code>BOM</code>。</p>
<p><code>UTF-16</code>编码中所有的字符都是用2个字节来表示的，因为字母<code>a</code>也是用<code>[0, 97]</code>这2个字节来表示，并且高位<code>0</code>(0x00)在低位<code>97</code>(0x61)之前。因为<code>UTF-16</code>用<code>2个字节</code>表示<code>一个字符</code>，那么其最多能表示<code>1 &lt;&lt; 16 - 1 = 65535</code>个字符。</p>
<p>因为java中不存在<code>无符号数</code>，即没有<code>C</code>语言中<code>unsigned</code>类型的整数，java中一个字节<code>byte</code>能表示的数值范围为<code>-128 ~ 127</code>，因此1个字节<code>0xFE</code>即为有符号数的<code>-2</code>，而<code>0xFF</code>则为有符号数的<code>-1</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUTF16ByteOrder</span><span class="params">()</span> </span>&#123;</div><div class="line">    String abcdef = <span class="string">"abcde中"</span>; <span class="comment">// 中 16进制为： 0x4e2d ，其 unicode 码为： 20013</span></div><div class="line">    <span class="comment">// 下面这句输出为：[-2, -1, 0, 97, 0, 98, 0, 99, 0, 100, 0, 101, 78, 45]</span></div><div class="line">    <span class="comment">// UTF_16 编码中每个字符占2个字节存储空间，“中”字的16进制为0x4e2d，按大端模式，高位先存储在第1个字节</span></div><div class="line">    <span class="comment">// 1. 即0x4e2d中的4e存储在第1个字节，4e的10进制数即为78，2进制数为： 01001110</span></div><div class="line">    <span class="comment">// 2. 而0x4e2d中的2d存储在第2个字节，2d的10进制数即为45，2进制数为： 00101101</span></div><div class="line">    <span class="comment">// 3. 内存中的形式如： 0100111000101101</span></div><div class="line">    System.out.println(Arrays.toString(abcdef.getBytes(Charsets.UTF_16)));</div><div class="line"></div><div class="line">    <span class="comment">// 4. 转化 0100111000101101 为10进制数： 20013</span></div><div class="line">    <span class="keyword">int</span> charCode = Integer.parseInt(<span class="string">"0100111000101101"</span>, <span class="number">2</span>);</div><div class="line">    System.out.println(charCode); <span class="comment">// 20013</span></div><div class="line">    System.out.println((<span class="keyword">int</span>) <span class="string">"中"</span>.charAt(<span class="number">0</span>)); <span class="comment">// 20013</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="java中设置字符串存储的字节序"><a href="#java中设置字符串存储的字节序" class="headerlink" title="java中设置字符串存储的字节序"></a>java中设置字符串存储的字节序</h3><p>通过设置<code>ByteBuffer#order(ByteOrder)</code>方法，设置其以<code>CharBuffer</code>使用时，控制每个<code>char</code>存储的字节序。如果是按<code>byte</code>存储，则使用默认的大端模式存储，这个方法设置就没有意义了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBigEndian</span><span class="params">()</span> </span>&#123;</div><div class="line">    ByteBuffer byteBuffer = ByteBuffer.wrap(<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">16</span>]);</div><div class="line">    <span class="comment">// byteBuffer.order(ByteOrder.BIG_ENDIAN); // 默认值，不设置</span></div><div class="line"></div><div class="line">    String abcdef = <span class="string">"abcde中"</span>;</div><div class="line">    CharBuffer charBuffer = byteBuffer.asCharBuffer();</div><div class="line">    charBuffer.put(abcdef);</div><div class="line">    charBuffer.rewind();</div><div class="line">    System.out.println(charBuffer.position()); <span class="comment">// 0</span></div><div class="line">    System.out.println(charBuffer.limit()); <span class="comment">// 8</span></div><div class="line">    System.out.println(charBuffer.capacity()); <span class="comment">// 16 / 2 = 8; 1个char占2个bytes</span></div><div class="line"></div><div class="line">    <span class="comment">// 大端字节序输出为：[0, 97, 0, 98, 0, 99, 0, 100, 0, 101, 78, 45]</span></div><div class="line">    System.out.println(Arrays.toString(byteBuffer.array()));</div><div class="line">    System.out.println(<span class="keyword">new</span> String(byteBuffer.array()));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLittleEndian</span><span class="params">()</span> </span>&#123;</div><div class="line">    ByteBuffer byteBuffer = ByteBuffer.wrap(<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">16</span>]);</div><div class="line">    byteBuffer.order(ByteOrder.LITTLE_ENDIAN); <span class="comment">// 设置字节序</span></div><div class="line"></div><div class="line">    String abcdef = <span class="string">"abcde中"</span>;</div><div class="line">    CharBuffer charBuffer = byteBuffer.asCharBuffer();</div><div class="line">    charBuffer.put(abcdef);</div><div class="line">    charBuffer.rewind();</div><div class="line"></div><div class="line">    <span class="comment">// 小端字节序输出：[97, 0, 98, 0, 99, 0, 100, 0, 101, 0, 45, 78, 0, 0, 0, 0]</span></div><div class="line">    System.out.println(Arrays.toString(byteBuffer.array()));</div><div class="line">    System.out.println(<span class="keyword">new</span> String(byteBuffer.array()));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="关于java和C语言中的char类型"><a href="#关于java和C语言中的char类型" class="headerlink" title="关于java和C语言中的char类型"></a>关于java和C语言中的char类型</h2><p>简单说一下这2个语言中都有<code>char</code>类型，但使用方式不一样，C语言中的<code>char</code>类型：</p>
<ol>
<li>只使用<code>1个字节</code>，1个字节也就没有字节序的问题。</li>
<li><code>unsigned char</code>，数值表示范围为<code>0 ~ 255</code>。</li>
<li><code>signed char</code>，有符号数的表示范围为<code>-128 ~ 127</code>，这个与java中的<code>byte</code>相同。</li>
</ol>
<p>java语言中的<code>char</code>类型：</p>
<ol>
<li>使用<code>2个字节</code>，所以有字节序的问题，java默认为大端序。</li>
<li>类似于<code>C</code>语言的<code>signed short int</code>，可表示的数值范围为<code>0 ~ 65535</code>。</li>
<li>java中没有实现无符号数。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sizeOfJavaChar</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// java中的char有点像C语言中的signed short int，256以内的字符实际上只要一个字节就可以</span></div><div class="line">    <span class="keyword">char</span> ff = <span class="number">0xFF</span>;</div><div class="line">    System.out.println((<span class="keyword">int</span>) ff);  <span class="comment">// 255</span></div><div class="line"></div><div class="line">    <span class="keyword">char</span> ff2 = <span class="number">0xFFFF</span>;             <span class="comment">// 255以上，65536以下，则需要2个字节</span></div><div class="line">    System.out.println((<span class="keyword">int</span>) ff2); <span class="comment">// 65535</span></div><div class="line"></div><div class="line">    <span class="comment">// 超过0xFFFF就走出数值表示范围了</span></div><div class="line">    <span class="keyword">int</span> i0000 = <span class="number">0x10000</span>;</div><div class="line">    System.out.println(i0000);     <span class="comment">// 65536</span></div><div class="line">    <span class="keyword">char</span> ff3 = (<span class="keyword">char</span>) <span class="number">0x10000</span>;     <span class="comment">// 不强转，则已经超出char的数值范围了，强转就丢精度了</span></div><div class="line">    System.out.println((<span class="keyword">int</span>) ff3); <span class="comment">// 0</span></div><div class="line"></div><div class="line">    <span class="keyword">short</span> s = <span class="number">0x0102</span>;</div><div class="line">    System.out.println(s);        <span class="comment">// 258</span></div><div class="line">    System.out.println(s &gt;&gt; <span class="number">8</span>);   <span class="comment">// 1 高位</span></div><div class="line">    System.out.println(s &amp; <span class="number">0xFF</span>); <span class="comment">// 2 低位</span></div><div class="line">    System.out.println((<span class="keyword">byte</span>) s); <span class="comment">// 2 丢失高位</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="javascript中的字节序"><a href="#javascript中的字节序" class="headerlink" title="javascript中的字节序"></a>javascript中的字节序</h2><p>下面的ES6代码对同一段内存<code>ArrayBuffer</code>，分别建立两种视图<code>TypedArray</code>：</p>
<ol>
<li>8位无符号整数（Uint8Array构造函数）。</li>
<li>16位带无符号整数（Uint16Array构造函数）。</li>
</ol>
<p><code>ArrayBuffer</code>是不能直接被访问的，因此需要借助<code>TypedArray</code>。由于两个视图对应的是同一段内存，一个视图修改底层内存，会影响到另一个视图。这个过程有点像<code>C</code>语言中的<code>union</code>联合类型。</p>
<img src="/blog/img/web/js/javascript-typed-arrays.png" title="[javascript-typed-arrays.png]">
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> arrayBuffer = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">2</span>);</div><div class="line"><span class="keyword">var</span> u8 = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(arrayBuffer);   <span class="comment">// 同一段内存地址</span></div><div class="line"><span class="keyword">var</span> u16 = <span class="keyword">new</span> <span class="built_in">Uint16Array</span>(arrayBuffer); <span class="comment">// 同一段内存地址</span></div><div class="line"></div><div class="line"><span class="comment">// Determine whether Uint16 is little-endian or big-endian.</span></div><div class="line">u16[<span class="number">0</span>] = (<span class="number">1</span> &lt;&lt; <span class="number">8</span>) + <span class="number">2</span>; <span class="comment">// 即0x0102，必须加括号，&lt;&lt; 左移操作符优先级低于 +</span></div><div class="line"><span class="built_in">console</span>.log(u8);       <span class="comment">// [2, 1]</span></div><div class="line"><span class="built_in">console</span>.log(u16);      <span class="comment">// [258]</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> isLittleEndian = <span class="literal">true</span>;</div><div class="line"><span class="keyword">if</span> (u8[<span class="number">0</span>] === <span class="number">0x01</span> &amp;&amp; u8[<span class="number">1</span>] === <span class="number">0x02</span>) &#123;</div><div class="line">    isLittleEndian = <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"is little endian : "</span> + isLittleEndian);</div><div class="line"></div><div class="line">u8[<span class="number">0</span>] = <span class="number">0xFF</span>; <span class="comment">// 修改内存低地址的值，查看对u16的影响</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(u8);     <span class="comment">// [255, 1]</span></div><div class="line"><span class="built_in">console</span>.log(u16);    <span class="comment">// [511]，即0x01FF</span></div><div class="line"><span class="built_in">console</span>.log(<span class="number">0x01FF</span>); <span class="comment">// 低位由0x02改成0xFF</span></div></pre></td></tr></table></figure>
<p>以上代码在浏览器里运行的结果如下：</p>
<blockquote>
<p>Uint8Array(2) [2, 1]<br>Uint16Array [258]<br>is little endian : true<br>Uint8Array(2) [255, 1]<br>Uint16Array [511]<br>511</p>
</blockquote>
<p>在<code>node</code>的<code>REPL</code>中的运行结果如下：</p>
<blockquote>
<p>{ &#39;0&#39;: 2, &#39;1&#39;: 1 }<br>{ &#39;0&#39;: 258 }<br>is little endian : true<br>{ &#39;0&#39;: 255, &#39;1&#39;: 1 }<br>{ &#39;0&#39;: 511 }<br>511</p>
</blockquote>
<p>以上javascript代码都是在<code>x86</code>的CPU上运行的，无论是浏览器和还是<code>REPL</code>，表现的结果都是<code>小端</code>序。</p>
<p>在<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays" target="_blank" rel="external">MDN</a>上<code>Typed array views</code>说明了其字节序是平台相关的，摘录部分内容如下：</p>
<blockquote>
<p>Typed array views are in the native byte-order (see Endianness) of your platform. With a DataView you are able to control the byte-order.</p>
</blockquote>
<h3 id="使用DataView检测平台的字节序"><a href="#使用DataView检测平台的字节序" class="headerlink" title="使用DataView检测平台的字节序"></a>使用DataView检测平台的字节序</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isLittleEndian</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> arrayBuffer = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">2</span>);</div><div class="line">    <span class="keyword">var</span> view = <span class="keyword">new</span> <span class="built_in">DataView</span>(arrayBuffer);</div><div class="line">    view.setInt16(<span class="number">0</span>, <span class="number">256</span>, <span class="literal">true</span>); <span class="comment">// 显式以little endian写入数据256，即0x0100</span></div><div class="line"></div><div class="line">    <span class="comment">// 此时arrayBuffer里的内存布局应该是 0x00 0x01</span></div><div class="line">    <span class="keyword">var</span> i16 = <span class="keyword">new</span> <span class="built_in">Int16Array</span>(arrayBuffer);</div><div class="line">    <span class="comment">// 如果以little endian读取，它就是0x0100，即256；以big endian读取，则是0x0001，即为1</span></div><div class="line">    <span class="keyword">return</span> i16[<span class="number">0</span>] === <span class="number">256</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="javascipt中有符号数与无符号数转换"><a href="#javascipt中有符号数与无符号数转换" class="headerlink" title="javascipt中有符号数与无符号数转换"></a>javascipt中有符号数与无符号数转换</h3><p>通过使用逻辑右移运算符，移动位数为0，可以将32位有符号整数，转化为32位无符号整数。</p>
<blockquote>
<p>unsigned = signed &gt;&gt;&gt; 0;</p>
</blockquote>
<p>通过使用左移运算符，位动位数为0，可以将32位无符号整数，转化为32位有符号整数。</p>
<blockquote>
<p>signed = unsigned &lt;&lt; 0;</p>
</blockquote>
<h4 id="javascript有符号数和无符号数转换测试代码"><a href="#javascript有符号数和无符号数转换测试代码" class="headerlink" title="javascript有符号数和无符号数转换测试代码"></a>javascript有符号数和无符号数转换测试代码</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> signed, unsigned;</div><div class="line">signed = <span class="number">-1</span>;</div><div class="line">unsigned = signed &gt;&gt;&gt; <span class="number">0</span>;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"unsigned = "</span> + unsigned); <span class="comment">// unsigned = 4294967295</span></div><div class="line">signed = unsigned &lt;&lt; <span class="number">0</span>;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"signed = "</span> + signed);   <span class="comment">// signed = -1</span></div></pre></td></tr></table></figure>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol>
<li><a href="https://betterexplained.com/articles/understanding-big-and-little-endian-byte-order/" target="_blank" rel="external">Understanding Big and Little Endian Byte Order</a></li>
<li><a href="http://blog.csdn.net/ce123_zhouwei/article/details/6971544" target="_blank" rel="external">详解大端模式和小端模式</a></li>
<li><a href="http://c.biancheng.net/cpp/html/3047.html" target="_blank" rel="external">socket网络字节序以及大端序小端序</a></li>
<li><a href="http://www.bysocket.com/?p=615" target="_blank" rel="external">深入浅出： 大小端模式</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays" target="_blank" rel="external">JavaScript typed arrays</a></li>
<li><a href="http://javascript.ruanyifeng.com/stdlib/arraybuffer.html" target="_blank" rel="external">ES6二进制数组</a></li>
<li><a href="https://stackoverflow.com/questions/7869752/javascript-typed-arrays-and-endianness" target="_blank" rel="external">Javascript Typed Arrays and Endianness</a></li>
<li><a href="http://jimliu.net/2015/09/26/a-brief-look-at-binary-ops-in-js/" target="_blank" rel="external">JS中的二进制操作</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是little-endian和big-endian&quot;&gt;&lt;a href=&quot;#什么是little-endian和big-endian&quot; class=&quot;headerlink&quot; title=&quot;什么是little-endian和big-endian&quot;&gt;&lt;/a&gt;什么是little-endian和big-endian&lt;/h2&gt;&lt;p&gt;&lt;code&gt;字节序&lt;/code&gt;(&lt;code&gt;byte order&lt;/code&gt;)又称端序或尾序(&lt;code&gt;Endianness&lt;/code&gt;)，多字节对象都被存储为连续的字节序列，存储地址内的排列有两个通用规则：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;little-endian: 小端序，就是低位字节放在内存的起始地址，即最低有效位在最高有效位的前面。&lt;/li&gt;
&lt;li&gt;big-endian:    大端序，就是高位字节放在内存的起始地址，即最高有效位在最低有效位的前面。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;示例&quot;&gt;&lt;a href=&quot;#示例&quot; class=&quot;headerlink&quot; title=&quot;示例&quot;&gt;&lt;/a&gt;示例&lt;/h3&gt;&lt;p&gt;比如16进制数字&lt;code&gt;0x12345678&lt;/code&gt;(10进制为&lt;code&gt;305419896&lt;/code&gt;)在内存中的表示形式为：&lt;/p&gt;
&lt;h4 id=&quot;大端模式&quot;&gt;&lt;a href=&quot;#大端模式&quot; class=&quot;headerlink&quot; title=&quot;大端模式&quot;&gt;&lt;/a&gt;大端模式&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;低地址     ------------------------&amp;gt;  高地址&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;0x12      |  0x34     |  0x56     |  0x78&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;00010010  |  00110100 |  01010110 |  01111000&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;小端模式&quot;&gt;&lt;a href=&quot;#小端模式&quot; class=&quot;headerlink&quot; title=&quot;小端模式&quot;&gt;&lt;/a&gt;小端模式&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;低地址     ------------------------&amp;gt;  高地址&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;0x78      |  0x56     |  0x34     |  0x12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;01111000  |  01010110 |  00110100 |  00010010&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;上面2者比较可见，大端模式和直接阅读数字的习惯一致。&lt;/li&gt;
&lt;li&gt;这2个模式中，共同点就是每个字节&lt;code&gt;byte&lt;/code&gt;都是由&lt;code&gt;8bit&lt;/code&gt;组成，而&lt;code&gt;bit&lt;/code&gt;只有2个值，即&lt;code&gt;0&lt;/code&gt;和&lt;code&gt;1&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;比如上面&lt;code&gt;0x78&lt;/code&gt;在内存中保存在一个字节中，其表现是一样的，其8个bit都是自右向左，和数学数字表示法一样，高位在左边，即&lt;code&gt;01111000&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="linux" scheme="https://www.4e00.com/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>猜姓氏java版</title>
    <link href="https://www.4e00.com/java/2017/10/09/last-name-guess-java.html"/>
    <id>https://www.4e00.com/java/2017/10/09/last-name-guess-java.html</id>
    <published>2017-10-09T15:14:46.000Z</published>
    <updated>2017-10-16T01:54:04.726Z</updated>
    
    <content type="html"><![CDATA[<p>猜姓氏一般的都是127个姓之内，以下代码中一共包括400多个姓氏，这个猜姓氏的算法就是将每个姓氏对应一个独一无二的2进制编码。然后按2进制数不同bit位置上是1的进行分组，这样每组开头的数分别是1，2，4，8，16，32，64，128和256，将姓氏出现的那个组的第1个数字加在一起，得到的编号就是对应的姓。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> com.google.common.collect.Lists;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LastNameGuessing</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String[] LAST_NAMES = (<span class="string">"王,李,张,刘,陈,杨,黄,吴,赵,周,徐,孙,马,朱,胡,林,郭,何,高,罗,郑,梁,"</span> +</div><div class="line">            <span class="string">"谢,宋,唐,许,邓,冯,韩,曹,曾,彭,萧,蔡,潘,田,董,袁,于,余,叶,蒋,杜,苏,魏,程,吕,丁,沈,任,姚,卢,傅,钟,姜,"</span> +</div><div class="line">            <span class="string">"崔,谭,廖,范,汪,陆,金,石,戴,贾,韦,夏,邱,方,侯,邹,熊,孟,秦,白,江,阎,薛,尹,段,雷,黎,史,龙,陶,贺,顾,毛,"</span> +</div><div class="line">            <span class="string">"郝,龚,邵,万,钱,严,赖,覃,洪,武,莫,孔,汤,向,常,温,康,施,文,牛,樊,葛,邢,安,齐,易,乔,伍,庞,颜,倪,庄,聂,"</span> +</div><div class="line">            <span class="string">"章,鲁,岳,翟,殷,詹,申,欧,耿,关,兰,焦,俞,左,柳,甘,祝,包,宁,尚,符,舒,阮,柯,纪,梅,童,凌,毕,单,季,裴,霍,"</span> +</div><div class="line">            <span class="string">"涂,成,苗,谷,盛,曲,翁,冉,骆,蓝,路,游,辛,靳,欧阳,管,柴,蒙,鲍,华,喻,祁,蒲,房,滕,屈,饶,解,牟,艾,尤,阳,"</span> +</div><div class="line">            <span class="string">"时,穆,农,司,卓,古,吉,缪,简,车,项,连,芦,麦,褚,娄,窦,戚,岑,景,党,宫,费,卜,冷,晏,席,卫,米,柏,宗,瞿,桂,"</span> +</div><div class="line">            <span class="string">"全,佟,应,臧,闵,苟,邬,边,卞,姬,师,和,仇,栾,隋,商,刁,沙,荣,巫,寇,桑,郎,甄,丛,仲,虞,敖,巩,明,佘,池,查,"</span> +</div><div class="line">            <span class="string">"麻,苑,迟,邝,官,封,谈,匡,鞠,惠,荆,乐,冀,郁,胥,南,班,储,原,栗,燕,楚,鄢,劳,谌,奚,皮,粟,冼,蔺,楼,盘,满,"</span> +</div><div class="line">            <span class="string">"闻,位,厉,仝,区,郜,海,阚,花,权,强,帅,屠,豆,朴,盖,练,廉,禹,井,祖,漆,巴,丰,支,卿,国,狄,平,计,索,宣,晋,"</span> +</div><div class="line">            <span class="string">"相,初,门,雲,容,敬,来,扈,晁,芮,都,普,阙,浦,戈,伏,鹿,薄,邸,雍,辜,羊,阿,乌,母,裘,亓,修,邰,赫,杭,况,那,"</span> +</div><div class="line">            <span class="string">"宿,鲜,印,逯,隆,茹,诸,战,慕,危,玉,银,亢,嵇,公,哈,湛,宾,戎,勾,茅,利,於,呼,居,揭,干,但,尉,冶,斯,元,束,"</span> +</div><div class="line">            <span class="string">"檀,衣,信,展,阴,昝,智,幸,奉,植,衡,富,尧,闭,由,伊,万俟,司马,上官,夏侯,诸葛,东方,赫连,皇甫,尉迟,公羊,"</span> +</div><div class="line">            <span class="string">"澹台,公冶,宗政,濮阳,淳于,单于,太叔,申屠,公孙,仲孙,轩辕,令狐,钟离,宇文,长孙,慕容,鲜于,闾丘,司徒,司空,"</span> +</div><div class="line">            <span class="string">"亓官,司寇,子车,颛孙,端木,巫马,公西,漆雕,乐正,壤驷,公良,拓跋,夹谷,宰父,谷梁,段干,百里,东郭,南门,呼延,"</span> +</div><div class="line">            <span class="string">"羊舌,微生,梁丘,左丘,东门,西门,南宫"</span>).split(<span class="string">","</span>);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> MAX = LAST_NAMES.length; <span class="comment">// 255 or 127，一般的就算127个姓</span></div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;List&lt;LastName&gt;&gt; GROUPS = init();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">log</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> base)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) Math.ceil(Math.log(x) / Math.log(base));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;List&lt;LastName&gt;&gt; init() &#123;</div><div class="line">        <span class="keyword">int</span> size = log(MAX + <span class="number">1</span>, <span class="number">2</span>);</div><div class="line">        List&lt;LastName&gt; data = getData();</div><div class="line">        List&lt;LastName&gt; list = data.subList(<span class="number">0</span>, MAX);</div><div class="line">        List&lt;List&lt;LastName&gt;&gt; groups = Lists.newArrayList();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</div><div class="line">            List&lt;LastName&gt; group = Lists.newArrayList();</div><div class="line">            groups.add(group);</div><div class="line">            <span class="keyword">for</span> (LastName t : list) &#123;</div><div class="line">                <span class="keyword">int</span> id = t.getId();</div><div class="line">                <span class="keyword">int</span> b = (id &gt;&gt; i) &amp; <span class="number">0x1</span>; <span class="comment">// 高位取０</span></div><div class="line">                <span class="keyword">if</span> (b == <span class="number">1</span>) &#123;</div><div class="line">                    group.add(t);</div><div class="line">                    String lastName = t.getLastName();</div><div class="line">                    System.out.printf(<span class="string">"%3d\t%s\t"</span>, id, lastName);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            System.out.println(<span class="string">"\n"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> groups;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;LastName&gt; <span class="title">getData</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> length = LAST_NAMES.length;</div><div class="line">        List&lt;LastName&gt; lastNames = Lists.newArrayList();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</div><div class="line">            String s = LAST_NAMES[i];</div><div class="line">            LastName lastName = <span class="keyword">new</span> LastName();</div><div class="line">            lastName.setId(i + <span class="number">1</span>);</div><div class="line">            lastName.setLastName(s);</div><div class="line">            lastNames.add(lastName);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> lastNames;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">(String q)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> size = log(MAX + <span class="number">1</span>, <span class="number">2</span>);</div><div class="line">        String result = <span class="string">""</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</div><div class="line">            List&lt;LastName&gt; group = GROUPS.get(i);</div><div class="line">            <span class="keyword">boolean</span> found = <span class="keyword">false</span>;</div><div class="line">            <span class="keyword">for</span> (LastName g : group) &#123;</div><div class="line">                String lastName = g.getLastName();</div><div class="line">                <span class="keyword">if</span> (lastName.equals(q)) &#123;</div><div class="line">                    found = <span class="keyword">true</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (found) &#123;</div><div class="line">                result = <span class="string">"1"</span> + result;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                result = <span class="string">"0"</span> + result;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        System.out.printf(<span class="string">"%-10s-&gt;%4d:%s%n"</span>, result, Integer.parseInt(result, <span class="number">2</span>), q); <span class="comment">// 10000110 -&gt; 134</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LastName</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String lastName;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLastName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> lastName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLastName</span><span class="params">(String lastName)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.lastName = lastName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>运行<code>main</code>方法之后，输出生成的姓氏分组如下：</p>
<table>
<thead>
<tr>
<th style="text-align:left">姓氏分组</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1 王    3 张    5 陈    7 黄    9 赵   11 徐   13 马   15 胡   17 郭   19 高   21 郑   23 谢   25 唐   27 邓   29 韩   31 曾   33 萧   35 潘   37 董   39 于   41 叶   43 杜   45 魏   47 吕   49 沈   51 姚   53 傅   55 姜   57 谭   59 范   61 陆   63 石   65 贾   67 夏   69 方   71 邹   73 孟   75 白   77 阎   79 尹   81 雷   83 史   85 陶   87 顾   89 郝   91 邵   93 钱   95 赖   97 洪   99 莫  101 汤  103 常  105 康  107 文  109 樊  111 邢  113 齐  115 乔  117 庞  119 倪  121 聂  123 鲁  125 翟  127 詹  129 欧  131 关  133 焦  135 左  137 甘  139 包  141 尚  143 舒  145 柯  147 梅  149 凌  151 单  153 裴  155 涂  157 苗  159 盛  161 翁  163 骆  165 路  167 辛  169 欧阳    171 柴  173 鲍  175 喻  177 蒲  179 滕  181 饶  183 牟  185 尤  187 时  189 农  191 卓  193 吉  195 简  197 项  199 芦  201 褚  203 窦  205 岑  207 党  209 费  211 冷  213 席  215 米  217 宗  219 桂  221 佟  223 臧  225 苟  227 边  229 姬  231 和  233 栾  235 商  237 沙  239 巫  241 桑  243 甄  245 仲  247 敖  249 明  251 池  253 麻  255 迟  257 官  259 谈  261 鞠  263 荆  265 冀  267 胥  269 班  271 原  273 燕  275 鄢  277 谌  279 皮  281 冼  283 楼  285 满  287 位  289 仝  291 郜  293 阚  295 权  297 帅  299 豆  301 盖  303 廉  305 井  307 漆  309 丰  311 卿  313 狄  315 计  317 宣  319 相  321 门  323 容  325 来  327 晁  329 都  331 阙  333 戈  335 鹿  337 邸  339 辜  341 阿  343 母  345 亓  347 邰  349 杭  351 那  353 鲜  355 逯  357 茹  359 战  361 危  363 银  365 嵇  367 哈  369 宾  371 勾  373 利  375 呼  377 揭  379 但  381 冶  383 元  385 檀  387 信  389 阴  391 智  393 奉  395 衡  397 尧  399 由  401 万俟    403 上官    405 诸葛    407 赫连    409 尉迟    411 澹台    413 宗政    415 淳于    417 太叔    419 公孙    421 轩辕    423 钟离    425 长孙    427 鲜于    429 司徒    431 亓官    433 子车    435 端木    437 公西    439 乐正    441 公良    443 夹谷    445 谷梁    447 百里    449 南门    451 羊舌    453 梁丘    455 东门    457 南宫</td>
</tr>
<tr>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">2 李    3 张    6 杨    7 黄   10 周   11 徐   14 朱   15 胡   18 何   19 高   22 梁   23 谢   26 许   27 邓   30 曹   31 曾   34 蔡   35 潘   38 袁   39 于   42 蒋   43 杜   46 程   47 吕   50 任   51 姚   54 钟   55 姜   58 廖   59 范   62 金   63 石   66 韦   67 夏   70 侯   71 邹   74 秦   75 白   78 薛   79 尹   82 黎   83 史   86 贺   87 顾   90 龚   91 邵   94 严   95 赖   98 武   99 莫  102 向  103 常  106 施  107 文  110 葛  111 邢  114 易  115 乔  118 颜  119 倪  122 章  123 鲁  126 殷  127 詹  130 耿  131 关  134 俞  135 左  138 祝  139 包  142 符  143 舒  146 纪  147 梅  150 毕  151 单  154 霍  155 涂  158 谷  159 盛  162 冉  163 骆  166 游  167 辛  170 管  171 柴  174 华  175 喻  178 房  179 滕  182 解  183 牟  186 阳  187 时  190 司  191 卓  194 缪  195 简  198 连  199 芦  202 娄  203 窦  206 景  207 党  210 卜  211 冷  214 卫  215 米  218 瞿  219 桂  222 应  223 臧  226 邬  227 边  230 师  231 和  234 隋  235 商  238 荣  239 巫  242 郎  243 甄  246 虞  247 敖  250 佘  251 池  254 苑  255 迟  258 封  259 谈  262 惠  263 荆  266 郁  267 胥  270 储  271 原  274 楚  275 鄢  278 奚  279 皮  282 蔺  283 楼  286 闻  287 位  290 区  291 郜  294 花  295 权  298 屠  299 豆  302 练  303 廉  306 祖  307 漆  310 支  311 卿  314 平  315 计  318 晋  319 相  322 雲  323 容  326 扈  327 晁  330 普  331 阙  334 伏  335 鹿  338 雍  339 辜  342 乌  343 母  346 修  347 邰  350 况  351 那  354 印  355 逯  358 诸  359 战  362 玉  363 银  366 公  367 哈  370 戎  371 勾  374 於  375 呼  378 干  379 但  382 斯  383 元  386 衣  387 信  390 昝  391 智  394 植  395 衡  398 闭  399 由  402 司马    403 上官    406 东方    407 赫连    410 公羊    411 澹台    414 濮阳    415 淳于    418 申屠    419 公孙    422 令狐    423 钟离    426 慕容    427 鲜于    430 司空    431 亓官    434 颛孙    435 端木    438 漆雕    439 乐正    442 拓跋    443 夹谷    446 段干    447 百里    450 呼延    451 羊舌    454 左丘    455 东门</td>
</tr>
<tr>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">4 刘    5 陈    6 杨    7 黄   12 孙   13 马   14 朱   15 胡   20 罗   21 郑   22 梁   23 谢   28 冯   29 韩   30 曹   31 曾   36 田   37 董   38 袁   39 于   44 苏   45 魏   46 程   47 吕   52 卢   53 傅   54 钟   55 姜   60 汪   61 陆   62 金   63 石   68 邱   69 方   70 侯   71 邹   76 江   77 阎   78 薛   79 尹   84 龙   85 陶   86 贺   87 顾   92 万   93 钱   94 严   95 赖  100 孔  101 汤  102 向  103 常  108 牛  109 樊  110 葛  111 邢  116 伍  117 庞  118 颜  119 倪  124 岳  125 翟  126 殷  127 詹  132 兰  133 焦  134 俞  135 左  140 宁  141 尚  142 符  143 舒  148 童  149 凌  150 毕  151 单  156 成  157 苗  158 谷  159 盛  164 蓝  165 路  166 游  167 辛  172 蒙  173 鲍  174 华  175 喻  180 屈  181 饶  182 解  183 牟  188 穆  189 农  190 司  191 卓  196 车  197 项  198 连  199 芦  204 戚  205 岑  206 景  207 党  212 晏  213 席  214 卫  215 米  220 全  221 佟  222 应  223 臧  228 卞  229 姬  230 师  231 和  236 刁  237 沙  238 荣  239 巫  244 丛  245 仲  246 虞  247 敖  252 查  253 麻  254 苑  255 迟  260 匡  261 鞠  262 惠  263 荆  268 南  269 班  270 储  271 原  276 劳  277 谌  278 奚  279 皮  284 盘  285 满  286 闻  287 位  292 海  293 阚  294 花  295 权  300 朴  301 盖  302 练  303 廉  308 巴  309 丰  310 支  311 卿  316 索  317 宣  318 晋  319 相  324 敬  325 来  326 扈  327 晁  332 浦  333 戈  334 伏  335 鹿  340 羊  341 阿  342 乌  343 母  348 赫  349 杭  350 况  351 那  356 隆  357 茹  358 诸  359 战  364 亢  365 嵇  366 公  367 哈  372 茅  373 利  374 於  375 呼  380 尉  381 冶  382 斯  383 元  388 展  389 阴  390 昝  391 智  396 富  397 尧  398 闭  399 由  404 夏侯    405 诸葛    406 东方    407 赫连    412 公冶    413 宗政    414 濮阳    415 淳于    420 仲孙    421 轩辕    422 令狐    423 钟离    428 闾丘    429 司徒    430 司空    431 亓官    436 巫马    437 公西    438 漆雕    439 乐正    444 宰父    445 谷梁    446 段干    447 百里    452 微生    453 梁丘    454 左丘    455 东门</td>
</tr>
<tr>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">8 吴    9 赵   10 周   11 徐   12 孙   13 马   14 朱   15 胡   24 宋   25 唐   26 许   27 邓   28 冯   29 韩   30 曹   31 曾   40 余   41 叶   42 蒋   43 杜   44 苏   45 魏   46 程   47 吕   56 崔   57 谭   58 廖   59 范   60 汪   61 陆   62 金   63 石   72 熊   73 孟   74 秦   75 白   76 江   77 阎   78 薛   79 尹   88 毛   89 郝   90 龚   91 邵   92 万   93 钱   94 严   95 赖  104 温  105 康  106 施  107 文  108 牛  109 樊  110 葛  111 邢  120 庄  121 聂  122 章  123 鲁  124 岳  125 翟  126 殷  127 詹  136 柳  137 甘  138 祝  139 包  140 宁  141 尚  142 符  143 舒  152 季  153 裴  154 霍  155 涂  156 成  157 苗  158 谷  159 盛  168 靳  169 欧阳    170 管  171 柴  172 蒙  173 鲍  174 华  175 喻  184 艾  185 尤  186 阳  187 时  188 穆  189 农  190 司  191 卓  200 麦  201 褚  202 娄  203 窦  204 戚  205 岑  206 景  207 党  216 柏  217 宗  218 瞿  219 桂  220 全  221 佟  222 应  223 臧  232 仇  233 栾  234 隋  235 商  236 刁  237 沙  238 荣  239 巫  248 巩  249 明  250 佘  251 池  252 查  253 麻  254 苑  255 迟  264 乐  265 冀  266 郁  267 胥  268 南  269 班  270 储  271 原  280 粟  281 冼  282 蔺  283 楼  284 盘  285 满  286 闻  287 位  296 强  297 帅  298 屠  299 豆  300 朴  301 盖  302 练  303 廉  312 国  313 狄  314 平  315 计  316 索  317 宣  318 晋  319 相  328 芮  329 都  330 普  331 阙  332 浦  333 戈  334 伏  335 鹿  344 裘  345 亓  346 修  347 邰  348 赫  349 杭  350 况  351 那  360 慕  361 危  362 玉  363 银  364 亢  365 嵇  366 公  367 哈  376 居  377 揭  378 干  379 但  380 尉  381 冶  382 斯  383 元  392 幸  393 奉  394 植  395 衡  396 富  397 尧  398 闭  399 由  408 皇甫    409 尉迟    410 公羊    411 澹台    412 公冶    413 宗政    414 濮阳    415 淳于    424 宇文    425 长孙    426 慕容    427 鲜于    428 闾丘    429 司徒    430 司空    431 亓官    440 壤驷    441 公良    442 拓跋    443 夹谷    444 宰父    445 谷梁    446 段干    447 百里    456 西门    457 南宫</td>
</tr>
<tr>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">16 林   17 郭   18 何   19 高   20 罗   21 郑   22 梁   23 谢   24 宋   25 唐   26 许   27 邓   28 冯   29 韩   30 曹   31 曾   48 丁   49 沈   50 任   51 姚   52 卢   53 傅   54 钟   55 姜   56 崔   57 谭   58 廖   59 范   60 汪   61 陆   62 金   63 石   80 段   81 雷   82 黎   83 史   84 龙   85 陶   86 贺   87 顾   88 毛   89 郝   90 龚   91 邵   92 万   93 钱   94 严   95 赖  112 安  113 齐  114 易  115 乔  116 伍  117 庞  118 颜  119 倪  120 庄  121 聂  122 章  123 鲁  124 岳  125 翟  126 殷  127 詹  144 阮  145 柯  146 纪  147 梅  148 童  149 凌  150 毕  151 单  152 季  153 裴  154 霍  155 涂  156 成  157 苗  158 谷  159 盛  176 祁  177 蒲  178 房  179 滕  180 屈  181 饶  182 解  183 牟  184 艾  185 尤  186 阳  187 时  188 穆  189 农  190 司  191 卓  208 宫  209 费  210 卜  211 冷  212 晏  213 席  214 卫  215 米  216 柏  217 宗  218 瞿  219 桂  220 全  221 佟  222 应  223 臧  240 寇  241 桑  242 郎  243 甄  244 丛  245 仲  246 虞  247 敖  248 巩  249 明  250 佘  251 池  252 查  253 麻  254 苑  255 迟  272 栗  273 燕  274 楚  275 鄢  276 劳  277 谌  278 奚  279 皮  280 粟  281 冼  282 蔺  283 楼  284 盘  285 满  286 闻  287 位  304 禹  305 井  306 祖  307 漆  308 巴  309 丰  310 支  311 卿  312 国  313 狄  314 平  315 计  316 索  317 宣  318 晋  319 相  336 薄  337 邸  338 雍  339 辜  340 羊  341 阿  342 乌  343 母  344 裘  345 亓  346 修  347 邰  348 赫  349 杭  350 况  351 那  368 湛  369 宾  370 戎  371 勾  372 茅  373 利  374 於  375 呼  376 居  377 揭  378 干  379 但  380 尉  381 冶  382 斯  383 元  400 伊  401 万俟    402 司马    403 上官    404 夏侯    405 诸葛    406 东方    407 赫连    408 皇甫    409 尉迟    410 公羊    411 澹台    412 公冶    413 宗政    414 濮阳    415 淳于    432 司寇    433 子车    434 颛孙    435 端木    436 巫马    437 公西    438 漆雕    439 乐正    440 壤驷    441 公良    442 拓跋    443 夹谷    444 宰父    445 谷梁    446 段干    447 百里</td>
</tr>
<tr>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">32 彭   33 萧   34 蔡   35 潘   36 田   37 董   38 袁   39 于   40 余   41 叶   42 蒋   43 杜   44 苏   45 魏   46 程   47 吕   48 丁   49 沈   50 任   51 姚   52 卢   53 傅   54 钟   55 姜   56 崔   57 谭   58 廖   59 范   60 汪   61 陆   62 金   63 石   96 覃   97 洪   98 武   99 莫  100 孔  101 汤  102 向  103 常  104 温  105 康  106 施  107 文  108 牛  109 樊  110 葛  111 邢  112 安  113 齐  114 易  115 乔  116 伍  117 庞  118 颜  119 倪  120 庄  121 聂  122 章  123 鲁  124 岳  125 翟  126 殷  127 詹  160 曲  161 翁  162 冉  163 骆  164 蓝  165 路  166 游  167 辛  168 靳  169 欧阳    170 管  171 柴  172 蒙  173 鲍  174 华  175 喻  176 祁  177 蒲  178 房  179 滕  180 屈  181 饶  182 解  183 牟  184 艾  185 尤  186 阳  187 时  188 穆  189 农  190 司  191 卓  224 闵  225 苟  226 邬  227 边  228 卞  229 姬  230 师  231 和  232 仇  233 栾  234 隋  235 商  236 刁  237 沙  238 荣  239 巫  240 寇  241 桑  242 郎  243 甄  244 丛  245 仲  246 虞  247 敖  248 巩  249 明  250 佘  251 池  252 查  253 麻  254 苑  255 迟  288 厉  289 仝  290 区  291 郜  292 海  293 阚  294 花  295 权  296 强  297 帅  298 屠  299 豆  300 朴  301 盖  302 练  303 廉  304 禹  305 井  306 祖  307 漆  308 巴  309 丰  310 支  311 卿  312 国  313 狄  314 平  315 计  316 索  317 宣  318 晋  319 相  352 宿  353 鲜  354 印  355 逯  356 隆  357 茹  358 诸  359 战  360 慕  361 危  362 玉  363 银  364 亢  365 嵇  366 公  367 哈  368 湛  369 宾  370 戎  371 勾  372 茅  373 利  374 於  375 呼  376 居  377 揭  378 干  379 但  380 尉  381 冶  382 斯  383 元  416 单于    417 太叔    418 申屠    419 公孙    420 仲孙    421 轩辕    422 令狐    423 钟离    424 宇文    425 长孙    426 慕容    427 鲜于    428 闾丘    429 司徒    430 司空    431 亓官    432 司寇    433 子车    434 颛孙    435 端木    436 巫马    437 公西    438 漆雕    439 乐正    440 壤驷    441 公良    442 拓跋    443 夹谷    444 宰父    445 谷梁    446 段干    447 百里</td>
</tr>
<tr>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">64 戴   65 贾   66 韦   67 夏   68 邱   69 方   70 侯   71 邹   72 熊   73 孟   74 秦   75 白   76 江   77 阎   78 薛   79 尹   80 段   81 雷   82 黎   83 史   84 龙   85 陶   86 贺   87 顾   88 毛   89 郝   90 龚   91 邵   92 万   93 钱   94 严   95 赖   96 覃   97 洪   98 武   99 莫  100 孔  101 汤  102 向  103 常  104 温  105 康  106 施  107 文  108 牛  109 樊  110 葛  111 邢  112 安  113 齐  114 易  115 乔  116 伍  117 庞  118 颜  119 倪  120 庄  121 聂  122 章  123 鲁  124 岳  125 翟  126 殷  127 詹  192 古  193 吉  194 缪  195 简  196 车  197 项  198 连  199 芦  200 麦  201 褚  202 娄  203 窦  204 戚  205 岑  206 景  207 党  208 宫  209 费  210 卜  211 冷  212 晏  213 席  214 卫  215 米  216 柏  217 宗  218 瞿  219 桂  220 全  221 佟  222 应  223 臧  224 闵  225 苟  226 邬  227 边  228 卞  229 姬  230 师  231 和  232 仇  233 栾  234 隋  235 商  236 刁  237 沙  238 荣  239 巫  240 寇  241 桑  242 郎  243 甄  244 丛  245 仲  246 虞  247 敖  248 巩  249 明  250 佘  251 池  252 查  253 麻  254 苑  255 迟  320 初  321 门  322 雲  323 容  324 敬  325 来  326 扈  327 晁  328 芮  329 都  330 普  331 阙  332 浦  333 戈  334 伏  335 鹿  336 薄  337 邸  338 雍  339 辜  340 羊  341 阿  342 乌  343 母  344 裘  345 亓  346 修  347 邰  348 赫  349 杭  350 况  351 那  352 宿  353 鲜  354 印  355 逯  356 隆  357 茹  358 诸  359 战  360 慕  361 危  362 玉  363 银  364 亢  365 嵇  366 公  367 哈  368 湛  369 宾  370 戎  371 勾  372 茅  373 利  374 於  375 呼  376 居  377 揭  378 干  379 但  380 尉  381 冶  382 斯  383 元  448 东郭    449 南门    450 呼延    451 羊舌    452 微生    453 梁丘    454 左丘    455 东门    456 西门    457 南宫</td>
</tr>
<tr>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">128 申  129 欧  130 耿  131 关  132 兰  133 焦  134 俞  135 左  136 柳  137 甘  138 祝  139 包  140 宁  141 尚  142 符  143 舒  144 阮  145 柯  146 纪  147 梅  148 童  149 凌  150 毕  151 单  152 季  153 裴  154 霍  155 涂  156 成  157 苗  158 谷  159 盛  160 曲  161 翁  162 冉  163 骆  164 蓝  165 路  166 游  167 辛  168 靳  169 欧阳    170 管  171 柴  172 蒙  173 鲍  174 华  175 喻  176 祁  177 蒲  178 房  179 滕  180 屈  181 饶  182 解  183 牟  184 艾  185 尤  186 阳  187 时  188 穆  189 农  190 司  191 卓  192 古  193 吉  194 缪  195 简  196 车  197 项  198 连  199 芦  200 麦  201 褚  202 娄  203 窦  204 戚  205 岑  206 景  207 党  208 宫  209 费  210 卜  211 冷  212 晏  213 席  214 卫  215 米  216 柏  217 宗  218 瞿  219 桂  220 全  221 佟  222 应  223 臧  224 闵  225 苟  226 邬  227 边  228 卞  229 姬  230 师  231 和  232 仇  233 栾  234 隋  235 商  236 刁  237 沙  238 荣  239 巫  240 寇  241 桑  242 郎  243 甄  244 丛  245 仲  246 虞  247 敖  248 巩  249 明  250 佘  251 池  252 查  253 麻  254 苑  255 迟  384 束  385 檀  386 衣  387 信  388 展  389 阴  390 昝  391 智  392 幸  393 奉  394 植  395 衡  396 富  397 尧  398 闭  399 由  400 伊  401 万俟    402 司马    403 上官    404 夏侯    405 诸葛    406 东方    407 赫连    408 皇甫    409 尉迟    410 公羊    411 澹台    412 公冶    413 宗政    414 濮阳    415 淳于    416 单于    417 太叔    418 申屠    419 公孙    420 仲孙    421 轩辕    422 令狐    423 钟离    424 宇文    425 长孙    426 慕容    427 鲜于    428 闾丘    429 司徒    430 司空    431 亓官    432 司寇    433 子车    434 颛孙    435 端木    436 巫马    437 公西    438 漆雕    439 乐正    440 壤驷    441 公良    442 拓跋    443 夹谷    444 宰父    445 谷梁    446 段干    447 百里    448 东郭    449 南门    450 呼延    451 羊舌    452 微生    453 梁丘    454 左丘    455 东门    456 西门    457 南宫</td>
</tr>
<tr>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">256 邝  257 官  258 封  259 谈  260 匡  261 鞠  262 惠  263 荆  264 乐  265 冀  266 郁  267 胥  268 南  269 班  270 储  271 原  272 栗  273 燕  274 楚  275 鄢  276 劳  277 谌  278 奚  279 皮  280 粟  281 冼  282 蔺  283 楼  284 盘  285 满  286 闻  287 位  288 厉  289 仝  290 区  291 郜  292 海  293 阚  294 花  295 权  296 强  297 帅  298 屠  299 豆  300 朴  301 盖  302 练  303 廉  304 禹  305 井  306 祖  307 漆  308 巴  309 丰  310 支  311 卿  312 国  313 狄  314 平  315 计  316 索  317 宣  318 晋  319 相  320 初  321 门  322 雲  323 容  324 敬  325 来  326 扈  327 晁  328 芮  329 都  330 普  331 阙  332 浦  333 戈  334 伏  335 鹿  336 薄  337 邸  338 雍  339 辜  340 羊  341 阿  342 乌  343 母  344 裘  345 亓  346 修  347 邰  348 赫  349 杭  350 况  351 那  352 宿  353 鲜  354 印  355 逯  356 隆  357 茹  358 诸  359 战  360 慕  361 危  362 玉  363 银  364 亢  365 嵇  366 公  367 哈  368 湛  369 宾  370 戎  371 勾  372 茅  373 利  374 於  375 呼  376 居  377 揭  378 干  379 但  380 尉  381 冶  382 斯  383 元  384 束  385 檀  386 衣  387 信  388 展  389 阴  390 昝  391 智  392 幸  393 奉  394 植  395 衡  396 富  397 尧  398 闭  399 由  400 伊  401 万俟    402 司马    403 上官    404 夏侯    405 诸葛    406 东方    407 赫连    408 皇甫    409 尉迟    410 公羊    411 澹台    412 公冶    413 宗政    414 濮阳    415 淳于    416 单于    417 太叔    418 申屠    419 公孙    420 仲孙    421 轩辕    422 令狐    423 钟离    424 宇文    425 长孙    426 慕容    427 鲜于    428 闾丘    429 司徒    430 司空    431 亓官    432 司寇    433 子车    434 颛孙    435 端木    436 巫马    437 公西    438 漆雕    439 乐正    440 壤驷    441 公良    442 拓跋    443 夹谷    444 宰父    445 谷梁    446 段干    447 百里    448 东郭    449 南门    450 呼延    451 羊舌    452 微生    453 梁丘    454 左丘    455 东门    456 西门    457 南宫</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;猜姓氏一般的都是127个姓之内，以下代码中一共包括400多个姓氏，这个猜姓氏的算法就是将每个姓氏对应一个独一无二的2进制编码。然后按2进制数不同bit位置上是1的进行分组，这样每组开头的数分别是1，2，4，8，16，32，64，128和256，将姓氏出现的那个组的第1个数字加在一起，得到的编号就是对应的姓。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; com.google.common.collect.Lists;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.List;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LastNameGuessing&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; String[] LAST_NAMES = (&lt;span class=&quot;string&quot;&gt;&quot;王,李,张,刘,陈,杨,黄,吴,赵,周,徐,孙,马,朱,胡,林,郭,何,高,罗,郑,梁,&quot;&lt;/span&gt; +&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;谢,宋,唐,许,邓,冯,韩,曹,曾,彭,萧,蔡,潘,田,董,袁,于,余,叶,蒋,杜,苏,魏,程,吕,丁,沈,任,姚,卢,傅,钟,姜,&quot;&lt;/span&gt; +&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;崔,谭,廖,范,汪,陆,金,石,戴,贾,韦,夏,邱,方,侯,邹,熊,孟,秦,白,江,阎,薛,尹,段,雷,黎,史,龙,陶,贺,顾,毛,&quot;&lt;/span&gt; +&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;郝,龚,邵,万,钱,严,赖,覃,洪,武,莫,孔,汤,向,常,温,康,施,文,牛,樊,葛,邢,安,齐,易,乔,伍,庞,颜,倪,庄,聂,&quot;&lt;/span&gt; +&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;章,鲁,岳,翟,殷,詹,申,欧,耿,关,兰,焦,俞,左,柳,甘,祝,包,宁,尚,符,舒,阮,柯,纪,梅,童,凌,毕,单,季,裴,霍,&quot;&lt;/span&gt; +&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;涂,成,苗,谷,盛,曲,翁,冉,骆,蓝,路,游,辛,靳,欧阳,管,柴,蒙,鲍,华,喻,祁,蒲,房,滕,屈,饶,解,牟,艾,尤,阳,&quot;&lt;/span&gt; +&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;时,穆,农,司,卓,古,吉,缪,简,车,项,连,芦,麦,褚,娄,窦,戚,岑,景,党,宫,费,卜,冷,晏,席,卫,米,柏,宗,瞿,桂,&quot;&lt;/span&gt; +&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;全,佟,应,臧,闵,苟,邬,边,卞,姬,师,和,仇,栾,隋,商,刁,沙,荣,巫,寇,桑,郎,甄,丛,仲,虞,敖,巩,明,佘,池,查,&quot;&lt;/span&gt; +&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;麻,苑,迟,邝,官,封,谈,匡,鞠,惠,荆,乐,冀,郁,胥,南,班,储,原,栗,燕,楚,鄢,劳,谌,奚,皮,粟,冼,蔺,楼,盘,满,&quot;&lt;/span&gt; +&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;闻,位,厉,仝,区,郜,海,阚,花,权,强,帅,屠,豆,朴,盖,练,廉,禹,井,祖,漆,巴,丰,支,卿,国,狄,平,计,索,宣,晋,&quot;&lt;/span&gt; +&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;相,初,门,雲,容,敬,来,扈,晁,芮,都,普,阙,浦,戈,伏,鹿,薄,邸,雍,辜,羊,阿,乌,母,裘,亓,修,邰,赫,杭,况,那,&quot;&lt;/span&gt; +&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;宿,鲜,印,逯,隆,茹,诸,战,慕,危,玉,银,亢,嵇,公,哈,湛,宾,戎,勾,茅,利,於,呼,居,揭,干,但,尉,冶,斯,元,束,&quot;&lt;/span&gt; +&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;檀,衣,信,展,阴,昝,智,幸,奉,植,衡,富,尧,闭,由,伊,万俟,司马,上官,夏侯,诸葛,东方,赫连,皇甫,尉迟,公羊,&quot;&lt;/span&gt; +&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;澹台,公冶,宗政,濮阳,淳于,单于,太叔,申屠,公孙,仲孙,轩辕,令狐,钟离,宇文,长孙,慕容,鲜于,闾丘,司徒,司空,&quot;&lt;/span&gt; +&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;亓官,司寇,子车,颛孙,端木,巫马,公西,漆雕,乐正,壤驷,公良,拓跋,夹谷,宰父,谷梁,段干,百里,东郭,南门,呼延,&quot;&lt;/span&gt; +&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;羊舌,微生,梁丘,左丘,东门,西门,南宫&quot;&lt;/span&gt;).split(&lt;span class=&quot;string&quot;&gt;&quot;,&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; MAX = LAST_NAMES.length; &lt;span class=&quot;comment&quot;&gt;// 255 or 127，一般的就算127个姓&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; List&amp;lt;List&amp;lt;LastName&amp;gt;&amp;gt; GROUPS = init();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; base)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;) Math.ceil(Math.log(x) / Math.log(base));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; List&amp;lt;List&amp;lt;LastName&amp;gt;&amp;gt; init() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; size = log(MAX + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        List&amp;lt;LastName&amp;gt; data = getData();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        List&amp;lt;LastName&amp;gt; list = data.subList(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, MAX);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        List&amp;lt;List&amp;lt;LastName&amp;gt;&amp;gt; groups = Lists.newArrayList();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; size; i++) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            List&amp;lt;LastName&amp;gt; group = Lists.newArrayList();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            groups.add(group);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (LastName t : list) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; id = t.getId();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; b = (id &amp;gt;&amp;gt; i) &amp;amp; &lt;span class=&quot;number&quot;&gt;0x1&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 高位取０&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (b == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    group.add(t);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    String lastName = t.getLastName();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    System.out.printf(&lt;span class=&quot;string&quot;&gt;&quot;%3d\t%s\t&quot;&lt;/span&gt;, id, lastName);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; groups;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; List&amp;lt;LastName&amp;gt; &lt;span class=&quot;title&quot;&gt;getData&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; length = LAST_NAMES.length;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        List&amp;lt;LastName&amp;gt; lastNames = Lists.newArrayList();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; length; i++) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            String s = LAST_NAMES[i];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            LastName lastName = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LastName();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            lastName.setId(i + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            lastName.setLastName(s);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            lastNames.add(lastName);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; lastNames;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String q)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; size = log(MAX + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        String result = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; size; i++) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            List&amp;lt;LastName&amp;gt; group = GROUPS.get(i);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; found = &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (LastName g : group) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                String lastName = g.getLastName();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (lastName.equals(q)) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    found = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (found) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                result = &lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt; + result;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                result = &lt;span class=&quot;string&quot;&gt;&quot;0&quot;&lt;/span&gt; + result;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.printf(&lt;span class=&quot;string&quot;&gt;&quot;%-10s-&amp;gt;%4d:%s%n&quot;&lt;/span&gt;, result, Integer.parseInt(result, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;), q); &lt;span class=&quot;comment&quot;&gt;// 10000110 -&amp;gt; 134&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LastName&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; id;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String lastName;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; id;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setId&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; id)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.id = id;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;getLastName&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; lastName;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setLastName&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String lastName)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.lastName = lastName;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="java" scheme="https://www.4e00.com/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>linux performance tools</title>
    <link href="https://www.4e00.com/linux/2017/10/01/linux-performance-tools.html"/>
    <id>https://www.4e00.com/linux/2017/10/01/linux-performance-tools.html</id>
    <published>2017-10-01T12:42:46.000Z</published>
    <updated>2017-10-09T01:09:21.281Z</updated>
    
    <content type="html"><![CDATA[<img src="/blog/img/linux/tools/linux-perf-tools.png" title="[linux-perf-tools.png]">
<a id="more"></a>
<img src="/blog/img/linux/tools/linux-tuning-tools.png" title="[linux-tuning-tools.png]">
<img src="/blog/img/linux/tools/linux-static-tools.png" title="[linux-static-tools.png]">
<img src="/blog/img/linux/tools/linux-performance-observability-sar.png" title="[linux-performance-observability-sar.png]">
<img src="/blog/img/linux/tools/linux-perf-tools-2016.png" title="[linux-perf-tools-2016.png]">
<img src="/blog/img/linux/tools/linux-observability-tools.png" title="[linux-observability-tools.png]">
<img src="/blog/img/linux/tools/linux-benchmarking-tools.png" title="[linux-benchmarking-tools.png]">
<img src="/blog/img/linux/tools/linux-bcc-tracing-tools-2017.png" title="[linux-bcc-tracing-tools-2017.png]">
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol>
<li><a href="http://www.brendangregg.com/linuxperf.html" target="_blank" rel="external">Linux Performance</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/blog/img/linux/tools/linux-perf-tools.png&quot; title=&quot;[linux-perf-tools.png]&quot;&gt;
    
    </summary>
    
      <category term="linux" scheme="https://www.4e00.com/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Unix network programming charpter 6 - I/O Multiplexing</title>
    <link href="https://www.4e00.com/linux/2017/09/29/unix-network-programming-charpter-6-io-multiplexing.html"/>
    <id>https://www.4e00.com/linux/2017/09/29/unix-network-programming-charpter-6-io-multiplexing.html</id>
    <published>2017-09-29T11:27:23.000Z</published>
    <updated>2017-10-09T01:09:21.281Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Chapter-6-I-O-Multiplexing-The-select-and-poll-Functions"><a href="#Chapter-6-I-O-Multiplexing-The-select-and-poll-Functions" class="headerlink" title="Chapter 6. I/O Multiplexing: The select and poll Functions"></a>Chapter 6. I/O Multiplexing: The select and poll Functions</h2><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>When the TCP client is handling two inputs at the same time: standard input and a TCP socket, we encountered a problem when the client was blocked in a call to <code>fgets</code> (on standard input) and the server process was killed. The server TCP correctly sent a FIN to the client TCP, but since the client process was blocked reading from standard input, it never saw the EOF until it read from the socket (possibly much later).</p>
<p>We want to be notified if one or more I/O conditions are ready (i.e., input is ready to be read, or the descriptor is capable of taking more output). This capability is called I/O multiplexing and is provided by the <code>select</code> and <code>poll</code> functions, as well as a newer POSIX variation of the former, called <code>pselect</code>.</p>
<p>I/O multiplexing is typically used in networking applications in the following scenarios:</p>
<ul>
<li>When a client is handling multiple descriptors (normally interactive input and a network socket)</li>
<li>When a client to handle multiple sockets at the same time (this is possible, but rare)</li>
<li>If a TCP server handles both a listening socket and its connected sockets</li>
<li>If a server handles both TCP and UDP</li>
<li>If a server handles multiple services and perhaps multiple protocols</li>
</ul>
<p>I/O multiplexing is not limited to network programming. Many nontrivial applications find a need for these techniques.</p>
<h2 id="I-O-Models"><a href="#I-O-Models" class="headerlink" title="I/O Models"></a>I/O Models</h2><p>We first examine the basic differences in the five I/O models that are available to us under Unix:</p>
<ul>
<li>blocking I/O</li>
<li>nonblocking I/O</li>
<li>I/O multiplexing (<code>select</code> and <code>poll</code>)</li>
<li>signal driven I/O (<code>SIGIO</code>)</li>
<li>asynchronous I/O (the POSIX <code>aio_</code> functions)</li>
</ul>
<p>There are normally two distinct phases for an input operation:</p>
<ol>
<li>Waiting for the data to be ready. This involves waiting for data to arrive on the network. When the packet arrives, it is copied into a buffer within the kernel.</li>
<li>Copying the data from the kernel to the process. This means copying the (ready) data from the kernel&#39;s buffer into our application buffer</li>
</ol>
<a id="more"></a>
<h3 id="Blocking-I-O-Model"><a href="#Blocking-I-O-Model" class="headerlink" title="Blocking I/O Model"></a>Blocking I/O Model</h3><p>The most prevalent model for I/O is the blocking I/O model (which we have used for all our examples in the previous sections). By default, all sockets are blocking. The scenario is shown in the figure below:</p>
<h4 id="Figure-6-1-Blocking-I-O-model"><a href="#Figure-6-1-Blocking-I-O-model" class="headerlink" title="Figure 6.1. Blocking I/O model"></a>Figure 6.1. Blocking I/O model</h4><img src="/blog/img/linux/unp/figure-6.1.png" class="image-md" title="[Figure 6.1. Blocking I/O model.]">
<p>We use UDP for this example instead of TCP because with UDP, the concept of data being &quot;ready&quot; to read is simple: either an entire datagram has been received or it has not. With TCP it gets more complicated, as additional variables such as the socket&#39;s low-water mark come into play.</p>
<p>We also refer to <code>recvfrom</code> as a system call to differentiate between our application and the kernel, regardless of how <code>recvfrom</code> is implemented (system call on BSD and function that invokes <code>getmsg</code> system call on System V). There is normally a switch from running in the application to running in the kernel, followed at some time later by a return to the application.</p>
<p>In the figure above, the process calls <code>recvfrom</code> and the system call does not return until the datagram arrives and is copied into our application buffer, or an error occurs. The most common error is the system call being interrupted by a signal, as we described in <em>Section 5.9</em>. We say that the process is blocked the entire time from when it calls <code>recvfrom</code> until it returns. When <code>recvfrom</code> returns successfully, our application processes the datagram.</p>
<h3 id="Nonblocking-I-O-Model"><a href="#Nonblocking-I-O-Model" class="headerlink" title="Nonblocking I/O Model"></a>Nonblocking I/O Model</h3><p>When a socket is set to be nonblocking, we are telling the kernel &quot;when an I/O operation that I request cannot be completed without putting the process to sleep, do not put the process to sleep, but return an error instead&quot;. The figure is below:</p>
<h4 id="Figure-6-2-Nonblocking-I-O-model"><a href="#Figure-6-2-Nonblocking-I-O-model" class="headerlink" title="Figure 6.2. Nonblocking I/O model"></a>Figure 6.2. Nonblocking I/O model</h4><img src="/blog/img/linux/unp/figure-6.2.png" class="image-md" title="[Figure 6.2. Nonblocking I/O model.]">
<ul>
<li>For the first three <code>recvfrom</code>, there is no data to return and the kernel immediately returns an error of <code>EWOULDBLOCK</code>.</li>
<li>For the fourth time we call recvfrom, a datagram is ready, it is copied into our application buffer, and <code>recvfrom</code> returns successfully. We then process the data.</li>
</ul>
<p>When an application sits in a loop calling <code>recvfrom</code> on a nonblocking descriptor like this, it is called polling. The application is continually polling the kernel to see if some operation is ready. This is often a waste of CPU time, but this model is occasionally encountered, normally on systems dedicated to one function.</p>
<h3 id="I-O-Multiplexing-Model"><a href="#I-O-Multiplexing-Model" class="headerlink" title="I/O Multiplexing Model"></a>I/O Multiplexing Model</h3><p>With I/O multiplexing, we call <code>select</code> or <code>poll</code> and block in one of these two system calls, instead of blocking in the actual I/O system call. The figure is a summary of the I/O multiplexing model:</p>
<h4 id="Figure-6-3-I-O-multiplexing-model"><a href="#Figure-6-3-I-O-multiplexing-model" class="headerlink" title="Figure 6.3. I/O multiplexing model"></a>Figure 6.3. I/O multiplexing model</h4><img src="/blog/img/linux/unp/figure-6.3.png" class="image-md" title="[Figure 6.3. I/O multiplexing model.]">
<p>We block in a call to <code>select</code>, waiting for the datagram socket to be readable. When <code>select</code> returns that the socket is readable, we then call <code>recvfrom</code> to copy the datagram into our application buffer.</p>
<h4 id="Comparing-to-the-blocking-I-O-model"><a href="#Comparing-to-the-blocking-I-O-model" class="headerlink" title="Comparing to the blocking I/O model"></a>Comparing to the blocking I/O model</h4><p>Comparing Figure 6.3 to Figure 6.1:</p>
<ul>
<li>Disadvantage: using <code>select</code> requires two system calls (<code>select</code> and <code>recvfrom</code>) instead of one</li>
<li>Advantage: we can wait for more than one descriptor to be ready (see <a href="#select-Function">the select function</a> later in this chapter)</li>
</ul>
<h4 id="Multithreading-with-blocking-I-O"><a href="#Multithreading-with-blocking-I-O" class="headerlink" title="Multithreading with blocking I/O"></a>Multithreading with blocking I/O</h4><p>Another closely related I/O model is to use multithreading with blocking I/O. That model very closely resembles the model described above, except that instead of using <code>select</code> to block on multiple file descriptors, the program uses multiple threads (one per file descriptor), and each thread is then free to call blocking system calls like <code>recvfrom</code>.</p>
<h3 id="Signal-Driven-I-O-Model"><a href="#Signal-Driven-I-O-Model" class="headerlink" title="Signal-Driven I/O Model"></a>Signal-Driven I/O Model</h3><p>The signal-driven I/O model uses signals, telling the kernel to notify us with the <code>SIGIO</code> signal when the descriptor is ready. The figure is below:</p>
<h4 id="Figure-6-4-Signal-Driven-I-O-model"><a href="#Figure-6-4-Signal-Driven-I-O-model" class="headerlink" title="Figure 6.4. Signal-Driven I/O model"></a>Figure 6.4. Signal-Driven I/O model</h4><img src="/blog/img/linux/unp/figure-6.4.png" class="image-md" title="[Figure 6.4. Signal-Driven I/O model.]">
<ul>
<li>We first enable the socket for signal-driven I/O (<em>Section 25.2</em>) and install a signal handler using the <code>sigaction</code> system call. The return from this system call is immediate and our process continues; it is not blocked.</li>
<li>When the datagram is ready to be read, the <code>SIGIO</code> signal is generated for our process. We can either:<ul>
<li>read the datagram from the signal handler by calling <code>recvfrom</code> and then notify the main loop that the data is ready to be processed (<em>Section 25.3</em>)</li>
<li>notify the main loop and let it read the datagram.</li>
</ul>
</li>
</ul>
<p>The advantage to this model is that we are not blocked while waiting for the datagram to arrive. The main loop can continue executing and just wait to be notified by the signal handler that either the data is ready to process or the datagram is ready to be read.</p>
<h3 id="Asynchronous-I-O-Model"><a href="#Asynchronous-I-O-Model" class="headerlink" title="Asynchronous I/O Model"></a>Asynchronous I/O Model</h3><p>Asynchronous I/O is defined by the POSIX specification, and various differences in the <em>real-time</em> functions that appeared in the various standards which came together to form the current POSIX specification have been reconciled.</p>
<p>These functions work by telling the kernel to start the operation and to notify us when the entire operation (including the copy of the data from the kernel to our buffer) is complete. <u>The main difference between this model and the signal-driven I/O model is that with signal-driven I/O, the kernel tells us when an I/O operation can be initiated, but with asynchronous I/O, the kernel tells us when an I/O operation is complete.</u> See the figure below for example:</p>
<h4 id="Figure-6-5-Asynchronous-I-O-model"><a href="#Figure-6-5-Asynchronous-I-O-model" class="headerlink" title="Figure 6.5. Asynchronous I/O model"></a>Figure 6.5. Asynchronous I/O model</h4><img src="/blog/img/linux/unp/figure-6.5.png" class="image-md" title="[Figure 6.5. Asynchronous I/O model.]">
<ul>
<li><p>We call <code>aio_read</code> (the POSIX asynchronous I/O functions begin with <code>aio_</code> or <code>lio_</code>) and pass the kernel the following:</p>
<ul>
<li>descriptor, buffer pointer, buffer size (the same three arguments for <code>read</code>),</li>
<li>file offset (similar to <code>lseek</code>),</li>
<li><p>and how to notify us when the entire operation is complete.</p>
<p>This system call returns immediately and our process is not blocked while waiting for the I/O to complete.</p>
</li>
</ul>
</li>
<li><p>We assume in this example that we ask the kernel to generate some signal when the operation is complete. This signal is not generated until the data has been copied into our application buffer, which is different from the signal-driven I/O model.</p>
</li>
</ul>
<h3 id="Comparison-of-the-I-O-Models"><a href="#Comparison-of-the-I-O-Models" class="headerlink" title="Comparison of the I/O Models"></a>Comparison of the I/O Models</h3><p>The figure below is a comparison of the five different I/O models.</p>
<h4 id="Figure-6-6-Comparison-of-the-five-I-O-models"><a href="#Figure-6-6-Comparison-of-the-five-I-O-models" class="headerlink" title="Figure 6.6. Comparison of the five I/O models"></a>Figure 6.6. Comparison of the five I/O models</h4><img src="/blog/img/linux/unp/figure-6.6.png" class="image-lg" title="[Figure 6.6. Comparison of the five I/O models.]">
<p>The main difference between the first four models is the first phase, as the second phase in the first four models is the same: the process is blocked in a call to <code>recvfrom</code> while the data is copied from the kernel to the caller&#39;s buffer. Asynchronous I/O, however, handles both phases and is different from the first four.</p>
<h3 id="Synchronous-I-O-versus-Asynchronous-I-O"><a href="#Synchronous-I-O-versus-Asynchronous-I-O" class="headerlink" title="Synchronous I/O versus Asynchronous I/O"></a>Synchronous I/O versus Asynchronous I/O</h3><p>POSIX defines these two terms as follows:</p>
<ul>
<li>A synchronous I/O operation causes the requesting process to be blocked until that I/O operation completes.</li>
<li>An asynchronous I/O operation does not cause the requesting process to be blocked.</li>
</ul>
<p>Using these definitions, the first four I/O models (blocking, nonblocking, I/O multiplexing, and signal-driven I/O) are all synchronous because the actual I/O operation (<code>recvfrom</code>) blocks the process. Only the asynchronous I/O model matches the asynchronous I/O definition.</p>
<h2 id="select-Function"><a href="#select-Function" class="headerlink" title="select Function"></a>select Function</h2><p>The <code>select</code> function allows the process to instruct the kernel to either:</p>
<ul>
<li>Wait for any one of multiple events to occur and to wake up the process only when one or more of these events occurs, or</li>
<li>When a specified amount of time has passed.</li>
</ul>
<p>This means that we tell the kernel what descriptors we are interested in (for reading, writing, or an exception condition) and how long to wait. The descriptors in which we are interested are not restricted to sockets; any descriptor can be tested using <code>select</code>.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/select.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/time.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">select</span><span class="params">(<span class="keyword">int</span> maxfdp1, fd_set *readset, fd_set *writeset, fd_set *exceptset,</span></span></div><div class="line"><span class="function"><span class="params">           <span class="keyword">const</span> struct timeval *timeout)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">/* Returns: positive count of ready descriptors, 0 on timeout, –1 on error */</span></div></pre></td></tr></table></figure>
<h3 id="The-timeout-argument"><a href="#The-timeout-argument" class="headerlink" title="The timeout argument"></a>The <em>timeout</em> argument</h3><p>The <em>timeout</em> argument tells the kernel how long to wait for one of the specified descriptors to become ready. A <code>timeval</code> structure specifies the number of seconds and microseconds.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">timeval</span>  &#123;</span></div><div class="line">  <span class="keyword">long</span>   tv_sec;          <span class="comment">/* seconds */</span></div><div class="line">  <span class="keyword">long</span>   tv_usec;         <span class="comment">/* microseconds */</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>There are three possibilities for the <em>timeout</em>:</p>
<ol>
<li>Wait forever (<em>timeout</em> is specified as a null pointer). Return only when one of the specified descriptors is ready for I/O.</li>
<li>Wait up to a fixed amount of time (<em>timeout</em> points to a <code>timeval</code> structure). Return when one of the specified descriptors is ready for I/O, but do not wait beyond the number of seconds and microseconds specified in the <code>timeval</code> structure.</li>
<li>Do not wait at all (<em>timeout</em> points to a <code>timeval</code> structure and the timer value is 0, i.e. the number of seconds and microseconds specified by the structure are 0). Return immediately after checking the descriptors. This is called polling.</li>
</ol>
<p>Note:</p>
<ul>
<li>The wait in the first two scenarios is normally interrupted if the process catches a signal and returns from the signal handler. For portability, we must be prepared for <code>select</code> to return an error of <code>EINTR</code> if we are catching signals. Berkeley-derived kernels never automatically restart <code>select</code>.</li>
<li>Although the <code>timeval</code> structure has a microsecond field <code>tv_usec</code>, the actual resolution supported by the kernel is often more coarse. Many Unix kernels round the timeout value up to a multiple of 10 ms. There is also a scheduling latency involved, meaning it takes some time after the timer expires before the kernel schedules this process to run.</li>
<li>On some systems, the <code>timeval</code> structure can represent values that are not supported by <code>select</code>; it will fail with <code>EINVAL</code> if the <code>tv_sec</code> field in the timeout is over 100 million seconds.</li>
<li>The <code>const</code> qualifier on the <em>timeout</em> argument means it is not modified by <code>select</code> on return.</li>
</ul>
<h3 id="The-descriptor-sets-arguments"><a href="#The-descriptor-sets-arguments" class="headerlink" title="The descriptor sets arguments"></a>The descriptor sets arguments</h3><p>The three middle arguments, <em>readset</em>, <em>writeset</em>, and <em>exceptset</em>, specify the descriptors that we want the kernel to test for reading, writing, and exception conditions. There are only two exception conditions currently supported:</p>
<ul>
<li>The arrival of <a href="https://en.wikipedia.org/wiki/Out-of-band_data" target="_blank" rel="external">out-of-band data</a> for a socket.</li>
<li>The presence of control status information to be read from the master side of a pseudo-terminal that has been put into packet mode. (Not covered in UNP)</li>
</ul>
<p><code>select</code> uses descriptor sets, typically an array of integers, with each bit in each integer corresponding to a descriptor. For example, using 32-bit integers, the first element of the array corresponds to descriptors 0 through 31, the second element of the array corresponds to descriptors 32 through 63, and so on. All the implementation details are irrelevant to the application and are hidden in the <code>fd_set</code> datatype and the following four macros:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">FD_ZERO</span><span class="params">(fd_set *fdset)</span></span>;         <span class="comment">/* clear all bits in fdset */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">FD_SET</span><span class="params">(<span class="keyword">int</span> fd, fd_set *fdset)</span></span>;  <span class="comment">/* turn on the bit for fd in fdset */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">FD_CLR</span><span class="params">(<span class="keyword">int</span> fd, fd_set *fdset)</span></span>;  <span class="comment">/* turn off the bit for fd in fdset */</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">FD_ISSET</span><span class="params">(<span class="keyword">int</span> fd, fd_set *fdset)</span></span>; <span class="comment">/* is the bit for fd on in fdset ? */</span></div></pre></td></tr></table></figure>
<p>We allocate a descriptor set of the <code>fd_set</code> datatype, we set and test the bits in the set using these macros, and we can also assign it to another descriptor set across an equals sign (=) in C.</p>
<p>An array of integers using one bit per descriptor, is just one possible way to implement <code>select</code>. Nevertheless, it is common to refer to the individual descriptors within a descriptor set as bits, as in &quot;turn on the bit for the listening descriptor in the read set.&quot;</p>
<p>The following example defines a variable of type <code>fd_set</code> and then turn on the bits for descriptors 1, 4, and 5:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line">fd_set rset;</div><div class="line"></div><div class="line">FD_ZERO(&amp;rset);          <span class="comment">/* initialize the set: all bits off */</span></div><div class="line">FD_SET(<span class="number">1</span>, &amp;rset);        <span class="comment">/* turn on bit for fd 1 */</span></div><div class="line">FD_SET(<span class="number">4</span>, &amp;rset);        <span class="comment">/* turn on bit for fd 4 */</span></div><div class="line">FD_SET(<span class="number">5</span>, &amp;rset);        <span class="comment">/* turn on bit for fd 5 */</span></div></pre></td></tr></table></figure>
<p>It is important to initialize the set, since unpredictable results can occur if the set is allocated as an automatic variable and not initialized.</p>
<p>Any of the middle three arguments to <code>select</code>, <em>readset</em>, <em>writeset</em>, or <em>exceptset</em>, can be specified as a null pointer if we are not interested in that condition. Indeed, if all three pointers are null, then we have a higher precision timer than the normal Unix <code>sleep</code> function. The <code>poll</code> function provides similar functionality.</p>
<h3 id="The-maxfdp1-argument"><a href="#The-maxfdp1-argument" class="headerlink" title="The maxfdp1 argument"></a>The <em>maxfdp1</em> argument</h3><p>The <em>maxfdp1</em> argument specifies the number of descriptors to be tested. Its value is the maximum descriptor to be tested plus one. The descriptors 0, 1, 2, up through and including <em>maxfdp1</em>–1 are tested.</p>
<p>The constant <code>FD_SETSIZE</code>, defined by including <code>&lt;sys/select.h&gt;</code>, is the number of descriptors in the <code>fd_set</code> datatype. Its value is often 1024, but few programs use that many descriptors.</p>
<p>The reason the <em>maxfdp1</em> argument exists, along with the burden of calculating its value, is for efficiency. Although each <code>fd_set</code> has room for many descriptors, typically 1,024, this is much more than the number used by a typical process. The kernel gains efficiency by not copying unneeded portions of the descriptor set between the process and the kernel, and by not testing bits that are always 0.</p>
<h3 id="readset-writeset-and-exceptset-as-value-result-arguments"><a href="#readset-writeset-and-exceptset-as-value-result-arguments" class="headerlink" title="readset, writeset, and exceptset as value-result arguments"></a><em>readset</em>, <em>writeset</em>, and <em>exceptset</em> as value-result arguments</h3><p><code>select</code> modifies the descriptor sets pointed to by the <em>readset</em>, <em>writeset</em>, and <em>exceptset</em> pointers. These three arguments are value-result arguments. When we call the function, we specify the values of the descriptors that we are interested in, and on return, the result indicates which descriptors are ready. We use the <code>FD_ISSET</code> macro on return to test a specific descriptor in an <code>fd_set</code> structure. Any descriptor that is not ready on return will have its corresponding bit cleared in the descriptor set. To handle this, we turn on all the bits in which we are interested in all the descriptor sets each time we call select.</p>
<h3 id="Return-value-of-select"><a href="#Return-value-of-select" class="headerlink" title="Return value of select"></a>Return value of select</h3><p>The return value from this function indicates the total number of bits that are ready across all the descriptor sets. If the timer value expires before any of the descriptors are ready, a value of 0 is returned. A return value of –1 indicates an error (which can happen, for example, if the function is interrupted by a caught signal).</p>
<h3 id="Conditions-for-a-Ready-Descriptor"><a href="#Conditions-for-a-Ready-Descriptor" class="headerlink" title="Conditions for a Ready Descriptor"></a>Conditions for a Ready Descriptor</h3><p>Previous sections discusses waiting for a descriptor to become ready for I/O (reading or writing) or to have an exception condition pending on it (out-of-band data). The following discussion are specific about the conditions that cause select to return &quot;ready&quot; for sockets</p>
<ol>
<li>A socket is ready for reading if any of the following four conditions is true:<ul>
<li>The number of bytes of data in the socket receive buffer is greater than or equal to the current size of the low-water mark for the socket receive buffer. A read operation on the socket will not block and will return a value greater than 0 (i.e., the data that is ready to be read). We can set this low-water mark using the <code>SO_RCVLOWAT</code> socket option. It defaults to 1 for TCP and UDP sockets.</li>
<li>The read half of the connection is closed (i.e., a TCP connection that has received a FIN). A read operation on the socket will not block and will return 0 (i.e., EOF).</li>
<li>The socket is a listening socket and the number of completed connections is nonzero.</li>
<li>A socket error is pending. A read operation on the socket will not block and will return an error (–1) with <code>errno</code> set to the specific error condition. These pending errors can also be fetched and cleared by calling <code>getsockopt</code> and specifying the <code>SO_ERROR</code> socket option.</li>
</ul>
</li>
<li>A socket is ready for writing if any of the following four conditions is true:<ul>
<li>The number of bytes of available space in the socket send buffer is greater than or equal to the current size of the low-water mark for the socket send buffer and either: (i) the socket is connected, or (ii) the socket does not require a connection (e.g., UDP). This means that if we set the socket to nonblocking (<em>Chapter 16</em>), a write operation will not block and will return a positive value (e.g., the number of bytes accepted by the transport layer). We can set this low-water mark using the <code>SO_SNDLOWAT</code> socket option. This low-water mark normally defaults to 2048 for TCP and UDP sockets.</li>
<li>The write half of the connection is closed. A write operation on the socket will generate <code>SIGPIPE</code> (<em>Section 5.12</em>).</li>
<li>A socket using a non-blocking connect has completed the connection, or the connect has failed.</li>
<li>A socket error is pending. A write operation on the socket will not block and will return an error (–1) with <code>errno</code> set to the specific error condition. These pending errors can also be fetched and cleared by calling getsockopt with the <code>SO_ERROR</code> socket option.</li>
</ul>
</li>
<li>A socket has an exception condition pending if there is out-of-band data for the socket or the socket is still at the out-of-band mark (<em>Chapter 24</em>).</li>
</ol>
<blockquote>
<p>When an error occurs on a socket, it is marked as both readable and writable by select.</p>
</blockquote>
<p>The purpose of the receive and send low-water marks is to give the application control over how much data must be available for reading or how much space must be available for writing before select returns a readable or writable status. For example, if we know that our application has nothing productive to do unless at least 64 bytes of data are present, we can set the receive low-water mark to 64 to prevent select from waking us up if less than 64 bytes are ready for reading.</p>
<p>As long as the send low-water mark for a UDP socket is less than the send buffer size (which should always be the default relationship), the UDP socket is always writable, since a connection is not required.</p>
<p>The following table is the summary of conditions that cause a socket to be ready for select.</p>
<table>    <thead>        <tr>            <th class="text-center">Condition</th>            <th class="text-center column-2">Readable?</th>            <th class="text-center column-2">Writable?</th>            <th class="text-center column-2">Exception</th>        </tr>    </thead>    <tbody>        <tr>            <td class="text-right">Data to read</td>            <td class="text-center">Y</td>            <td class="text-left"></td>            <td class="text-left"></td>        </tr>        <tr>            <td class="text-right">Read half of the connection closed</td>            <td class="text-center">Y</td>            <td class="text-left"></td>            <td class="text-left"></td>        </tr>        <tr>            <td class="text-right">New connection ready for listening socket</td>            <td class="text-center">Y</td>            <td class="text-left"></td>            <td class="text-left"></td>        </tr>        <tr>            <td class="text-right">Space available for writing</td>            <td class="text-left"></td>            <td class="text-center">Y</td>            <td class="text-left"></td>        </tr>        <tr>            <td class="text-right">Write half of the connection closed</td>            <td class="text-left"></td>            <td class="text-center">Y</td>            <td class="text-left"></td>        </tr>        <tr>            <td class="text-right">Pending error</td>            <td class="text-center">Y</td>            <td class="text-center">Y</td>            <td class="text-left"></td>        </tr>        <tr>            <td class="text-right">TCP out-of-band data</td>            <td class="text-left"></td>            <td class="text-left"></td>            <td class="text-center">Y</td>        </tr>    </tbody></table>

<h3 id="Maximum-Number-of-Descriptors-for-select"><a href="#Maximum-Number-of-Descriptors-for-select" class="headerlink" title="Maximum Number of Descriptors for select"></a>Maximum Number of Descriptors for select</h3><p>Most applications do not use lots of descriptors. It is rare to find an application that uses hundreds of descriptors, but such applications do exist, and they often use <code>select</code> to multiplex the descriptors.</p>
<p>When <code>select</code> was originally designed, the OS normally had an upper limit on the maximum number of descriptors per process (the 4.2BSD limit was 31), and select just used this same limit. But, current versions of Unix allow for a virtually unlimited number of descriptors per process (often limited only by the amount of memory and any administrative limits), which affects <code>select</code>.</p>
<p>Many implementations have declarations similar to the following, which are taken from the 4.4BSD <code>&lt;sys/types.h&gt;</code> header:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> * Select uses bitmasks of file descriptors in longs. These macros</span></div><div class="line"><span class="comment"> * manipulate such bit fields (the filesystem macros use chars).</span></div><div class="line"><span class="comment"> * FD_SETSIZE may be defined by the user, but the default here should</span></div><div class="line"><span class="comment"> * be enough for most uses.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> FD_SETSIZE</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FD_SETSIZE      256</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure>
<p>This makes us think that we can just <code>#define FD_SETSIZE</code> to some larger value before including this header to increase the size of the descriptor sets used by <code>select</code>. Unfortunately, this normally does not work. The three descriptor sets are declared within the kernel and also uses the kernel&#39;s definition of <code>FD_SETSIZE</code> as the upper limit. The only way to increase the size of the descriptor sets is to increase the value of <code>FD_SETSIZE</code> and then recompile the kernel. Changing the value without recompiling the kernel is inadequate.</p>
<p>Some vendors are changing their implementation of select to allow the process to define <code>FD_SETSIZE</code> to a larger value than the default. BSD/OS has changed the kernel implementation to allow larger descriptor sets, and it also provides four new <code>FD_</code><em>xxx</em> macros to dynamically allocate and manipulate these larger sets. From a portability standpoint, however, beware of using large descriptor sets.</p>
<h2 id="str-cli-Function-Revisited"><a href="#str-cli-Function-Revisited" class="headerlink" title="str_cli Function (Revisited)"></a>str_cli Function (Revisited)</h2><p>The problem with earlier version of the <code>str_cli</code> (<em>Section 5.5</em>) was that we could be blocked in the call to <code>fgets</code> when something happened on the socket. We can now rewrite our <code>str_cli</code> function using <code>select</code> so that:</p>
<ul>
<li>The client process is notified as soon as the server process terminates.</li>
<li>The client process blocks in a call to <code>select</code> waiting for either standard input or the socket to be readable.</li>
</ul>
<p>The figure below shows the various conditions that are handled by our call to <code>select</code>:</p>
<h3 id="Figure-6-8-Conditions-handled-by-select-in-str-cli"><a href="#Figure-6-8-Conditions-handled-by-select-in-str-cli" class="headerlink" title="Figure 6.8. Conditions handled by select in str_cli"></a>Figure 6.8. Conditions handled by select in str_cli</h3><img src="/blog/img/linux/unp/figure-6.8.png" class="image-md" title="[Figure 6.8. Conditions handled by select in str_cli.]">
<p>Three conditions are handled with the socket:</p>
<ol>
<li>If the peer TCP sends data, the socket becomes readable and <code>read</code> returns greater than 0 (the number of bytes of data).</li>
<li>If the peer TCP sends a FIN (the peer process terminates), the socket becomes readable and read returns 0 (EOF).</li>
<li>If the peer TCP sends an RST (the peer host has crashed and rebooted), the socket becomes readable, read returns –1, and <code>errno</code> contains the specific error code.</li>
</ol>
<p>Below is the source code for this new version.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span>    <span class="meta-string">"unp.h"</span></span></div><div class="line"></div><div class="line"><span class="keyword">void</span></div><div class="line">str_cli(FILE *fp, <span class="keyword">int</span> sockfd)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span>         maxfdp1;</div><div class="line">    fd_set      rset;</div><div class="line">    <span class="keyword">char</span>        sendline[MAXLINE], recvline[MAXLINE];</div><div class="line"></div><div class="line">    FD_ZERO(&amp;rset);</div><div class="line">    <span class="keyword">for</span> ( ; ; ) &#123;</div><div class="line">        FD_SET(fileno(fp), &amp;rset);</div><div class="line">        FD_SET(sockfd, &amp;rset);</div><div class="line">        maxfdp1 = max(fileno(fp), sockfd) + <span class="number">1</span>;</div><div class="line">        Select(maxfdp1, &amp;rset, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (FD_ISSET(sockfd, &amp;rset)) &#123;  <span class="comment">/* socket is readable */</span></div><div class="line">            <span class="keyword">if</span> (Readline(sockfd, recvline, MAXLINE) == <span class="number">0</span>)</div><div class="line">                err_quit(<span class="string">"str_cli: server terminated prematurely"</span>);</div><div class="line">            Fputs(recvline, <span class="built_in">stdout</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (FD_ISSET(fileno(fp), &amp;rset)) &#123;  <span class="comment">/* input is readable */</span></div><div class="line">            <span class="keyword">if</span> (Fgets(sendline, MAXLINE, fp) == <span class="literal">NULL</span>)</div><div class="line">                <span class="keyword">return</span>;     <span class="comment">/* all done */</span></div><div class="line">            Writen(sockfd, sendline, <span class="built_in">strlen</span>(sendline));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>This code does the following:</p>
<ul>
<li>Call <code>select</code>.<ul>
<li>We only need one descriptor set (<code>rset</code>) to check for readability. This set is initialized by <code>FD_ZERO</code> and then two bits are turned on using <code>FD_SET</code>: the bit corresponding to the standard I/O file pointer, <code>fp</code>, and the bit corresponding to the socket, <code>sockfd</code>. The function <code>fileno</code> converts a standard I/O file pointer into its corresponding descriptor, since <code>select</code> (and <code>poll</code>) work only with descriptors.</li>
<li><code>select</code> is called after calculating the maximum of the two descriptors. In the call, the write-set pointer and the exception-set pointer are both null pointers. The final argument (the time limit) is also a null pointer since we want the call to block until something is ready.</li>
</ul>
</li>
<li>Handle readable socket. On return from select, if the socket is readable, the echoed line is read with <code>readline</code> and output by <code>fputs</code>.</li>
<li>Handle readable input. If the standard input is readable, a line is read by <code>fgets</code> and written to the socket using <code>writen</code>.</li>
</ul>
<p>Instead of the function flow being driven by the call to <code>fgets</code>, it is now driven by the call to <code>select</code>.</p>
<h3 id="Batch-Input-and-Buffering"><a href="#Batch-Input-and-Buffering" class="headerlink" title="Batch Input and Buffering"></a>Batch Input and Buffering</h3><p>Unfortunately, our <code>str_cli</code> function is still not correct. Our original version in <em>Section 5.5</em> operates in a stop-and-wait mode, which is fine for interactive use: It sends a line to the server and then waits for the reply. This amount of time is one RTT plus the server&#39;s processing time (which is close to 0 for a simple echo server). We can therefore estimate how long it will take for a given number of lines to be echoed if we know the RTT between the client and server. We can use <code>ping</code> to measure RTTs.</p>
<h3 id="Stop-and-wait-mode"><a href="#Stop-and-wait-mode" class="headerlink" title="Stop-and-wait mode"></a>Stop-and-wait mode</h3><p>If we consider the network between the client and server as a full-duplex pipe, with requests going from the client to the server and replies in the reverse direction, then the following figure shows our stop-and-wait mode:</p>
<h4 id="Figure-6-10-Time-line-of-stop-and-wait-mode-interactive-input"><a href="#Figure-6-10-Time-line-of-stop-and-wait-mode-interactive-input" class="headerlink" title="Figure 6.10. Time line of stop-and-wait mode: interactive input"></a>Figure 6.10. Time line of stop-and-wait mode: interactive input</h4><img src="/blog/img/linux/unp/figure_6.10.png" title="[Figure 6.10. Time line of stop-and-wait mode: interactive input.]">
<p>Note that this figure:</p>
<ul>
<li>Assumes that there is no server processing time and that the size of the request is the same as the reply</li>
<li>Shows show only the data packets, ignoring the TCP acknowledgments that are also going across the network</li>
</ul>
<p>A request is sent by the client at time 0 and we assume an RTT of 8 units of time. The reply sent at time 4 is received at time 7.</p>
<p>This stop-and-wait mode is fine for interactive input. The problem is: if we run our client in a batch mode, when we redirect the input and output, however, the resulting output file is always smaller than the input file (and they should be identical for an echo server).</p>
<h3 id="Batch-mode"><a href="#Batch-mode" class="headerlink" title="Batch mode"></a>Batch mode</h3><p>To see what&#39;s happening, realize that in a batch mode, we can keep sending requests as fast as the network can accept them. The server processes them and sends back the replies at the same rate. This leads to the full pipe at time 7, as shown below:</p>
<h4 id="Figure-6-11-Filling-the-pipe-between-the-client-and-server-batch-mode"><a href="#Figure-6-11-Filling-the-pipe-between-the-client-and-server-batch-mode" class="headerlink" title="Figure 6.11. Filling the pipe between the client and server: batch mode"></a>Figure 6.11. Filling the pipe between the client and server: batch mode</h4><img src="/blog/img/linux/unp/figure_6.11.png" title="[Figure 6.11. Filling the pipe between the client and server: batch mode.]">
<p>We assume:</p>
<ul>
<li>After sending the first request, we immediately send another, and then another</li>
<li>We can keep sending requests as fast as the network can accept them, along with processing replies as fast as the network supplies them.</li>
</ul>
<p>Assume that the input file contains only nine lines. The last line is sent at time 8, as shown in the above figure. But we cannot close the connection after writing this request because there are still other requests and replies in the pipe. The cause of the problem is our handling of an EOF on input: The function returns to the <code>main</code> function, which then terminates. But <u>in a batch mode, an EOF on input does not imply that we have finished reading from the socket; there might still be requests on the way to the server, or replies on the way back from the server.</u></p>
<p>The solution is to close one-half of the TCP connection by sending a FIN to the server, telling it we have finished sending data, but leave the socket descriptor open for reading. This is done with the <code>shutdown</code> function, described in the next section.</p>
<h2 id="shutdown-Function"><a href="#shutdown-Function" class="headerlink" title="shutdown Function"></a>shutdown Function</h2><p>The normal way to terminate a network connection is to call the <code>close</code> function. But, there are two limitations with <code>close</code> that can be avoided with <code>shutdown</code>:</p>
<ol>
<li><code>close</code> decrements the descriptor&#39;s reference count and closes the socket only if the count reaches 0 (<em>Section 4.8</em>). With <code>shutdown</code>, we can initiate TCP&#39;s normal connection termination sequence (the four segments beginning with a FIN in <em>Figure 2.5</em>), regardless of the reference count.</li>
<li><code>close</code> terminates both directions of data transfer, reading and writing. Since a TCP connection is full-duplex, there are times when we want to tell the other end that we have finished sending, even though that end might have more data to send us. This is the scenario we encountered in the previous section with batch input to our <code>str_cli</code> function. The figure below shows the typical function calls in this scenario.</li>
</ol>
<h3 id="Figure-6-12-Calling-shutdown-to-close-half-of-a-TCP-connection"><a href="#Figure-6-12-Calling-shutdown-to-close-half-of-a-TCP-connection" class="headerlink" title="Figure 6.12. Calling shutdown to close half of a TCP connection"></a>Figure 6.12. Calling shutdown to close half of a TCP connection</h3><img src="/blog/img/linux/unp/figure-6.12.png" class="image-md" title="[Figure 6.12. Calling shutdown to close half of a TCP connection.]">
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">shutdown</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">int</span> howto)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">/* Returns: 0 if OK, –1 on error */</span></div></pre></td></tr></table></figure>
<p>The action of the function depends on the value of the <em>howto</em> argument:</p>
<ul>
<li><code>SHUT_RD</code>: The read half of the connection is closed. No more data can be received on the socket and any data currently in the socket receive buffer is discarded. The process can no longer issue any of the read functions on the socket. Any data received after this call for a TCP socket is acknowledged and then silently discarded.</li>
<li><code>SHUT_WR</code>: The write half of the connection is closed. In the case of TCP, this is called a half-close. Any data currently in the socket send buffer will be sent, followed by TCP&#39;s normal connection termination sequence. As we mentioned earlier, this closing of the write half is done regardless of whether or not the socket descriptor&#39;s reference count is currently greater than 0. The process can no longer issue any of the write functions on the socket.</li>
<li><code>SHUT_RDWR</code>: The read half and the write half of the connection are both closed. This is equivalent to calling <code>shutdown</code> twice: first with <code>SHUT_RD</code> and then with <code>SHUT_WR</code>.</li>
</ul>
<p>The three <code>SHUT_</code><em>xxx</em> names are defined by the POSIX specification. Typical values for the howto argument that you will encounter will be 0 (close the read half), 1 (close the write half), and 2 (close the read half and the write half).</p>
<h3 id="Before-first-client-has-established-a-connection"><a href="#Before-first-client-has-established-a-connection" class="headerlink" title="Before first client has established a connection"></a>Before first client has established a connection</h3><p>Before the first client has established a connection, the server has a single listening descriptor.</p>
<ul>
<li>The server maintains only a read descriptor set (<em>rset</em>), shown in the following figure. Assuming the server is started in the foreground, descriptors 0, 1, and 2 are set to standard input, output, and error, so the first available descriptor for the listening socket is 3.</li>
<li>We also show an array of integers named <code>client</code> that contains the connected socket descriptor for each client. All elements in this array are initialized to –1.</li>
</ul>
<h4 id="Figure-6-15-Data-structures-for-TCP-server-with-just-a-listening-socket"><a href="#Figure-6-15-Data-structures-for-TCP-server-with-just-a-listening-socket" class="headerlink" title="Figure 6.15. Data structures for TCP server with just a listening socket"></a>Figure 6.15. Data structures for TCP server with just a listening socket</h4><img src="/blog/img/linux/unp/figure-6.15.png" class="image-md" title="[Figure 6.15. Data structures for TCP server with just a listening socket.]">
<p>The only nonzero entry in the descriptor set is the entry for the listening sockets and the first argument to <code>select</code> will be 4.</p>
<h3 id="After-first-client-establishes-connection"><a href="#After-first-client-establishes-connection" class="headerlink" title="After first client establishes connection"></a>After first client establishes connection</h3><p>When the first client establishes a connection with our server, the listening descriptor becomes readable and our server calls <code>accept</code>. The new connected descriptor returned by accept will be 4. The following figure shows this connection:</p>
<h4 id="Figure-6-16-TCP-server-after-first-client-establishes-connection"><a href="#Figure-6-16-TCP-server-after-first-client-establishes-connection" class="headerlink" title="Figure 6.16. TCP server after first client establishes connection"></a>Figure 6.16. TCP server after first client establishes connection</h4><img src="/blog/img/linux/unp/figure_6.16.png" title="[Figure 6.16. TCP server after first client establishes connection.]">
<p>The server must remember the new connected socket in its <code>client</code> array, and the connected socket must be added to the descriptor set. The updated data structures are shown in the figure below:</p>
<h4 id="Figure-6-17-Data-structures-after-first-client-connection-is-established"><a href="#Figure-6-17-Data-structures-after-first-client-connection-is-established" class="headerlink" title="Figure 6.17. Data structures after first client connection is established"></a>Figure 6.17. Data structures after first client connection is established</h4><img src="/blog/img/linux/unp/figure-6.17.png" class="image-md" title="[Figure 6.17. Data structures after first client connection is established.]">
<h3 id="After-second-client-connection-is-established"><a href="#After-second-client-connection-is-established" class="headerlink" title="After second client connection is established"></a>After second client connection is established</h3><p>Sometime later a second client establishes a connection and we have the scenario shown below:</p>
<h4 id="Figure-6-18-TCP-server-after-second-client-connection-is-established"><a href="#Figure-6-18-TCP-server-after-second-client-connection-is-established" class="headerlink" title="Figure 6.18. TCP server after second client connection is established"></a>Figure 6.18. TCP server after second client connection is established</h4><img src="/blog/img/linux/unp/figure_6.18.png" title="[Figure 6.18. TCP server after second client connection is established.]">
<p>The new connected socket (which we assume is 5) must be remembered, giving the data structures shown below:</p>
<h4 id="Figure-6-19-Data-structures-after-second-client-connection-is-established"><a href="#Figure-6-19-Data-structures-after-second-client-connection-is-established" class="headerlink" title="Figure 6.19. Data structures after second client connection is established"></a>Figure 6.19. Data structures after second client connection is established</h4><img src="/blog/img/linux/unp/figure-6.19.png" class="image-md" title="[Figure 6.19. Data structures after second client connection is established.]">
<h3 id="After-first-client-terminates-its-connection"><a href="#After-first-client-terminates-its-connection" class="headerlink" title="After first client terminates its connection"></a>After first client terminates its connection</h3><p>Next, we assume the first client terminates its connection. The client TCP sends a FIN, which makes descriptor 4 in the server readable. When our server reads this connected socket, <code>read</code> returns 0. We then close this socket and update our data structures accordingly. The value of <code>client[0]</code> is set to –1 and descriptor 4 in the descriptor set is set to 0. This is shown in the figure below. Notice that the value of <code>maxfd</code> does not change.</p>
<h4 id="Figure-6-20-Data-structures-after-first-client-terminates-its-connection"><a href="#Figure-6-20-Data-structures-after-first-client-terminates-its-connection" class="headerlink" title="Figure 6.20. Data structures after first client terminates its connection"></a>Figure 6.20. Data structures after first client terminates its connection</h4><img src="/blog/img/linux/unp/figure-6.20.png" class="image-md" title="[Figure 6.20. Data structures after first client terminates its connection.]">
<h3 id="Summary-of-TCP-echo-server"><a href="#Summary-of-TCP-echo-server" class="headerlink" title="Summary of TCP echo server"></a>Summary of TCP echo server</h3><ul>
<li>As clients arrive, we record their connected socket descriptor in the first available entry in the client array (the first entry with a value of –1) and also add the connected socket to the read descriptor set.</li>
<li>The variable <code>maxi</code> is the highest index in the client array that is currently in use and the variable <code>maxfd</code> (plus one) is the current value of the first argument to select.</li>
<li>The only limit on the number of clients that this server can handle is the minimum of the two values <code>FD_SETSIZE</code> and the maximum number of descriptors allowed for this process by the kernel (<a href="#Maximum-Number-of-Descriptors-for-select">Section 6.3</a>).</li>
</ul>
<h3 id="Denial-of-Service-Attacks"><a href="#Denial-of-Service-Attacks" class="headerlink" title="Denial-of-Service Attacks"></a>Denial-of-Service Attacks</h3><p>There is a problem with the server in the above example. If a malicious client connects to the server, sends one byte of data (other than a newline), and then goes to sleep. The server will call <code>read</code>, which will read the single byte of data from the client and then block in the next call to <code>read</code>, waiting for more data from this client. The server is then blocked (&quot;hung&quot;) by this one client and will not service any other clients, until the malicious client either sends a newline or terminates.</p>
<p>The basic concept here is that when a server is handling multiple clients, the server can never block in a function call related to a single client. Doing so can hang the server and deny service to all other clients. This is called a denial-of-service attack, which prevents the server from servicing other legitimate clients.</p>
<p>Possible solutions are:</p>
<ul>
<li>Use nonblocking I/O (<em>Chapter 16</em>))</li>
<li>Have each client serviced by a separate thread of control (either spawn a process or a thread to service each client)</li>
<li>Place a timeout on the I/O operations</li>
</ul>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li>Unix Network Programming, Volume 1: The Sockets Networking API (3rd Edition)</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Chapter-6-I-O-Multiplexing-The-select-and-poll-Functions&quot;&gt;&lt;a href=&quot;#Chapter-6-I-O-Multiplexing-The-select-and-poll-Functions&quot; class=&quot;headerlink&quot; title=&quot;Chapter 6. I/O Multiplexing: The select and poll Functions&quot;&gt;&lt;/a&gt;Chapter 6. I/O Multiplexing: The select and poll Functions&lt;/h2&gt;&lt;h3 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h3&gt;&lt;p&gt;When the TCP client is handling two inputs at the same time: standard input and a TCP socket, we encountered a problem when the client was blocked in a call to &lt;code&gt;fgets&lt;/code&gt; (on standard input) and the server process was killed. The server TCP correctly sent a FIN to the client TCP, but since the client process was blocked reading from standard input, it never saw the EOF until it read from the socket (possibly much later).&lt;/p&gt;
&lt;p&gt;We want to be notified if one or more I/O conditions are ready (i.e., input is ready to be read, or the descriptor is capable of taking more output). This capability is called I/O multiplexing and is provided by the &lt;code&gt;select&lt;/code&gt; and &lt;code&gt;poll&lt;/code&gt; functions, as well as a newer POSIX variation of the former, called &lt;code&gt;pselect&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I/O multiplexing is typically used in networking applications in the following scenarios:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When a client is handling multiple descriptors (normally interactive input and a network socket)&lt;/li&gt;
&lt;li&gt;When a client to handle multiple sockets at the same time (this is possible, but rare)&lt;/li&gt;
&lt;li&gt;If a TCP server handles both a listening socket and its connected sockets&lt;/li&gt;
&lt;li&gt;If a server handles both TCP and UDP&lt;/li&gt;
&lt;li&gt;If a server handles multiple services and perhaps multiple protocols&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I/O multiplexing is not limited to network programming. Many nontrivial applications find a need for these techniques.&lt;/p&gt;
&lt;h2 id=&quot;I-O-Models&quot;&gt;&lt;a href=&quot;#I-O-Models&quot; class=&quot;headerlink&quot; title=&quot;I/O Models&quot;&gt;&lt;/a&gt;I/O Models&lt;/h2&gt;&lt;p&gt;We first examine the basic differences in the five I/O models that are available to us under Unix:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;blocking I/O&lt;/li&gt;
&lt;li&gt;nonblocking I/O&lt;/li&gt;
&lt;li&gt;I/O multiplexing (&lt;code&gt;select&lt;/code&gt; and &lt;code&gt;poll&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;signal driven I/O (&lt;code&gt;SIGIO&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;asynchronous I/O (the POSIX &lt;code&gt;aio_&lt;/code&gt; functions)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are normally two distinct phases for an input operation:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Waiting for the data to be ready. This involves waiting for data to arrive on the network. When the packet arrives, it is copied into a buffer within the kernel.&lt;/li&gt;
&lt;li&gt;Copying the data from the kernel to the process. This means copying the (ready) data from the kernel&amp;#39;s buffer into our application buffer&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="linux" scheme="https://www.4e00.com/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>GoF - relationships of 23 design patterns</title>
    <link href="https://www.4e00.com/java/2017/09/23/GoF-relationships-of-23-design-patterns.html"/>
    <id>https://www.4e00.com/java/2017/09/23/GoF-relationships-of-23-design-patterns.html</id>
    <published>2017-09-23T14:11:27.000Z</published>
    <updated>2017-10-16T01:54:04.726Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设计模式关系图"><a href="#设计模式关系图" class="headerlink" title="设计模式关系图"></a>设计模式关系图</h2><img src="/blog/img/java/design-patterns/gof-23-design-patterns.png" class="image-lg" title="[design-patters-relationships.png]">
<a id="more"></a>
<h2 id="设计模式中设计的可变方面"><a href="#设计模式中设计的可变方面" class="headerlink" title="设计模式中设计的可变方面"></a>设计模式中设计的可变方面</h2><table>    <thead>        <tr>            <th class="column-2">目的</th>            <th class="column-2">模式描述</th>            <th class="column-3">设计模式</th>            <th>可变的方面</th>        </tr>    </thead>    <tbody>        <tr>            <td class="text-center">创建型模式</td>            <td>这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。</td>            <td>                <ul>                    <li>抽象工厂模式（Abstract Factory）</li>                    <li>建造者模式（Builder）</li>                    <li>工厂方法模式（Factory Method）</li>                    <li>原型模式（Prototype）</li>                    <li>单例模式（Singleton）</li>                </ul>            </td>            <td>                <ul>                    <li>产品对象家族</li>                    <li>如何创建一个组合对象</li>                    <li>被实例化的子类</li>                    <li>被实例化的类</li>                    <li>一个类的唯一实例</li>                </ul>            </td>        </tr>        <tr>            <td class="text-center">结构型模式</td>            <td>这些设计模式关注类和对象的组合。</td>            <td>                <ul>                    <li>适配器模式（Adapter）</li>                    <li>桥接模式（Bridge）</li>                    <li>组合模式（Composite）</li>                    <li>装饰器模式（Decorator）</li>                    <li>外观模式（Facade）</li>                    <li>享元模式（Flyweight）</li>                    <li>代理模式（Proxy）</li>                </ul>            </td>            <td>                <ul>                    <li>对象的接口</li>                    <li>对象的实现</li>                    <li>一个对象的结构和组成</li>                    <li>对象的职责，不生成子类</li>                    <li>一个子系统的接口</li>                    <li>对象的存储开销</li>                    <li>如何访问一个对象；该对象的位置</li>                </ul>            </td>        </tr>        <tr>            <td class="text-center">行为型模式</td>            <td>这些设计模式特别关注对象之间的通信。</td>            <td>                <ul>                    <li>责任链模式（Chain of Responsibility）</li>                    <li>命令模式（Command）</li>                    <li>解释器模式（Interpreter）</li>                    <li>迭代器模式（Iterator）</li>                    <li>中介者模式（Mediator）</li>                    <li>备忘录模式（Memento）</li>                    <li>观察者模式（Observer）</li>                    <li>状态模式（State）</li>                    <li>策略模式（Strategy）</li>                    <li>模板方法模式（Template Method）</li>                    <li>访问者模式（Visitor）</li>                </ul>            </td>            <td>                <ul>                    <li>满足一个请求的对象</li>                    <li>何时、怎样满足一个请求</li>                    <li>一个语言的文法及解释</li>                    <li>如何遍历、访问一个聚合的各元素</li>                    <li>对象间怎样交互、和谁交互</li>                    <li>一个对象中哪些私有信息存放在该对象之外、以及在什么时候进行存储</li>                    <li>多个对象依赖于另外一个对象，而这些对象又如何保持一致</li>                    <li>对象的状态</li>                    <li>算法</li>                    <li>算法中的某些步骤</li>                    <li>某些可作用于一个（组）对象上的操作，但不修改这些对象的类</li>                </ul>            </td>        </tr>    </tbody></table>

<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol>
<li>GoF - Design Patterns: Elements of Reusable Object-Oriented Software</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;设计模式关系图&quot;&gt;&lt;a href=&quot;#设计模式关系图&quot; class=&quot;headerlink&quot; title=&quot;设计模式关系图&quot;&gt;&lt;/a&gt;设计模式关系图&lt;/h2&gt;&lt;img src=&quot;/blog/img/java/design-patterns/gof-23-design-patterns.png&quot; class=&quot;image-lg&quot; title=&quot;[design-patters-relationships.png]&quot;&gt;
    
    </summary>
    
      <category term="java" scheme="https://www.4e00.com/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>getting started with the G1 garbage collector</title>
    <link href="https://www.4e00.com/java/2017/09/21/getting-started-with-the-G1-garbage-collector.html"/>
    <id>https://www.4e00.com/java/2017/09/21/getting-started-with-the-G1-garbage-collector.html</id>
    <published>2017-09-21T13:45:06.000Z</published>
    <updated>2017-09-25T01:50:17.669Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>This tutorial covers the basics of how to use the G1 garbage collector and how it can be used with the Hotspot JVM. You will learn how the G1 collector functions internally, the key command line switches for using G1, and options for logging its operation.</p>
<h2 id="Java-Technology-and-the-JVM"><a href="#Java-Technology-and-the-JVM" class="headerlink" title="Java Technology and the JVM"></a>Java Technology and the JVM</h2><h3 id="Java-Overview"><a href="#Java-Overview" class="headerlink" title="Java Overview"></a>Java Overview</h3><p>Java is a programming language and computing platform first released by Sun Microsystems in 1995. It is the underlying technology that powers Java programs including utilities, games, and business applications. Java runs on more than 850 million personal computers worldwide, and on billions of devices worldwide, including mobile and TV devices. Java is composed of a number of key components that, as a whole, create the Java platform.</p>
<h3 id="Java-Runtime-Edition"><a href="#Java-Runtime-Edition" class="headerlink" title="Java Runtime Edition"></a>Java Runtime Edition</h3><p>When you download Java, you get the Java Runtime Environment (JRE). The JRE consists of the Java Virtual Machine (JVM), Java platform core classes, and supporting Java platform libraries. All three are required to run Java applications on your computer. With Java 7, Java applications run as desktop applications from the operating system, as a desktop application but installed from the Web using Java Web Start, or as a Web Embedded application in a browser (using JavaFX).</p>
<a id="more"></a>
<h3 id="Java-Programming-Language"><a href="#Java-Programming-Language" class="headerlink" title="Java Programming Language"></a>Java Programming Language</h3><p>Java is an object-oriented programming language that includes the following features.</p>
<p>Platform Independence - Java applications are compiled into bytecode which is stored in class files and loaded in a JVM. Since applications run in a JVM, they can be run on many different operating systems and devices.<br>Object-Oriented - Java is an object-oriented language that take many of the features of C and C++ and improves upon them.<br>Automatic Garbage Collection - Java automatically allocates and deallocates memory so programs are not burdened with that task.<br>Rich Standard Library - Java includes a vast number of premade objects that can be used to perform such tasks as input/output, networking, and date manipulation.<br>Java Development Kit</p>
<p>The Java Development Kit (JDK) is a collection of tools for developing Java applications. With the JDK, you can compile programs written in the Java Programming language and run them in a JVM. In addition, the JDK provides tools for packaging and distributing your applications.</p>
<p>The JDK and the JRE share the Java Application Programming Interfaces (Java API). The Java API is a collection of prepackaged libraries developers use to create Java applications. The Java API makes development easier by providing the tools to complete many common programming tasks including string manipulation, date/time processing, networking, and implementing data structures (e.g., lists, maps, stacks, and queues).</p>
<h3 id="Java-Virtual-Machine"><a href="#Java-Virtual-Machine" class="headerlink" title="Java Virtual Machine"></a>Java Virtual Machine</h3><p>The Java Virtual Machine (JVM) is an abstract computing machine. The JVM is a program that looks like a machine to the programs written to execute in it. This way, Java programs are written to the same set of interfaces and libraries. Each JVM implementation for a specific operating system, translates the Java programming instructions into instructions and commands that run on the local operating system. This way, Java programs achieve platform independence.</p>
<p>The first prototype implementation of the Java virtual machine, done at Sun Microsystems, Inc., emulated the Java virtual machine instruction set in software hosted by a handheld device that resembled a contemporary Personal Digital Assistant (PDA). Oracle&#39;s current implementations emulate the Java virtual machine on mobile, desktop and server devices, but the Java virtual machine does not assume any particular implementation technology, host hardware, or host operating system. It is not inherently interpreted, but can just as well be implemented by compiling its instruction set to that of a silicon CPU. It may also be implemented in microcode or directly in silicon.</p>
<p>The Java virtual machine knows nothing of the Java programming language, only of a particular binary format, the class file format. A class file contains Java virtual machine instructions (or bytecodes) and a symbol table, as well as other ancillary information.</p>
<p>For the sake of security, the Java virtual machine imposes strong syntactic and structural constraints on the code in a class file. However, any language with functionality that can be expressed in terms of a valid class file can be hosted by the Java virtual machine. Attracted by a generally available, machine-independent platform, implementors of other languages can turn to the Java virtual machine as a delivery vehicle for their languages.</p>
<p>(1) <a href="http://docs.oracle.com/javase/specs/jvms/se7/html/jvms-1.html" target="_blank" rel="external">The Java Virtual Machine</a></p>
<h2 id="Exploring-the-JVM-Architecture"><a href="#Exploring-the-JVM-Architecture" class="headerlink" title="Exploring the JVM Architecture"></a>Exploring the JVM Architecture</h2><h3 id="Hotspot-Architecture"><a href="#Hotspot-Architecture" class="headerlink" title="Hotspot Architecture"></a>Hotspot Architecture</h3><p>The HotSpot JVM possesses an architecture that supports a strong foundation of features and capabilities and supports the ability to realize high performance and massive scalability. For example, the HotSpot JVM JIT compilers generate dynamic optimizations. In other words, they make optimization decisions while the Java application is running and generate high-performing native machine instructions targeted for the underlying system architecture. In addition, through the maturing evolution and continuous engineering of its runtime environment and multithreaded garbage collector, the HotSpot JVM yields high scalability on even the largest available computer systems.</p>
<img src="/blog/img/java/java-gc/1-jvm-architecture.png" class="image-lg" title="[1-jvm-architecture.png]">
<p>The main components of the JVM include the class loader, the runtime data areas, and the execution engine.</p>
<h3 id="Key-Hotspot-Components"><a href="#Key-Hotspot-Components" class="headerlink" title="Key Hotspot Components"></a>Key Hotspot Components</h3><p>The key components of the JVM that relate to performance are highlighted in the following image.</p>
<img src="/blog/img/java/java-gc/2-jvm-components.png" class="image-lg" title="[2-jvm-components.png]">
<p>There are three components of the JVM that are focused on when tuning performance. The heap is where your object data is stored. This area is then managed by the garbage collector selected at startup. Most tuning options relate to sizing the heap and choosing the most appropriate garbage collector for your situation. The JIT compiler also has a big impact on performance but rarely requires tuning with the newer versions of the JVM.</p>
<h2 id="Performance-Basics"><a href="#Performance-Basics" class="headerlink" title="Performance Basics"></a>Performance Basics</h2><p>Typically, when tuning a Java application, the focus is on one of two main goals: responsiveness or throughput. We will refer back to these concepts as the tutorial progresses.</p>
<h3 id="Responsiveness"><a href="#Responsiveness" class="headerlink" title="Responsiveness"></a>Responsiveness</h3><p>Responsiveness refers to how quickly an application or system responds with a requested piece of data. Examples include:</p>
<ol>
<li>How quickly a desktop UI responds to an event</li>
<li>How fast a website returns a page</li>
<li>How fast a database query is returned</li>
</ol>
<p>For applications that focus on responsiveness, large pause times are not acceptable. The focus is on responding in short periods of time.</p>
<h3 id="Throughput"><a href="#Throughput" class="headerlink" title="Throughput"></a>Throughput</h3><p>Throughput focuses on maximizing the amount of work by an application in a specific period of time. Examples of how throughput might be measured include:</p>
<ol>
<li>The number of transactions completed in a given time.</li>
<li>The number of jobs that a batch program can complete in an hour.</li>
<li>The number of database queries that can be completed in an hour.</li>
</ol>
<p>High pause times are acceptable for applications that focus on throughput. Since high throughput applications focus on benchmarks over longer periods of time, quick response time is not a consideration.</p>
<h2 id="The-G1-Garbage-Collector"><a href="#The-G1-Garbage-Collector" class="headerlink" title="The G1 Garbage Collector"></a>The G1 Garbage Collector</h2><p>The Garbage-First (G1) collector is a server-style garbage collector, targeted for multi-processor machines with large memories. It meets garbage collection (GC) pause time goals with a high probability, while achieving high throughput. The G1 garbage collector is fully supported in Oracle JDK 7 update 4 and later releases. The G1 collector is designed for applications that:</p>
<ol>
<li>Can operate concurrently with applications threads like the CMS collector.</li>
<li>Compact free space without lengthy GC induced pause times.</li>
<li>Need more predictable GC pause durations.</li>
<li>Do not want to sacrifice a lot of throughput performance.</li>
<li>Do not require a much larger Java heap.</li>
</ol>
<p>G1 is planned as the long term replacement for the Concurrent Mark-Sweep Collector (CMS). Comparing G1 with CMS, there are differences that make G1 a better solution. One difference is that G1 is a compacting collector. G1 compacts sufficiently to completely avoid the use of fine-grained free lists for allocation, and instead relies on regions. This considerably simplifies parts of the collector, and mostly eliminates potential fragmentation issues. Also, G1 offers more predictable garbage collection pauses than the CMS collector, and allows users to specify desired pause targets.</p>
<h3 id="G1-Operational-Overview"><a href="#G1-Operational-Overview" class="headerlink" title="G1 Operational Overview"></a>G1 Operational Overview</h3><p>The older garbage collectors (serial, parallel, CMS) all structure the heap into three sections: young generation, old generation, and permanent generation of a fixed memory size.</p>
<img src="/blog/img/java/java-gc/6-hotspot-heap-structure.png" class="image-lg" title="[6-hotspot-heap-structure.png]">
<p>All memory objects end up in one of these three sections.</p>
<p>The G1 collector takes a different approach.</p>
<img src="/blog/img/java/java-g1/g1-heap-allocation.png" class="image-lg" title="[g1-heap-allocation.png]">
<p>The heap is partitioned into a set of equal-sized heap regions, each a contiguous range of virtual memory. Certain region sets are assigned the same roles (eden, survivor, old) as in the older collectors, but there is not a fixed size for them. This provides greater flexibility in memory usage.</p>
<p>When performing garbage collections, G1 operates in a manner similar to the CMS collector. G1 performs a concurrent global marking phase to determine the liveness of objects throughout the heap. After the mark phase completes, G1 knows which regions are mostly empty. It collects in these regions first, which usually yields a large amount of free space. This is why this method of garbage collection is called Garbage-First. As the name suggests, G1 concentrates its collection and compaction activity on the areas of the heap that are likely to be full of reclaimable objects, that is, garbage. G1 uses a pause prediction model to meet a user-defined pause time target and selects the number of regions to collect based on the specified pause time target.</p>
<p>The regions identified by G1 as ripe for reclamation are garbage collected using evacuation. G1 copies objects from one or more regions of the heap to a single region on the heap, and in the process both compacts and frees up memory. This evacuation is performed in parallel on multi-processors, to decrease pause times and increase throughput. Thus, with each garbage collection, G1 continuously works to reduce fragmentation, working within the user defined pause times. This is beyond the capability of both the previous methods. CMS (Concurrent Mark Sweep ) garbage collector does not do compaction. ParallelOld garbage collection performs only whole-heap compaction, which results in considerable pause times.</p>
<p>It is important to note that G1 is not a real-time collector. It meets the set pause time target with high probability but not absolute certainty. Based on data from previous collections, G1 does an estimate of how many regions can be collected within the user specified target time. Thus, the collector has a reasonably accurate model of the cost of collecting the regions, and it uses this model to determine which and how many regions to collect while staying within the pause time target.</p>
<p>Note: G1 has both concurrent (runs along with application threads, e.g., refinement, marking, cleanup) and parallel (multi-threaded, e.g., stop the world) phases. Full garbage collections are still single threaded, but if tuned properly your applications should avoid full GCs.</p>
<h3 id="G1-Footprint"><a href="#G1-Footprint" class="headerlink" title="G1 Footprint"></a>G1 Footprint</h3><p>If you migrate from the ParallelOldGC or CMS collector to G1, you will likely see a larger JVM process size. This is largely related to &quot;accounting&quot; data structures such as Remembered Sets and Collection Sets.</p>
<p>Remembered Sets or RSets track object references into a given region. There is one RSet per region in the heap. The RSet enables the parallel and independent collection of a region. The overall footprint impact of RSets is less than 5%.</p>
<p>Collection Sets or CSets the set of regions that will be collected in a GC. All live data in a CSet is evacuated (copied/moved) during a GC. Sets of regions can be Eden, survivor, and/or old generation. CSets have a less than 1% impact on the size of the JVM.</p>
<h3 id="Recommended-Use-Cases-for-G1"><a href="#Recommended-Use-Cases-for-G1" class="headerlink" title="Recommended Use Cases for G1"></a>Recommended Use Cases for G1</h3><p>The first focus of G1 is to provide a solution for users running applications that require large heaps with limited GC latency. This means heap sizes of around 6GB or larger, and stable and predictable pause time below 0.5 seconds.</p>
<p>Applications running today with either the CMS or the ParallelOldGC garbage collector would benefit switching to G1 if the application has one or more of the following traits.</p>
<ol>
<li>Full GC durations are too long or too frequent.</li>
<li>The rate of object allocation rate or promotion varies significantly.</li>
<li>Undesired long garbage collection or compaction pauses (longer than 0.5 to 1 second)</li>
</ol>
<blockquote>
<p>Note: If you are using CMS or ParallelOldGC and your application is not experiencing long garbage collection pauses, it is fine to stay with your current collector. Changing to the G1 collector is not a requirement for using the latest JDK.</p>
</blockquote>
<h2 id="Reviewing-GC-with-the-CMS"><a href="#Reviewing-GC-with-the-CMS" class="headerlink" title="Reviewing GC with the CMS"></a>Reviewing GC with the CMS</h2><h3 id="Reviewing-Generational-GC-and-CMS"><a href="#Reviewing-Generational-GC-and-CMS" class="headerlink" title="Reviewing Generational GC and CMS"></a>Reviewing Generational GC and CMS</h3><p>The Concurrent Mark Sweep (CMS) collector (also referred to as the concurrent low pause collector) collects the tenured generation. It attempts to minimize the pauses due to garbage collection by doing most of the garbage collection work concurrently with the application threads. Normally the concurrent low pause collector does not copy or compact the live objects. A garbage collection is done without moving the live objects. If fragmentation becomes a problem, allocate a larger heap.</p>
<blockquote>
<p>Note: CMS collector on young generation uses the same algorithm as that of the parallel collector.</p>
</blockquote>
<h3 id="CMS-Collection-Phases"><a href="#CMS-Collection-Phases" class="headerlink" title="CMS Collection Phases"></a>CMS Collection Phases</h3><p>The CMS collector performs the following phases on the old generation of the heap:</p>
<table>    <thead>        <tr>            <th class="column-3">Phase</th>            <th>Description</th>        </tr>    </thead>    <tbody>        <tr>            <td class="text-left">(1) Initial Mark<br>            (Stop the World Event)</td>            <td class="text-left">Objects in old generation are &quot;marked&quot; as reachable including those objects which may be reachable from young generation. Pause times are typically short in duration relative to minor collection pause times.</td>        </tr>        <tr>            <td class="text-left">(2) Concurrent Marking</td>            <td class="text-left">Traverse the tenured generation object graph for reachable objects concurrently while Java application threads are executing. Starts scanning from marked objects and transitively marks all objects reachable from the roots. The mutators are executing during the concurrent phases 2, 3, and 5 and any objects allocated in the CMS generation during these phases (including promoted objects) are immediately marked as live.</td>        </tr>        <tr>            <td class="text-left">(3) Remark<br>            (Stop the World Event)</td>            <td class="text-left">Finds objects that were missed by the concurrent mark phase due to updates by Java application threads to objects after the concurrent collector had finished tracing that object.</td>        </tr>        <tr>            <td class="text-left">(4) Concurrent Sweep</td>            <td class="text-left">Collects the objects identified as unreachable during marking phases.  The collection of a dead object adds the space for the object to a free list for later allocation. Coalescing of dead objects may occur at this point. Note that live objects are not moved.</td>        </tr>        <tr>            <td class="text-left">(5) Resetting</td>            <td class="text-left">Prepare for next concurrent collection by clearing data structures.</td>        </tr>    </tbody></table>

<h2 id="Reviewing-Garbage-Collection-Steps"><a href="#Reviewing-Garbage-Collection-Steps" class="headerlink" title="Reviewing Garbage Collection Steps"></a>Reviewing Garbage Collection Steps</h2><p>Next, let&#39;s review CMS Collector operations step by step.</p>
<h3 id="Heap-Structure-for-CMS-Collector"><a href="#Heap-Structure-for-CMS-Collector" class="headerlink" title="Heap Structure for CMS Collector"></a>Heap Structure for CMS Collector</h3><p>The heap is split into three spaces.</p>
<img src="/blog/img/java/java-gc/1-cms-heap-structure.png" class="image-lg" title="[1-cms-heap-structure.png]">
<p>Young generation is split into Eden and two survivor spaces. Old generation is one contiguous space. Object collection is done in place. No compaction is done unless there is a full GC.</p>
<h3 id="How-Young-GC-works-in-CMS"><a href="#How-Young-GC-works-in-CMS" class="headerlink" title="How Young GC works in CMS"></a>How Young GC works in CMS</h3><p>The young generation is colored light green and the old generation in blue. This is what the CMS might look like if your application has been running for a while. Objects are scattered around the old generation area.</p>
<img src="/blog/img/java/java-gc/2-how-young-gc-works.png" class="image-lg" title="[2-how-young-gc-works.png]">
<p>With CMS, old generation objects are deallocated in place. They are not moved around. The space is not compacted unless there is a full GC.</p>
<h3 id="Young-Generation-Collection"><a href="#Young-Generation-Collection" class="headerlink" title="Young Generation Collection"></a>Young Generation Collection</h3><p>Live objects are copied from the Eden space and survivor space to the other survivor space. Any older objects that have reached their aging threshold are promoted to old generation.</p>
<img src="/blog/img/java/java-gc/3-young-generation-collection.png" class="image-lg" title="[3-young-generation-collection.png]">
<h3 id="After-Young-GC"><a href="#After-Young-GC" class="headerlink" title="After Young GC"></a>After Young GC</h3><p>After a young GC, the Eden space is cleared and one of the survivor spaces is cleared.</p>
<img src="/blog/img/java/java-gc/4-after-young-gc.png" class="image-lg" title="[4-after-young-gc.png]">
<p>Newly promoted objects are shown in dark blue on the diagram. The green objects are surviving young generation objects that have not yet been promoted to old generation.</p>
<h3 id="Old-Generation-Collection-with-CMS"><a href="#Old-Generation-Collection-with-CMS" class="headerlink" title="Old Generation Collection with CMS"></a>Old Generation Collection with CMS</h3><p>Two stop the world events take place: initial mark and remark. When the old generation reaches a certain occupancy rate, the CMS is kicked off.</p>
<img src="/blog/img/java/java-gc/5-old-generation-collection-with-cms.png" class="image-lg" title="[5-old-generation-collection-with-cms.png]">
<ol>
<li>(1) Initial mark is a short pause phase where live (reachable) objects are marked.</li>
<li>(2) Concurrent marking finds live objects while the application continues to execute.</li>
<li>Finally, in the (3) remark phase, objects are found that were missed during (2) concurrent marking in the previous phase.</li>
</ol>
<h3 id="Old-Generation-Collection-Concurrent-Sweep"><a href="#Old-Generation-Collection-Concurrent-Sweep" class="headerlink" title="Old Generation Collection - Concurrent Sweep"></a>Old Generation Collection - Concurrent Sweep</h3><p>Objects that were not marked in the previous phase are deallocated in place. There is no compaction.</p>
<img src="/blog/img/java/java-gc/6-old-generation-collection-concurrent-sweep.png" class="image-lg" title="[6-old-generation-collection-concurrent-sweep.png]">
<blockquote>
<p>Note: Unmarked objects == Dead Objects</p>
</blockquote>
<h3 id="Old-Generation-Collection-After-Sweeping"><a href="#Old-Generation-Collection-After-Sweeping" class="headerlink" title="Old Generation Collection - After Sweeping"></a>Old Generation Collection - After Sweeping</h3><p>After the (4) Sweeping phase, you can see that a lot of memory has been freed up. You will also notice that no compaction has been done.</p>
<img src="/blog/img/java/java-gc/7-old-generation-collection-after-sweeping.png" class="image-lg" title="[7-old-generation-collection-after-sweeping.png]">
<p>Finally, the CMS collector will move through the (5) resetting phase and wait for the next time the GC threshold is reached.</p>
<h2 id="The-G1-Garbage-Collector-Step-by-Step"><a href="#The-G1-Garbage-Collector-Step-by-Step" class="headerlink" title="The G1 Garbage Collector Step by Step"></a>The G1 Garbage Collector Step by Step</h2><p>The G1 collector takes a different approach to allocating the heap. The pictures that follow review the G1 system step by step.</p>
<h3 id="G1-Heap-Structure"><a href="#G1-Heap-Structure" class="headerlink" title="G1 Heap Structure"></a>G1 Heap Structure</h3><p>The heap is one memory area split into many fixed sized regions.</p>
<img src="/blog/img/java/java-g1/g1-heap-structure.png" class="image-lg" title="[g1-heap-structure.png]">
<p>Region size is chosen by the JVM at startup. The JVM generally targets around 2000 regions varying in size from 1 to 32Mb.</p>
<h3 id="G1-Heap-Allocation"><a href="#G1-Heap-Allocation" class="headerlink" title="G1 Heap Allocation"></a>G1 Heap Allocation</h3><p>In reality, these regions are mapped into logical representations of Eden, Survivor, and old generation spaces.</p>
<img src="/blog/img/java/java-g1/g1-heap-allocation.png" class="image-lg" title="[g1-heap-allocation.png]">
<p>The colors in the picture shows which region is associated with which role. Live objects are evacuated (i.e., copied or moved) from one region to another. Regions are designed to be collected in parallel with or without stopping all other application threads.</p>
<p>As shown regions can be allocated into Eden, survivor, and old generation regions. In addition, there is a fourth type of object known as Humongous regions. These regions are designed to hold objects that are 50% the size of a standard region or larger. They are stored as a set of contiguous regions. Finally the last type of regions would be the unused areas of the heap.</p>
<blockquote>
<p>Note: At the time of this writing, collecting humongous objects has not been optimized. Therefore, you should avoid creating objects of this size.</p>
</blockquote>
<h3 id="Young-Generation-in-G1"><a href="#Young-Generation-in-G1" class="headerlink" title="Young Generation in G1"></a>Young Generation in G1</h3><p>The heap is split into approximately 2000 regions. Minimum size is 1Mb and maximum size is 32Mb. Blue regions hold old generation objects and green regions hold young generation objects.<br><img src="/blog/img/java/java-g1/yong-generation-g1.png" class="image-lg" title="[yong-generation-g1.png]"></p>
<p>Note that the regions are not required to be contiguous like the older garbage collectors.</p>
<h3 id="A-Young-GC-in-G1"><a href="#A-Young-GC-in-G1" class="headerlink" title="A Young GC in G1"></a>A Young GC in G1</h3><p>Live objects are evacuated (i.e., copied or moved) to one or more survivor regions. If the aging threshold is met, some of the objects are promoted to old generation regions.</p>
<img src="/blog/img/java/java-g1/young-generation-g1-eden.png" class="image-lg" title="[young-generation-g1-eden.png]">
<p>This is a stop the world (STW) pause. Eden size and survivor size is calculated for the next young GC. Accounting information is kept to help calculate the size. Things like the pause time goal are taken into consideration.</p>
<p>This approach makes it very easy to resize regions, making them bigger or smaller as needed.</p>
<h3 id="End-of-a-Young-GC-with-G1"><a href="#End-of-a-Young-GC-with-G1" class="headerlink" title="End of a Young GC with G1"></a>End of a Young GC with G1</h3><p>Live objects have been evacuated to survivor regions or to old generation regions.</p>
<img src="/blog/img/java/java-g1/young-generation-g1-end.png" class="image-lg" title="[young-generation-g1-end.png]">
<p>Recently promoted objects are shown in dark blue. Survivor regions in green.</p>
<p>In summary, the following can be said about the young generation in G1:</p>
<ol>
<li>The heap is a single memory space split into regions.</li>
<li>Young generation memory is composed of a set of non-contiguous regions. This makes it easy to resize when needed.</li>
<li>Young generation garbage collections, or young GCs, are stop the world events. All application threads are stopped for the operation.</li>
<li>The young GC is done in parallel using multiple threads.</li>
<li>Live objects are copied to new survivor or old generation regions.</li>
</ol>
<h2 id="Old-Generation-Collection-with-G1"><a href="#Old-Generation-Collection-with-G1" class="headerlink" title="Old Generation Collection with G1"></a>Old Generation Collection with G1</h2><p>Like the CMS collector, the G1 collector is designed to be a low pause collector for old generation objects. The following table describes the G1 collection phases on old generation.</p>
<h3 id="G1-Collection-Phases-Concurrent-Marking-Cycle-Phases"><a href="#G1-Collection-Phases-Concurrent-Marking-Cycle-Phases" class="headerlink" title="G1 Collection Phases - Concurrent Marking Cycle Phases"></a>G1 Collection Phases - Concurrent Marking Cycle Phases</h3><p>The G1 collector performs the following phases on the old generation of the heap. Note that some phases are part of a young generation collection.</p>
<table>    <thead>        <tr>            <th class="column-3">Phase</th>            <th>Description</th>        </tr>    </thead>    <tbody>        <tr>            <td class="text-left">(1) Initial Mark<br>            (Stop the World Event)</td>            <td class="text-left">This is a stop the world event. With G1, it is piggybacked on a normal young GC. Mark survivor regions (root regions) which may have references to objects in old generation.</td>        </tr>        <tr>            <td class="text-left">(2) Root Region Scanning</td>            <td class="text-left">Scan survivor regions for references into the old generation. This happens while the application continues to run. The phase must be completed before a young GC can occur.</td>        </tr>        <tr>            <td class="text-left">(3) Concurrent Marking</td>            <td class="text-left">Find live objects over the entire heap. This happens while the application is running. This phase can be interrupted by young generation garbage collections.</td>        </tr>        <tr>            <td class="text-left">(4) Remark<br>            (Stop the World Event)</td>            <td class="text-left">Completes the marking of live object in the heap. Uses an algorithm called snapshot-at-the-beginning (SATB) which is much faster than what was used in the CMS collector.</td>        </tr>        <tr>            <td class="text-left">(5) Cleanup<br>            (Stop the World Event and Concurrent)</td>            <td class="text-left">1. Performs accounting on live objects and completely free regions. (Stop the world)<br>            2. Scrubs the Remembered Sets. (Stop the world)<br>            3. Reset the empty regions and return them to the free list. (Concurrent)</td>        </tr>        <tr>            <td class="text-left">(*) Copying (Stop the World Event)</td>            <td class="text-left">These are the stop the world pauses to evacuate or copy live objects to new unused regions. This can be done with young generation regions which are logged as [GC pause (young)]. Or both young and old generation regions which are logged as [GC Pause (mixed)].</td>        </tr>    </tbody></table>

<h3 id="G1-Old-Generation-Collection-Step-by-Step"><a href="#G1-Old-Generation-Collection-Step-by-Step" class="headerlink" title="G1 Old Generation Collection Step by Step"></a>G1 Old Generation Collection Step by Step</h3><p>With the phases defined, let&#39;s look at how they interact with the old generation in the G1 collector.</p>
<h3 id="Initial-Marking-Phase"><a href="#Initial-Marking-Phase" class="headerlink" title="Initial Marking Phase"></a>Initial Marking Phase</h3><p>Initial marking of live object is piggybacked on a young generation garbage collection. In the logs this is noted as GC pause (young)(inital-mark).</p>
<img src="/blog/img/java/java-g1/g1-initial-marking-phase.png" class="image-lg" title="[g1-initial-marking-phase.png]">
<h3 id="Concurrent-Marking-Phase"><a href="#Concurrent-Marking-Phase" class="headerlink" title="Concurrent Marking Phase"></a>Concurrent Marking Phase</h3><p>If empty regions are found (as denoted by the &quot;X&quot;), they are removed immediately in the Remark phase. Also, &quot;accounting&quot; information that determines liveness is calculated.</p>
<img src="/blog/img/java/java-g1/g1-concurrent-marking-phase.png" class="image-lg" title="[g1-concurrent-marking-phase.png]">
<h3 id="Remark-Phase"><a href="#Remark-Phase" class="headerlink" title="Remark Phase"></a>Remark Phase</h3><p>Empty regions are removed and reclaimed. Region liveness is now calculated for all regions.</p>
<img src="/blog/img/java/java-g1/g1-remarking-phase.png" class="image-lg" title="[g1-remarking-phase.png]">
<h3 id="Copying-Cleanup-Phase"><a href="#Copying-Cleanup-Phase" class="headerlink" title="Copying/Cleanup Phase"></a>Copying/Cleanup Phase</h3><p>G1 selects the regions with the lowest &quot;liveness&quot;, those regions which can be collected the fastest. Then those regions are collected at the same time as a young GC. This is denoted in the logs as [GC pause (mixed)]. So both young and old generations are collected at the same time.</p>
<img src="/blog/img/java/java-g1/g1-copying-clean-phase.png" class="image-lg" title="[g1-copying-clean-phase.png]">
<h3 id="After-Copying-Cleanup-Phase"><a href="#After-Copying-Cleanup-Phase" class="headerlink" title="After Copying/Cleanup Phase"></a>After Copying/Cleanup Phase</h3><p>The regions selected have been collected and compacted into the dark blue region and the dark green region shown in the diagram.</p>
<img src="/blog/img/java/java-g1/g1-copying-clean-phase.png" class="image-lg" title="[g1-copying-clean-phase.png]">
<h3 id="Summary-of-Old-Generation-GC"><a href="#Summary-of-Old-Generation-GC" class="headerlink" title="Summary of Old Generation GC"></a>Summary of Old Generation GC</h3><p>In summary, there are a few key points we can make about the G1 garbage collection on the old generation.</p>
<ol>
<li>Concurrent Marking Phase<ul>
<li>Liveness information is calculated concurrently while the application is running.</li>
<li>This liveness information identifies which regions will be best to reclaim during an evacuation pause.</li>
<li>There is no sweeping phase like in CMS.</li>
</ul>
</li>
<li>Remark Phase<ul>
<li>Uses the Snapshot-at-the-Beginning (SATB) algorithm which is much faster then what was used with CMS.</li>
<li>Completely empty regions are reclaimed.</li>
</ul>
</li>
<li>Copying/Cleanup Phase<ul>
<li>Young generation and old generation are reclaimed at the same time.</li>
<li>Old generation regions are selected based on their liveness.</li>
</ul>
</li>
</ol>
<h2 id="Command-Line-Options-and-Best-Practices"><a href="#Command-Line-Options-and-Best-Practices" class="headerlink" title="Command Line Options and Best Practices"></a>Command Line Options and Best Practices</h2><p>In this section let&#39;s take a look at the various command line options for G1.</p>
<h3 id="Basic-Command-Line"><a href="#Basic-Command-Line" class="headerlink" title="Basic Command Line"></a>Basic Command Line</h3><p>To enable the G1 Collector use: <code>-XX:+UseG1GC</code></p>
<p>Here is a sample command line for starting the <a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="external">Java2Demo</a> included in the JDK demos and samples download:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><i class="fa fa-usd"></i> <span class="built_in">java</span> -Xmx50m -Xms50m -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -jar c:\javademos\demo\jfc\Java2D\Java2demo.jar</div></pre></td></tr></table></figure>
<h3 id="Key-Command-Line-Switches"><a href="#Key-Command-Line-Switches" class="headerlink" title="Key Command Line Switches"></a>Key Command Line Switches</h3><ol>
<li><code>-XX:+UseG1GC</code> - Tells the JVM to use the G1 Garbage collector.</li>
<li><code>-XX:MaxGCPauseMillis=200</code> - Sets a target for the maximum GC pause time. This is a soft goal, and the JVM will make its best effort to achieve it. Therefore, the pause time goal will sometimes not be met. The default value is 200 milliseconds.</li>
<li><code>-XX:InitiatingHeapOccupancyPercent=45</code> - Percentage of the (entire) heap occupancy to start a concurrent GC cycle. It is used by G1 to trigger a concurrent GC cycle based on the occupancy of the entire heap, not just one of the generations. A value of 0 denotes &#39;do constant GC cycles&#39;. The default value is 45 (i.e., 45% full or occupied).</li>
</ol>
<h3 id="Best-Practices"><a href="#Best-Practices" class="headerlink" title="Best Practices"></a>Best Practices</h3><p>There are a few best practices you should follow when using G1.</p>
<h4 id="Do-not-Set-Young-Generation-Size"><a href="#Do-not-Set-Young-Generation-Size" class="headerlink" title="Do not Set Young Generation Size"></a>Do not Set Young Generation Size</h4><p>Explicitly setting young generation size via <code>-Xmn</code> meddles with the default behavior of the G1 collector.</p>
<ol>
<li>G1 will no longer respect the pause time target for collections. So in essence, setting the young generation size disables the pause time goal.</li>
<li>G1 is no longer able to expand and contract the young generation space as needed. Since the size is fixed, no changes can be made to the size.</li>
</ol>
<h4 id="Response-Time-Metrics"><a href="#Response-Time-Metrics" class="headerlink" title="Response Time Metrics"></a>Response Time Metrics</h4><p>Instead of using average response time (ART) as a metric to set the <code>XX:MaxGCPauseMillis=&lt;N&gt;</code>, consider setting value that will meet the goal 90% of the time or more. This means 90% of users making a request will not experience a response time higher than the goal. Remember, the pause time is a goal and is not guaranteed to always be met.</p>
<h4 id="What-is-an-Evacuation-Failure"><a href="#What-is-an-Evacuation-Failure" class="headerlink" title="What is an Evacuation Failure?"></a>What is an Evacuation Failure?</h4><p>A promotion failure that happens when a JVM runs out of heap regions during the GC for either survivors and promoted objects. The heap can&#39;t expand because it is already at max. This is indicated in the GC logs when using <code>-XX:+PrintGCDetails</code> by <code>to-space</code> overflow. This is expensive!</p>
<ol>
<li>GC still has to continue so space has to be freed up.</li>
<li>Unsuccessfully copied objects have to be tenured in place.</li>
<li>Any updates to RSets of regions in the CSet have to be regenerated.</li>
<li>All of these steps are expensive.</li>
</ol>
<h4 id="How-to-avoid-Evacuation-Failure"><a href="#How-to-avoid-Evacuation-Failure" class="headerlink" title="How to avoid Evacuation Failure"></a>How to avoid Evacuation Failure</h4><p>To avoid evacuation failure, consider the following options.</p>
<ol>
<li>Increase heap size<ul>
<li>Increase the <code>-XX:G1ReservePercent=n</code>, the default is <code>10</code>.</li>
<li>G1 creates a false ceiling by trying to leave the reserve memory free in case more <code>to-space</code> is desired.</li>
</ul>
</li>
<li>Start the marking cycle earlier</li>
<li>Increase the number of marking threads using the <code>-XX:ConcGCThreads=n</code> option.</li>
</ol>
<h3 id="Complete-List-of-G1-GC-Switches"><a href="#Complete-List-of-G1-GC-Switches" class="headerlink" title="Complete List of G1 GC Switches"></a>Complete List of G1 GC Switches</h3><p>This is the complete list of G1 GC switches. Remember to use the best practices outlined above.</p>
<table>    <thead>        <tr>            <th class="column-3">Option and Default Value</th>            <th>Description</th>        </tr>    </thead>    <tbody>        <tr>            <td class="text-left">-XX:+UseG1GC</td>            <td class="text-left">Use the Garbage First (G1) Collector</td>        </tr>        <tr>            <td class="text-left">-XX:MaxGCPauseMillis=n</td>            <td class="text-left">Sets a target for the maximum GC pause time. This is a soft goal, and the JVM will make its best effort to achieve it.</td>        </tr>        <tr>            <td class="text-left">-XX:InitiatingHeapOccupancyPercent=n</td>            <td class="text-left">Percentage of the (entire) heap occupancy to start a concurrent GC cycle. It is used by GCs that trigger a concurrent GC cycle based on the occupancy of the entire heap, not just one of the generations (e.g., G1). A value of 0 denotes &#39;do constant GC cycles&#39;.  The default value is 45.</td>        </tr>        <tr>            <td class="text-left">-XX:NewRatio=n</td>            <td class="text-left">Ratio of new/old generation sizes. The default value is 2.</td>        </tr>        <tr>            <td class="text-left">-XX:SurvivorRatio=n</td>            <td class="text-left">Ratio of eden/survivor space size. The default value is 8.</td>        </tr>        <tr>            <td class="text-left">-XX:MaxTenuringThreshold=n</td>            <td class="text-left">Maximum value for tenuring threshold. The default value is 15.</td>        </tr>        <tr>            <td class="text-left">-XX:ParallelGCThreads=n</td>            <td class="text-left">Sets the number of threads used during parallel phases of the garbage collectors. The default value varies with the platform on which the JVM is running.</td>        </tr>        <tr>            <td class="text-left">-XX:ConcGCThreads=n</td>            <td class="text-left">Number of threads concurrent garbage collectors will use. The default value varies with the platform on which the JVM is running.</td>        </tr>        <tr>            <td class="text-left">-XX:G1ReservePercent=n</td>            <td class="text-left">Sets the amount of heap that is reserved as a false ceiling to reduce the possibility of promotion failure. The default value is 10.</td>        </tr>        <tr>            <td class="text-left">-XX:G1HeapRegionSize=n</td>            <td class="text-left">With G1 the Java heap is subdivided into uniformly sized regions. This sets the size of the individual sub-divisions. The default value of this parameter is determined ergonomically based upon heap size.  The minimum value is 1Mb and the maximum value is 32Mb.</td>        </tr>    </tbody></table>

<h2 id="Logging-GC-with-G1"><a href="#Logging-GC-with-G1" class="headerlink" title="Logging GC with G1"></a>Logging GC with G1</h2><p>The final topic we need to cover is using logging information to analyze performance with the G1 collector. This section provides a quick overview of the switches you can use to collect data and the information that is printed in the logs.</p>
<h3 id="Setting-the-Log-Detail"><a href="#Setting-the-Log-Detail" class="headerlink" title="Setting the Log Detail"></a>Setting the Log Detail</h3><p>You can set the detail to three different levels of detail.</p>
<p>(1) <code>-verbosegc</code> (which is equivalent to <code>-XX:+PrintGC</code>) sets the detail level of the log to fine.</p>
<h4 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[GC pause (G1 Humongous Allocation) (young) (initial-mark) 24M- &gt;21M(64M), 0.2349730 secs]</div><div class="line">[GC pause (G1 Evacuation Pause) (mixed) 66M-&gt;21M(236M), 0.1625268 secs]</div></pre></td></tr></table></figure>
<p>(2) <code>-XX:+PrintGCDetails</code> sets the detail level to finer. The options shows the following information:</p>
<ol>
<li>Average, Min, and Max time are displayed for each phase.</li>
<li>Root Scan, RSet Updating (with processed buffers information), RSet Scan, Object Copy, Termination (with number of attempts).</li>
<li>Also shows “other” time such as time spent choosing CSet, reference processing, reference enqueuing and freeing CSet.</li>
<li>Shows the Eden, Survivors and Total Heap occupancies.</li>
</ol>
<h4 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output"></a>Sample Output</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[Ext Root Scanning (ms): Avg: 1.7 Min: 0.0 Max: 3.7 Diff: 3.7]</div><div class="line">[Eden: 818M(818M)-&gt;0B(714M) Survivors: 0B-&gt;104M Heap: 836M(4096M)-&gt;409M(4096M)]</div></pre></td></tr></table></figure>
<p>(3) <code>-XX:+UnlockExperimentalVMOptions -XX:G1LogLevel=finest</code> sets the detail level to its finest. Like finer but includes individual worker thread information.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[Ext Root Scanning (ms): 2.1 2.4 2.0 0.0</div><div class="line">           Avg: 1.6 Min: 0.0 Max: 2.4 Diff: 2.3]</div><div class="line">       [Update RS (ms):  0.4  0.2  0.4  0.0</div><div class="line">           Avg: 0.2 Min: 0.0 Max: 0.4 Diff: 0.4]</div><div class="line">           [Processed Buffers : 5 1 10 0</div><div class="line">           Sum: 16, Avg: 4, Min: 0, Max: 10, Diff: 10]</div></pre></td></tr></table></figure>
<h3 id="Determining-Time"><a href="#Determining-Time" class="headerlink" title="Determining Time"></a>Determining Time</h3><p>A couple of switches determine how time is displayed in the GC log.</p>
<p>(1) <code>-XX:+PrintGCTimeStamps</code> - Shows the elapsed time since the JVM started.</p>
<h4 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output"></a>Sample Output</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">1.729: [GC pause (young) 46M-&gt;35M(1332M), 0.0310029 secs]</div></pre></td></tr></table></figure>
<p>(2) <code>-XX:+PrintGCDateStamps</code> - Adds a time of day prefix to each entry.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">2012-05-02T11:16:32.057+0200: [GC pause (young) 46M-&gt;35M(1332M), 0.0317225 secs]</div></pre></td></tr></table></figure>
<h3 id="Understanding-G1-Log"><a href="#Understanding-G1-Log" class="headerlink" title="Understanding G1 Log"></a>Understanding G1 Log</h3><p>To understand the log, this section defines a number of terms using actual GC log output. The following examples show output from the log with explanations of the terms and values you will find in it.</p>
<blockquote>
<p>Note: For more information check out Poonam Bajaj&#39;s Blog post on G1 GC logs.</p>
</blockquote>
<h3 id="G1-Logging-Terms-Index"><a href="#G1-Logging-Terms-Index" class="headerlink" title="G1 Logging Terms Index"></a>G1 Logging Terms Index</h3><ul>
<li>Clear CT</li>
<li>CSet</li>
<li>External Root Scanning</li>
<li>Free CSet</li>
<li>GC Worker End</li>
<li>GC Worker Other</li>
<li>Object Copy</li>
<li>Other</li>
<li>Parallel Time</li>
<li>Ref Eng</li>
<li>Ref Proc</li>
<li>Scanning Remembered Sets</li>
<li>Termination Time</li>
<li>Update Remembered Set</li>
<li>Worker Start</li>
<li>Parallel Time</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">414.557: [GC pause (young), 0.03039600 secs] [Parallel Time: 22.9 ms]</div><div class="line">[GC Worker Start (ms): 7096.0 7096.0 7096.1 7096.1 706.1 7096.1 7096.1 7096.1 7096.2 7096.2 7096.2 7096.2</div><div class="line">       Avg: 7096.1, Min: 7096.0, Max: 7096.2, Diff: 0.2]</div></pre></td></tr></table></figure>
<ol>
<li>Parallel Time – Overall elapsed time of the main parallel part of the pause</li>
<li>Worker Start – Timestamp at which the workers start</li>
</ol>
<blockquote>
<p>Note: The logs are ordered on thread id and are consistent on each entry</p>
</blockquote>
<h4 id="External-Root-Scanning"><a href="#External-Root-Scanning" class="headerlink" title="External Root Scanning"></a>External Root Scanning</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[Ext Root Scanning (ms): 3.1 3.4 3.4 3.0 4.2 2.0 3.6 3.2 3.4 7.7 3.7 4.4</div><div class="line">     Avg: 3.8, Min: 2.0, Max: 7.7, Diff: 5.7]</div></pre></td></tr></table></figure>
<p>External root scanning - The time taken to scan the external root (e.g., things like system dictionary that point into the heap.)</p>
<h4 id="Update-Remembered-Set"><a href="#Update-Remembered-Set" class="headerlink" title="Update Remembered Set"></a>Update Remembered Set</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[Update RS (ms): 0.1 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 Avg: 0.0, Min: 0.0, Max: 0.1, Diff: 0.1]</div><div class="line">   [Processed Buffers : 26 0 0 0 0 0 0 0 0 0 0 0</div><div class="line">    Sum: 26, Avg: 2, Min: 0, Max: 26, Diff: 26]</div></pre></td></tr></table></figure>
<p>Update Remembered Set - Any buffers that are completed but have not yet been processed by the concurrent refinement thread before the start of the pause have to be updated. Time depends on density of the cards. The more cards, the longer it will take.</p>
<h4 id="Scanning-Remembered-Sets"><a href="#Scanning-Remembered-Sets" class="headerlink" title="Scanning Remembered Sets"></a>Scanning Remembered Sets</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[Scan RS (ms): 0.4 0.2 0.1 0.3 0.0 0.0 0.1 0.2 0.0 0.1 0.0 0.0 Avg: 0.1, Min: 0.0, Max: 0.4, Diff: 0.3]F</div></pre></td></tr></table></figure>
<p>Scanning Remembered Sets - Look for pointers that point into the Collection Set.</p>
<h4 id="Object-Copy"><a href="#Object-Copy" class="headerlink" title="Object Copy"></a>Object Copy</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[Object Copy (ms): 16.7 16.7 16.7 16.9 16.0 18.1 16.5 16.8 16.7 12.3 16.4 15.7 Avg: 16.3, Min: 12.3, Max:  18.1, Diff: 5.8]</div></pre></td></tr></table></figure>
<p>Object copy – The time that each individual thread spent copying and evacuating objects.</p>
<h4 id="Termination-Time"><a href="#Termination-Time" class="headerlink" title="Termination Time"></a>Termination Time</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[Termination (ms): 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0</div><div class="line">0.0 Avg: 0.0, Min: 0.0, Max: 0.0, Diff: 0.0] [Termination Attempts : 1 1 1 1 1 1 1 1 1 1 1 1 Sum: 12, Avg: 1, Min: 1, Max: 1, Diff: 0]</div></pre></td></tr></table></figure>
<p>Termination time - When a worker thread is finished with its particular set of objects to copy and scan, it enters the termination protocol. It looks for work to steal and once it&#39;s done with that work it again enters the termination protocol. Termination attempt counts all the attempts to steal work.</p>
<h4 id="GC-Worker-End"><a href="#GC-Worker-End" class="headerlink" title="GC Worker End"></a>GC Worker End</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[GC Worker End (ms): 7116.4 7116.3 7116.4 7116.3 7116.4 7116.3 7116.4 7116.4 7116.4 7116.4 7116.3 7116.3</div><div class="line">    Avg: 7116.4, Min: 7116.3, Max: 7116.4, Diff:   0.1]</div><div class="line">[GC Worker (ms): 20.4 20.3 20.3 20.2 20.3 20.2 20.2 20.2 20.3 20.2 20.1 20.1</div><div class="line">     Avg: 20.2, Min: 20.1, Max: 20.4, Diff: 0.3]</div></pre></td></tr></table></figure>
<ol>
<li>GC worker end time – Timestamp when the individual GC worker stops.</li>
<li>GC worker time – Time taken by individual GC worker thread.</li>
</ol>
<h4 id="GC-Worker-Other"><a href="#GC-Worker-Other" class="headerlink" title="GC Worker Other"></a>GC Worker Other</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[GC Worker Other (ms): 2.6 2.6 2.7 2.7 2.7 2.7 2.7 2.8 2.8 2.8 2.8 2.8</div><div class="line">    Avg: 2.7, Min: 2.6, Max: 2.8, Diff: 0.2]</div></pre></td></tr></table></figure>
<p>GC worker other – The time (for each GC thread) that can&#39;t be attributed to the worker phases listed previously. Should be quite low. In the past, we have seen excessively high values and they have been attributed to bottlenecks in other parts of the JVM (e.g., increases in the Code Cache occupancy with Tiered).</p>
<h4 id="Clear-CT"><a href="#Clear-CT" class="headerlink" title="Clear CT"></a>Clear CT</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[Clear CT: 0.6 ms]</div></pre></td></tr></table></figure>
<p>Time taken to clear the card table of RSet scanning meta-data</p>
<h4 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[Other: 6.8 ms]</div></pre></td></tr></table></figure>
<p>Time taken for various other sequential phases of the GC pause.</p>
<h4 id="CSet"><a href="#CSet" class="headerlink" title="CSet"></a>CSet</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[Choose CSet: 0.1 ms]</div></pre></td></tr></table></figure>
<p>Time taken finalizing the set of regions to collect. Usually very small; slightly longer when having to select old.</p>
<h4 id="Ref-Proc"><a href="#Ref-Proc" class="headerlink" title="Ref Proc"></a>Ref Proc</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[Ref Proc: 4.4 ms]</div></pre></td></tr></table></figure>
<p>Time spent processing soft, weak, etc. references deferred from the prior phases of the GC.</p>
<h4 id="Ref-Enq"><a href="#Ref-Enq" class="headerlink" title="Ref Enq"></a>Ref Enq</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[Ref Enq: 0.1 ms]</div></pre></td></tr></table></figure>
<p>Time spent placing soft, weak, etc. references on to the pending list.</p>
<h4 id="Free-CSet"><a href="#Free-CSet" class="headerlink" title="Free CSet"></a>Free CSet</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[Free CSet: 2.0 ms]</div></pre></td></tr></table></figure>
<p>Time spent freeing the set of regions that have just been collected, including their remembered sets.</p>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>In this OBE, you have been given an overview of the G1 garbage collector included in the Java JVM. First you learned how the Heap and the Garbage Collector are key parts of any Java JVM. Next your reviewed how garbage collection works using the CMS collector and the G1 collector. Next you learned about the G1 command line switches and the best practices for using them. Finally, you learned about logging object and data included in the GC logs.</p>
<p>In this tutorial, you have learned:</p>
<ol>
<li>The components of the Java JVM</li>
<li>An overview of the G1 Collector</li>
<li>A review of the CMS collector</li>
<li>A review of the G1 collector</li>
<li>Command line switches and best practices</li>
<li>Logging with G1</li>
</ol>
<h3 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h3><p>For more information and related information please see these site and links.</p>
<ul>
<li>Java HotSpot VM Options</li>
<li>The Garbage First(G1) Garbage Collector</li>
<li>Poonam Bajaj G1 GC Blog Post</li>
<li>Java SE 7: Develop Rich Client Applications</li>
<li>Java Performance - Charlie Hunt and Binu John</li>
<li>Oracle Learning Library</li>
</ul>
<h3 id="Credits"><a href="#Credits" class="headerlink" title="Credits"></a>Credits</h3><p>Curriculum Developer: Michael J Williams<br>QA: Krishnanjani Chitta</p>
<h2 id="Example-GC-log-of-G1-using-Java2Demo-jar"><a href="#Example-GC-log-of-G1-using-Java2Demo-jar" class="headerlink" title="Example GC log of G1 using Java2Demo.jar"></a>Example GC log of G1 using Java2Demo.jar</h2><p>Download <a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="external">jdk-8u144-linux-x64-demos.tar.gz</a> and extract <code>Java2Demo.jar</code> from it.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"><i class="fa fa-usd"></i> <span class="built_in">java</span> -Xmx50m -Xms50m -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -XX:+PrintGC -XX:+PrintGCDetails -XX:+UnlockExperimentalVMOptions -XX:G1LogLevel=finest -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -jar demo/jfc/Java2D/Java2Demo.jar</div><div class="line output">2017-09-21T14:20:49.177+0800: 0.405: [GC pause (G1 Evacuation Pause) (young), 0.0070815 secs]</div><div class="line output">  [Parallel Time: 4.8 ms, GC Workers: 4]</div><div class="line output">  [GC Worker Start (ms): 406.4 406.4 406.4 406.9</div><div class="line output">  Min: 406.4, Avg: 406.5, Max: 406.9, Diff: 0.5]</div><div class="line output">  [Ext Root Scanning (ms): 2.2 0.8 0.5 0.4</div><div class="line output">  Min: 0.4, Avg: 1.0, Max: 2.2, Diff: 1.8, Sum: 3.9]</div><div class="line output">  [Thread Roots (ms): 0.0 0.8 0.3 0.0</div><div class="line output">  Min: 0.0, Avg: 0.3, Max: 0.8, Diff: 0.8, Sum: 1.1]</div><div class="line output">  [StringTable Roots (ms): 0.0 0.0 0.4 0.5</div><div class="line output">  Min: 0.0, Avg: 0.2, Max: 0.5, Diff: 0.5, Sum: 0.9]</div><div class="line output">  [Universe Roots (ms): 0.0 0.0 0.0 0.0</div><div class="line output">  Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0]</div><div class="line output">  [JNI Handles Roots (ms): 0.0 0.0 0.0 0.0</div><div class="line output">  Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0]</div><div class="line output">  [ObjectSynchronizer Roots (ms): 0.0 0.0 0.0 0.0</div><div class="line output">  Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0]</div><div class="line output">  [FlatProfiler Roots (ms): 0.0 0.0 0.0 0.0</div><div class="line output">  Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0]</div><div class="line output">  [Management Roots (ms): 0.0 0.0 0.0 0.0</div><div class="line output">  Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0]</div><div class="line output">  [SystemDictionary Roots (ms): 0.0 0.0 0.0 0.0</div><div class="line output">  Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0]</div><div class="line output">  [CLDG Roots (ms): 2.2 0.0 0.0 0.0</div><div class="line output">  Min: 0.0, Avg: 0.5, Max: 2.2, Diff: 2.2, Sum: 2.2]</div><div class="line output">  [JVMTI Roots (ms): 0.0 0.0 0.0 0.0</div><div class="line output">  Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0]</div><div class="line output">  [CodeCache Roots (ms): 0.0 0.1 0.3 0.0</div><div class="line output">  Min: 0.0, Avg: 0.1, Max: 0.3, Diff: 0.3, Sum: 0.4]</div><div class="line output">  [CM RefProcessor Roots (ms): 0.0 0.0 0.0 0.0</div><div class="line output">  Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0]</div><div class="line output">  [Wait For Strong CLD (ms): 0.0 0.0 0.0 0.0</div><div class="line output">  Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0]</div><div class="line output">  [Weak CLD Roots (ms): 0.0 0.0 0.0 0.0</div><div class="line output">  Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0]</div><div class="line output">  [SATB Filtering (ms): 0.0 0.0 0.0 0.0</div><div class="line output">  Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0]</div><div class="line output">  [Update RS (ms): 0.0 0.0 0.0 0.0</div><div class="line output">  Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0]</div><div class="line output">  [Processed Buffers: 0 0 0 0</div><div class="line output">  Min: 0, Avg: 0.0, Max: 0, Diff: 0, Sum: 0]</div><div class="line output">  [Scan RS (ms): 0.0 0.0 0.0 0.0</div><div class="line output">  Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0]</div><div class="line output">  [Code Root Scanning (ms): 0.0 0.1 0.3 0.0</div><div class="line output">  Min: 0.0, Avg: 0.1, Max: 0.3, Diff: 0.3, Sum: 0.4]</div><div class="line output">  [Object Copy (ms): 2.5 3.1 3.3 3.3</div><div class="line output">  Min: 2.5, Avg: 3.1, Max: 3.3, Diff: 0.8, Sum: 12.2]</div><div class="line output">  [Termination (ms): 0.0 0.6 0.6 0.6</div><div class="line output">  Min: 0.0, Avg: 0.5, Max: 0.6, Diff: 0.6, Sum: 1.9]</div><div class="line output">  [Termination Attempts: 1 5 8 9</div><div class="line output">  Min: 1, Avg: 5.8, Max: 9, Diff: 8, Sum: 23]</div><div class="line output">  [GC Worker Other (ms): 0.0 0.0 0.0 0.0</div><div class="line output">  Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0]</div><div class="line output">  [GC Worker Total (ms): 4.7 4.7 4.7 4.3</div><div class="line output">  Min: 4.3, Avg: 4.6, Max: 4.7, Diff: 0.5, Sum: 18.4]</div><div class="line output">  [GC Worker End (ms): 411.1 411.1 411.1 411.2</div><div class="line output">  Min: 411.1, Avg: 411.1, Max: 411.2, Diff: 0.0]</div><div class="line output">  [Code Root Fixup: 0.1 ms]</div><div class="line output">  [Code Root Purge: 0.0 ms]</div><div class="line output">  [Clear CT: 0.1 ms]</div><div class="line output">  [Other: 2.1 ms]</div><div class="line output">  [Choose CSet: 0.0 ms]</div><div class="line output">  [Ref Proc: 0.4 ms]</div><div class="line output">  [Ref Enq: 0.0 ms]</div><div class="line output">  [Redirty Cards: 0.0 ms]</div><div class="line output">  [Parallel Redirty: 0.0 0.0 0.0 0.0</div><div class="line output">  Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0]</div><div class="line output">  [Redirtied Cards: 965 492 0 0</div><div class="line output">  Min: 0, Avg: 364.2, Max: 965, Diff: 965, Sum: 1457]</div><div class="line output">  [Humongous Register: 0.0 ms]</div><div class="line output">  [Humongous Total: 0]</div><div class="line output">  [Humongous Candidate: 0]</div><div class="line output">  [Humongous Reclaim: 0.0 ms]</div><div class="line output">  [Humongous Reclaimed: 0]</div><div class="line output">  [Free CSet: 0.0 ms]</div><div class="line output">  [Young Free CSet: 0.0 ms]</div><div class="line output">  [Non-Young Free CSet: 0.0 ms]</div><div class="line output">  [Eden: 14.0M(14.0M)-&gt;0.0B(13.0M) Survivors: 0.0B-&gt;2048.0K Heap: 14.0M(50.0M)-&gt;5212.0K(50.0M)]</div><div class="line output"> [Times: user=0.02 sys=0.00, real=0.01 secs]</div><div class="line output">2017-09-21T14:20:49.297+0800: 0.525: [GC pause (G1 Evacuation Pause) (young), 0.0033552 secs]</div><div class="line output">  [Parallel Time: 2.6 ms, GC Workers: 4]</div><div class="line output">  [GC Worker Start (ms): 525.3 525.4 525.4 525.4</div><div class="line output">  Min: 525.3, Avg: 525.4, Max: 525.4, Diff: 0.1]</div><div class="line output">  [Ext Root Scanning (ms): 0.7 0.3 0.3 0.3</div><div class="line output">  Min: 0.3, Avg: 0.4, Max: 0.7, Diff: 0.4, Sum: 1.6]</div><div class="line output">  [Thread Roots (ms): 0.0 0.2 0.2 0.2</div><div class="line output">  Min: 0.0, Avg: 0.1, Max: 0.2, Diff: 0.2, Sum: 0.5]</div><div class="line output">  [StringTable Roots (ms): 0.0 0.4 0.4 0.2</div><div class="line output">  Min: 0.0, Avg: 0.3, Max: 0.4, Diff: 0.4, Sum: 1.0]</div><div class="line output">  [Universe Roots (ms): 0.0 0.0 0.0 0.0</div><div class="line output">  Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0]</div><div class="line output">  [JNI Handles Roots (ms): 0.0 0.0 0.0 0.0</div><div class="line output">  Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0]</div><div class="line output">  [ObjectSynchronizer Roots (ms): 0.0 0.0 0.0 0.0</div><div class="line output">  Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0]</div><div class="line output">  [FlatProfiler Roots (ms): 0.0 0.0 0.0 0.0</div><div class="line output">  Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0]</div><div class="line output">  [Management Roots (ms): 0.0 0.0 0.0 0.0</div><div class="line output">  Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0]</div><div class="line output">  [SystemDictionary Roots (ms): 0.0 0.0 0.0 0.0</div><div class="line output">  Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0]</div><div class="line output">  [CLDG Roots (ms): 0.7 0.0 0.0 0.0</div><div class="line output">  Min: 0.0, Avg: 0.2, Max: 0.7, Diff: 0.7, Sum: 0.7]</div><div class="line output">  [JVMTI Roots (ms): 0.0 0.0 0.0 0.0</div><div class="line output">  Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0]</div><div class="line output">  [CodeCache Roots (ms): 0.4 0.4 0.5 0.9</div><div class="line output">  Min: 0.4, Avg: 0.5, Max: 0.9, Diff: 0.5, Sum: 2.2]</div><div class="line output">  [CM RefProcessor Roots (ms): 0.0 0.0 0.0 0.0</div><div class="line output">  Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0]</div><div class="line output">  [Wait For Strong CLD (ms): 0.0 0.0 0.0 0.0</div><div class="line output">  Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0]</div><div class="line output">  [Weak CLD Roots (ms): 0.0 0.0 0.0 0.0</div><div class="line output">  Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0]</div><div class="line output">  [SATB Filtering (ms): 0.0 0.0 0.0 0.0</div><div class="line output">  Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0]</div><div class="line output">  [Update RS (ms): 0.2 0.1 0.1 0.2</div><div class="line output">  Min: 0.1, Avg: 0.2, Max: 0.2, Diff: 0.1, Sum: 0.6]</div><div class="line output">  [Processed Buffers: 1 2 2 1</div><div class="line output">  Min: 1, Avg: 1.5, Max: 2, Diff: 1, Sum: 6]</div><div class="line output">  [Scan RS (ms): 0.2 0.3 0.2 0.3</div><div class="line output">  Min: 0.2, Avg: 0.2, Max: 0.3, Diff: 0.1, Sum: 1.0]</div><div class="line output">  [Code Root Scanning (ms): 0.0 0.1 0.1 0.4</div><div class="line output">  Min: 0.0, Avg: 0.1, Max: 0.4, Diff: 0.4, Sum: 0.6]</div><div class="line output">  [Object Copy (ms): 1.5 1.8 1.7 1.3</div><div class="line output">  Min: 1.3, Avg: 1.6, Max: 1.8, Diff: 0.5, Sum: 6.3]</div><div class="line output">  [Termination (ms): 0.0 0.0 0.0 0.0</div><div class="line output">  Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0]</div><div class="line output">  [Termination Attempts: 1 1 1 1</div><div class="line output">  Min: 1, Avg: 1.0, Max: 1, Diff: 0, Sum: 4]</div><div class="line output">  [GC Worker Other (ms): 0.0 0.0 0.0 0.0</div><div class="line output">  Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0]</div><div class="line output">  [GC Worker Total (ms): 2.6 2.5 2.5 2.5</div><div class="line output">  Min: 2.5, Avg: 2.5, Max: 2.6, Diff: 0.1, Sum: 10.1]</div><div class="line output">  [GC Worker End (ms): 527.9 527.9 527.9 527.9</div><div class="line output">  Min: 527.9, Avg: 527.9, Max: 527.9, Diff: 0.0]</div><div class="line output">  [Code Root Fixup: 0.1 ms]</div><div class="line output">  [Code Root Purge: 0.0 ms]</div><div class="line output">  [Clear CT: 0.2 ms]</div><div class="line output">  [Other: 0.4 ms]</div><div class="line output">  [Choose CSet: 0.0 ms]</div><div class="line output">  [Ref Proc: 0.3 ms]</div><div class="line output">  [Ref Enq: 0.0 ms]</div><div class="line output">  [Redirty Cards: 0.1 ms]</div><div class="line output">  [Parallel Redirty: 0.0 0.0 0.0 0.0</div><div class="line output">  Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0]</div><div class="line output">  [Redirtied Cards: 1919 1636 571 0</div><div class="line output">  Min: 0, Avg: 1031.5, Max: 1919, Diff: 1919, Sum: 4126]</div><div class="line output">  [Humongous Register: 0.0 ms]</div><div class="line output">  [Humongous Total: 0]</div><div class="line output">  [Humongous Candidate: 0]</div><div class="line output">  [Humongous Reclaim: 0.0 ms]</div><div class="line output">  [Humongous Reclaimed: 0]</div><div class="line output">  [Free CSet: 0.0 ms]</div><div class="line output">  [Young Free CSet: 0.0 ms]</div><div class="line output">  [Non-Young Free CSet: 0.0 ms]</div><div class="line output">  [Eden: 12.0M(6144.0K)-&gt;0.0B(25.0M) Survivors: 2048.0K-&gt;1024.0K Heap: 17.1M(50.0M)-&gt;8532.0K(50.0M)]</div><div class="line output"> [Times: user=0.01 sys=0.00, real=0.01 secs]</div><div class="line output">2017-09-21T14:20:50.101+0800: 1.329: [Full GC (System.gc()) 15M-&gt;8266K(50M), 0.0379003 secs]</div><div class="line output">  [Eden: 7168.0K(25.0M)-&gt;0.0B(25.0M) Survivors: 1024.0K-&gt;0.0B Heap: 15.5M(50.0M)-&gt;8266.1K(50.0M)], [Metaspace: 16513K-&gt;16513K(1064960K)]</div><div class="line output"> [Times: user=0.04 sys=0.00, real=0.04 secs]</div><div class="line output">2017-09-21T14:20:50.836+0800: 2.063: [Full GC (System.gc()) 9216K-&gt;8071K(50M), 0.0376095 secs]</div><div class="line output">  [Eden: 1024.0K(25.0M)-&gt;0.0B(25.0M) Survivors: 0.0B-&gt;0.0B Heap: 9216.7K(50.0M)-&gt;8072.0K(50.0M)], [Metaspace: 16554K-&gt;16554K(1064960K)]</div><div class="line output"> [Times: user=0.04 sys=0.00, real=0.04 secs]</div><div class="line output">2017-09-21T14:20:51.509+0800: 2.737: [Full GC (System.gc()) 9022K-&gt;8074K(50M), 0.0371841 secs]</div><div class="line output">  [Eden: 1024.0K(25.0M)-&gt;0.0B(25.0M) Survivors: 0.0B-&gt;0.0B Heap: 9022.6K(50.0M)-&gt;8074.5K(50.0M)], [Metaspace: 16581K-&gt;16581K(1064960K)]</div><div class="line output"> [Times: user=0.04 sys=0.00, real=0.04 secs]</div><div class="line output">2017-09-21T14:20:53.787+0800: 5.015: [Full GC (System.gc()) 9900K-&gt;8080K(50M), 0.0213002 secs]</div><div class="line output">  [Eden: 2048.0K(25.0M)-&gt;0.0B(25.0M) Survivors: 0.0B-&gt;0.0B Heap: 9900.6K(50.0M)-&gt;8080.1K(50.0M)], [Metaspace: 16636K-&gt;16636K(1064960K)]</div><div class="line output"> [Times: user=0.03 sys=0.00, real=0.02 secs]</div><div class="line output">2017-09-21T14:20:54.443+0800: 5.671: [Full GC (System.gc()) 9659K-&gt;8721K(50M), 0.0210222 secs]</div><div class="line output">  [Eden: 1024.0K(25.0M)-&gt;0.0B(24.0M) Survivors: 0.0B-&gt;0.0B Heap: 9659.7K(50.0M)-&gt;8721.5K(50.0M)], [Metaspace: 16666K-&gt;16666K(1064960K)]</div><div class="line output"> [Times: user=0.03 sys=0.00, real=0.02 secs]</div><div class="line output">2017-09-21T14:20:59.433+0800: 10.661: [Full GC (System.gc()) 10131K-&gt;8727K(50M), 0.0463835 secs]</div><div class="line output">  [Eden: 2048.0K(24.0M)-&gt;0.0B(24.0M) Survivors: 0.0B-&gt;0.0B Heap: 10131.5K(50.0M)-&gt;8727.2K(50.0M)], [Metaspace: 16790K-&gt;16790K(1064960K)]</div><div class="line output"> [Times: user=0.06 sys=0.00, real=0.05 secs]</div><div class="line output">2017-09-21T14:21:00.140+0800: 11.368: [Full GC (System.gc()) 10M-&gt;8749K(50M), 0.0198179 secs]</div><div class="line output">  [Eden: 2048.0K(24.0M)-&gt;0.0B(24.0M) Survivors: 0.0B-&gt;0.0B Heap: 10.4M(50.0M)-&gt;8749.4K(50.0M)], [Metaspace: 16951K-&gt;16951K(1064960K)]</div><div class="line output"> [Times: user=0.03 sys=0.00, real=0.02 secs]</div><div class="line output">2017-09-21T14:21:00.697+0800: 11.925: [Full GC (System.gc()) 10M-&gt;8917K(50M), 0.0282837 secs]</div><div class="line output">  [Eden: 2048.0K(24.0M)-&gt;0.0B(24.0M) Survivors: 0.0B-&gt;0.0B Heap: 10.5M(50.0M)-&gt;8917.0K(50.0M)], [Metaspace: 17346K-&gt;17346K(1064960K)]</div><div class="line output"> [Times: user=0.03 sys=0.00, real=0.03 secs]</div><div class="line output">2017-09-21T14:21:01.348+0800: 12.575: [Full GC (System.gc()) 11M-&gt;8947K(50M), 0.0319808 secs]</div><div class="line output">  [Eden: 3072.0K(24.0M)-&gt;0.0B(24.0M) Survivors: 0.0B-&gt;0.0B Heap: 11.5M(50.0M)-&gt;8947.9K(50.0M)], [Metaspace: 17549K-&gt;17549K(1064960K)]</div><div class="line output"> [Times: user=0.04 sys=0.00, real=0.04 secs]</div><div class="line output">Heap</div><div class="line output"> garbage-first heap total 51200K, used 13043K [0x00000000fce00000, 0x00000000fcf00190, 0x0000000100000000]</div><div class="line output">  region size 1024K, 5 young (5120K), 0 survivors (0K)</div><div class="line output"> Metaspace used 17791K, capacity 18052K, committed 18176K, reserved 1064960K</div><div class="line output">  class space used 2405K, capacity 2479K, committed 2560K, reserved 1048576K</div></pre></td></tr></table></figure>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol>
<li><a href="http://www.oracle.com/technetwork/tutorials/tutorials-1876574.html" target="_blank" rel="external">getting started with the G1 garbage collector</a></li>
<li><a href="http://blog.csdn.net/renfufei/article/details/41897113" target="_blank" rel="external">G1垃圾收集器入门</a></li>
<li><a href="https://blogs.oracle.com/poonam/understanding-g1-gc-logs" target="_blank" rel="external">Understanding G1 GC Logs</a></li>
<li><a href="/blog/java/2016/10/13/java-jvm-and-gc.html">java jvm and gc</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h2&gt;&lt;p&gt;This tutorial covers the basics of how to use the G1 garbage collector and how it can be used with the Hotspot JVM. You will learn how the G1 collector functions internally, the key command line switches for using G1, and options for logging its operation.&lt;/p&gt;
&lt;h2 id=&quot;Java-Technology-and-the-JVM&quot;&gt;&lt;a href=&quot;#Java-Technology-and-the-JVM&quot; class=&quot;headerlink&quot; title=&quot;Java Technology and the JVM&quot;&gt;&lt;/a&gt;Java Technology and the JVM&lt;/h2&gt;&lt;h3 id=&quot;Java-Overview&quot;&gt;&lt;a href=&quot;#Java-Overview&quot; class=&quot;headerlink&quot; title=&quot;Java Overview&quot;&gt;&lt;/a&gt;Java Overview&lt;/h3&gt;&lt;p&gt;Java is a programming language and computing platform first released by Sun Microsystems in 1995. It is the underlying technology that powers Java programs including utilities, games, and business applications. Java runs on more than 850 million personal computers worldwide, and on billions of devices worldwide, including mobile and TV devices. Java is composed of a number of key components that, as a whole, create the Java platform.&lt;/p&gt;
&lt;h3 id=&quot;Java-Runtime-Edition&quot;&gt;&lt;a href=&quot;#Java-Runtime-Edition&quot; class=&quot;headerlink&quot; title=&quot;Java Runtime Edition&quot;&gt;&lt;/a&gt;Java Runtime Edition&lt;/h3&gt;&lt;p&gt;When you download Java, you get the Java Runtime Environment (JRE). The JRE consists of the Java Virtual Machine (JVM), Java platform core classes, and supporting Java platform libraries. All three are required to run Java applications on your computer. With Java 7, Java applications run as desktop applications from the operating system, as a desktop application but installed from the Web using Java Web Start, or as a Web Embedded application in a browser (using JavaFX).&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://www.4e00.com/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>tomcat应用中用户session被重置的问题</title>
    <link href="https://www.4e00.com/linux/2017/09/20/user-session-reset-in-tomcat-webapp.html"/>
    <id>https://www.4e00.com/linux/2017/09/20/user-session-reset-in-tomcat-webapp.html</id>
    <published>2017-09-20T11:53:06.000Z</published>
    <updated>2017-09-22T01:36:27.449Z</updated>
    
    <content type="html"><![CDATA[<p>一个tomcat应用服务器中只有一个webapp项目名为app，tomcat前面有一个反向代理服务器nginx，nginx将所有访问<code>http://www.example.com/</code>下的请求转发给后台的tomcat应用服务器：<code>http://www.example.com/app/</code>，具体配置如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">location / &#123;</div><div class="line">    rewrite ^/(.*)$ /app/$1;</div><div class="line">    break;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当前用户已经在<code>http://www.example.com/app/</code>中登录，客户端cookie写入成功，因为是app写入的cookie，所以其作用路径即<code>path=/app/</code>。</p>
<p>当用户访问<code>http://www.example.com/app/some/page</code>页面时，当前的用户session就被重置了，而访问其他页面都是正确的。</p>
<p>检查所在页面的代码，发现页面上有个图片链接因为远程获取用户头像的数据不对，写入的地址变成<code>src=&quot;/0&quot;</code>，正确应该是用户的头像地址，就是因为访问了这个错误的地址<code>http://www.example.com/0</code>导致用户的session被重置了。</p>
<a id="more"></a>
<h2 id="问题重现"><a href="#问题重现" class="headerlink" title="问题重现"></a>问题重现</h2><p>用户在请求链接<code>http://www.example.com/app/some/page</code>时的请求头是正常的携带了Cookie信息:</p>
<h3 id="Request-Headers"><a href="#Request-Headers" class="headerlink" title="Request Headers"></a>Request Headers</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">           Host: www.example.com</div><div class="line">     User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.78 Safari/537.36</div><div class="line">         Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</div><div class="line">Accept-Encoding: gzip, deflate</div><div class="line">Accept-Language: en-US,en;q=0.8,zh;q=0.6,zh-CN;q=0.4,zh-TW;q=0.2,ja;q=0.2,sv;q=0.2,hu;q=0.2</div><div class="line">         Cookie: JSESSIONID=f6fdc154-2bd5-45ad-b363-98226db47baf</div></pre></td></tr></table></figure>
<p>但是页面里那个图片引发的请求地址<code>http://www.example.com/0</code>是不存在的，其请求是从当前域名根目录开始访问的，域名根目录下是没有cookie的，因为<code>JSESSIONID</code>是写在<code>/app/</code>这个<code>path</code>下的。其请求头如下，相比上面那个请求少了一个<code>Cookie</code>头信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">           Host: www.example.com</div><div class="line">         Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</div><div class="line">Accept-Encoding: gzip, deflate</div><div class="line">Accept-Language: en-US,en;q=0.8,zh;q=0.6,zh-CN;q=0.4,zh-TW;q=0.2,ja;q=0.2,sv;q=0.2,hu;q=0.2</div><div class="line">     User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.78 Safari/537.36</div></pre></td></tr></table></figure>
<p>因为nginx上url重写的规则如下：</p>
<blockquote>
<p>rewrite ^/(.*)$ /app/$1;</p>
</blockquote>
<p>根据这个重写规则，nginx直接在服务端转发请求<code>/0</code>给tomcat中的应用，即<code>/app/0</code>，这个操作不会经过浏览器<code>301</code>或者<code>302</code>跳转，tomcat发现请求头里没有Cookie，就会在Response头里加上<code>Set-Cookie</code>字段，这样就导致当前用户的session被重置了，响应头内容如下：</p>
<h3 id="Response-Headers"><a href="#Response-Headers" class="headerlink" title="Response Headers"></a>Response Headers</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">      Connection: keep-alive</div><div class="line">Content-Language: en</div><div class="line">    Content-Type: text/html;charset=ISO-8859-1</div><div class="line">            Date: Wed, 20 Sep 2017 05:36:11 GMT</div><div class="line">          Server: nginx/1.8.0</div><div class="line">      Set-Cookie: JSESSIONID=92afd578-f3b1-425f-a9d1-72ee4b1bfd7b; Path=/app/; HttpOnly</div></pre></td></tr></table></figure>
<h2 id="问题修复"><a href="#问题修复" class="headerlink" title="问题修复"></a>问题修复</h2><p>这个问题主要是因为服务器内部转发的请求<code>/app/0</code>并没有将客户端的Cookie信息带过去造成的，因此不能直接在服务器端将url重写后转发给tomcat服务器。</p>
<p>将nginx的配置部分稍作改动，将请求变成<code>301</code>重定向：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">rewrite ^/(.*)$ /app/$1 permanent;</div><div class="line">break;</div></pre></td></tr></table></figure>
<p>或者是<code>302</code>重定向：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">rewrite ^/(.*)$ /app/$1 redirect;</div><div class="line">break;</div></pre></td></tr></table></figure>
<p>使用这个配置，nginx会重定向到客户端浏览器进行一次<code>301</code>或者<code>302</code>跳转操作，这时浏览器再去访问<code>http://www.example.com/app/0</code>时，会携带本地的Cookie发送到服务器端。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">           Host: www.example.com</div><div class="line">     User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.78 Safari/537.36</div><div class="line">         Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</div><div class="line">Accept-Encoding: gzip, deflate</div><div class="line">Accept-Language: en-US,en;q=0.8,zh;q=0.6,zh-CN;q=0.4,zh-TW;q=0.2,ja;q=0.2,sv;q=0.2,hu;q=0.2</div><div class="line">         Cookie: JSESSIONID=92afd578-f3b1-425f-a9d1-72ee4b1bfd7b</div></pre></td></tr></table></figure>
<p>服务器端tomcat会收到浏览器重定向后的请求，并正确收到Cookie，就不会再重置用户session。</p>
<blockquote>
<p>rewrite ^/(.<em>)$ /app/$1;<br>rewrite ^/(.</em>)$ /app/$1 redirect;</p>
</blockquote>
<p>以上二者的区别就在于加了redirect指令会让浏览器多发起了一次请求，进行<code>302</code>重定向，不加指令则直接在服务器内部进行了URL重写转发，不会让浏览器重定向。</p>
<h2 id="rewrite-规则"><a href="#rewrite-规则" class="headerlink" title="rewrite 规则"></a>rewrite 规则</h2><p>rewrite功能就是，使用nginx提供的全局变量或自己设置的变量，结合正则表达式和标志位实现url重写以及重定向，这里要区别重写与重定向的作用是不同的。语法形式如下：</p>
<blockquote>
<p>Syntax:   rewrite regex replacement [flag];<br>Default:  —<br>Context:  server, location, if</p>
</blockquote>
<p>表面看rewrite和location功能有点像，都能实现跳转，主要区别在于rewrite是在同一域名内更改获取资源的路径，而location是对一类路径做控制访问或反向代理，可以proxy_pass到其他机器。很多情况下rewrite也会写在location里，它们的执行顺序是：</p>
<ol>
<li>执行server块的rewrite指令</li>
<li>执行location匹配</li>
<li>执行选定的location中的rewrite指令</li>
</ol>
<p>如果其中某步URI被重写，则重新循环执行1-3，直到找到真实存在的文件；循环超过10次，则返回<code>500 Internal Server Error</code>错误。</p>
<h3 id="rewrite-flag-标志位"><a href="#rewrite-flag-标志位" class="headerlink" title="rewrite flag 标志位"></a>rewrite flag 标志位</h3><ol>
<li>last: 停止处理这次的rewrite指令集，根据修改之后的URI重新查找匹配的location。<ul>
<li>stops processing the current set of ngx_http_rewrite_module directives and starts a search for a new location matching the changed URI;</li>
</ul>
</li>
<li>break: 停止执行当前虚拟主机的后续rewrite指令集。<ul>
<li>stops processing the current set of ngx_http_rewrite_module directives as with the break directive;</li>
</ul>
</li>
<li>redirect: 返回302临时重定向，地址栏会显示跳转后的地址。<ul>
<li>returns a temporary redirect with the 302 code; used if a replacement string does not start with &quot;http://&quot;, &quot;https://&quot;, or &quot;$scheme&quot;;</li>
</ul>
</li>
<li>permanent: 返回301永久重定向，地址栏会显示转后的地址。<ul>
<li>returns a permanent redirect with the 301 code.</li>
</ul>
</li>
</ol>
<h3 id="last-和-break-区别"><a href="#last-和-break-区别" class="headerlink" title="last 和 break 区别"></a>last 和 break 区别</h3><ol>
<li>last一般写在server和if中，而break一般使用在location中。</li>
<li>last不终止重写后的url匹配，即新的url会再从server和location开始进行下一轮的匹配流程，而break终止重写后的匹配。</li>
<li>break和last都能中止当前rewrite指令集的匹配。</li>
<li>编程语言中的continue和break的区别。</li>
</ol>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol>
<li><a href="http://nginx.org/en/docs/http/ngx_http_rewrite_module.html" target="_blank" rel="external">Module ngx_http_rewrite_module</a></li>
<li><a href="http://seanlook.com/2015/05/17/nginx-location-rewrite/" target="_blank" rel="external">nginx配置location总结及rewrite规则写法</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个tomcat应用服务器中只有一个webapp项目名为app，tomcat前面有一个反向代理服务器nginx，nginx将所有访问&lt;code&gt;http://www.example.com/&lt;/code&gt;下的请求转发给后台的tomcat应用服务器：&lt;code&gt;http://www.example.com/app/&lt;/code&gt;，具体配置如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;location / &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    rewrite ^/(.*)$ /app/$1;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    break;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当前用户已经在&lt;code&gt;http://www.example.com/app/&lt;/code&gt;中登录，客户端cookie写入成功，因为是app写入的cookie，所以其作用路径即&lt;code&gt;path=/app/&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;当用户访问&lt;code&gt;http://www.example.com/app/some/page&lt;/code&gt;页面时，当前的用户session就被重置了，而访问其他页面都是正确的。&lt;/p&gt;
&lt;p&gt;检查所在页面的代码，发现页面上有个图片链接因为远程获取用户头像的数据不对，写入的地址变成&lt;code&gt;src=&amp;quot;/0&amp;quot;&lt;/code&gt;，正确应该是用户的头像地址，就是因为访问了这个错误的地址&lt;code&gt;http://www.example.com/0&lt;/code&gt;导致用户的session被重置了。&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="https://www.4e00.com/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>concurrency vs. parallelism</title>
    <link href="https://www.4e00.com/linux/2017/09/19/concurrency-vs-parallelism.html"/>
    <id>https://www.4e00.com/linux/2017/09/19/concurrency-vs-parallelism.html</id>
    <published>2017-09-19T13:12:38.000Z</published>
    <updated>2017-09-21T00:46:10.343Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Concurrency-vs-Parallelism"><a href="#Concurrency-vs-Parallelism" class="headerlink" title="Concurrency vs. Parallelism"></a>Concurrency vs. Parallelism</h2><p><code>Concurrency</code>和<code>Parallelism</code>是有关系但却又是不同的2个概念：</p>
<ol>
<li>Concurrency: 并发，多个线程同时处理多个任务，多个线程之间有状态共享或者资源共享。<ul>
<li>如2个线程竞争CPU。</li>
<li>如2个线程竞争同一个对象锁。</li>
<li>多个GC线程垃圾回收时，对可回收对象进行并发标记，最后并发清理。</li>
<li>并发相对于<code>Serial</code>执行而言，如Serial GC回收。</li>
<li>可以是单核CPU上进行多线程并发执行。</li>
</ul>
</li>
<li>Parallelism: 并行，多个线程各做各的事情，多线程间互相间无共享状态。<ul>
<li>一个大文件被切分成10个小文件，然后对这个10个小文件并行分析处理。</li>
<li>Linus Torvalds还专门在吐槽<a href="https://www.realworldtech.com/forum/?threadid=146066&amp;curpostid=146227" target="_blank" rel="external">并行就是未来</a>时提到过，并行计算在GPU图形处理和服务器端上是有用的。</li>
<li>并行重点在于不同线程之间的独立性，无关性。</li>
<li>必须要求是多核CPU。</li>
</ul>
</li>
</ol>
<a id="more"></a>
<h2 id="关于并行计算的一些观点"><a href="#关于并行计算的一些观点" class="headerlink" title="关于并行计算的一些观点"></a>关于并行计算的一些观点</h2><h3 id="Rob-Pike"><a href="#Rob-Pike" class="headerlink" title="Rob Pike"></a>Rob Pike</h3><p>Rob Pike在他的演讲-<a href="https://www.4e00.com/tools/concurrency-parallelism/concur.html">Concurrency is not Parallelism</a>中讨论了二者的关系和区别，最后结论摘录如下：</p>
<h4 id="Difference"><a href="#Difference" class="headerlink" title="Difference"></a>Difference</h4><ol>
<li>Concurrency is about dealing with lots of things at once.</li>
<li>Parallelism is about doing lots of things at once.</li>
<li>Not the same, but related.</li>
<li>One is about structure, one is about execution.</li>
<li>Concurrency provides a way to structure a solution to solve a problem that may (but not necessarily) be parallelizable.</li>
</ol>
<h4 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h4><ol>
<li>Concurrency is powerful.</li>
<li>Concurrency is not parallelism.</li>
<li>Concurrency enables parallelism.</li>
<li>Concurrency makes parallelism (and scaling and everything else) easy.</li>
</ol>
<h3 id="Jakob-Jenkov"><a href="#Jakob-Jenkov" class="headerlink" title="Jakob Jenkov"></a>Jakob Jenkov</h3><p>Concurrency is related to how an application handles multiple tasks it works on. An application may process one task at at time (sequentially) or work on multiple tasks at the same time (concurrently).</p>
<p>Parallelism on the other hand, is related to how an application handles each individual task. An application may process the task serially from start to end, or split the task up into subtasks which can be completed in parallel.</p>
<p>An application can be concurrent, but not parallel. This means that it processes more than one task at the same time, but the tasks are not broken down into subtasks.</p>
<p>An application can also be parallel but not concurrent. This means that the application only works on one task at a time, and this task is broken down into subtasks which can be processed in parallel.</p>
<p>Additionally, an application can be neither concurrent nor parallel. This means that it works on only one task at a time, and the task is never broken down into subtasks for parallel execution.</p>
<h3 id="Linus-Torvalds"><a href="#Linus-Torvalds" class="headerlink" title="Linus Torvalds"></a>Linus Torvalds</h3><p>I can imagine people actually using 60 cores in the server space, yes. I don&#39;t think we&#39;ll necessarily see it happen on a huge scale, though. It&#39;s probably more effective to make bigger caches and integrate more of the IO on the server side too.</p>
<p>On the client side, there are certainly still workstation loads etc that can use 16 cores, and I guess graphics professionals will be able to do their photoshop and video editing faster. But that&#39;s a pretty small market in the big picture. There&#39;s a reason why desktops are actually shrinking.</p>
<p>So the bulk of the market is probably more in that &quot;four cores and lots of integration, and make it cheap and low-power&quot; market.</p>
<p>But hey, predicting is hard. Especially the future. We&#39;ll see.</p>
<h3 id="haskell-org"><a href="#haskell-org" class="headerlink" title="haskell.org"></a>haskell.org</h3><p>The term Parallelism refers to techniques to make programs faster by performing several computations in parallel. This requires hardware with multiple processing units. In many cases the sub-computations are of the same structure, but this is not necessary. Graphic computations on a GPU are parallelism. Key problem of parallelism is to reduce data dependencies in order to be able to perform computations on independent computation units with minimal communication between them. To this end it can be even an advantage to do the same computation twice on different units.</p>
<p>The term Concurrency refers to techniques that make program more usable. Concurrency can be implemented and is used a lot on single processing units, nonetheless it may benefit from multiple processing units with respect to speed. If an operating system is called a multi-tasking operating system, this is a synonym for supporting concurrency. If you can load multiple documents simultaneously in the tabs of your browser and you can still open menus and perform more actions, this is concurrency.</p>
<p>If you run distributed-net computations in the background while working with interactive applications in the foreground, that is concurrency. On the other hand dividing a task into packets that can be computed via distributed-net clients, this is parallelism.</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol>
<li><a href="https://www.4e00.com/tools/concurrency-parallelism/concur.html">Concurrency is not Parallelism - Rob Pike</a></li>
<li><a href="https://stackoverflow.com/questions/1050222/concurrency-vs-parallelism-what-is-the-difference" target="_blank" rel="external">Concurrency vs Parallelism - What is the difference?</a></li>
<li><a href="https://softwareengineering.stackexchange.com/questions/190719/the-difference-between-concurrent-and-parallel-execution" target="_blank" rel="external">The difference between concurrent and parallel execution?</a></li>
<li><a href="http://tutorials.jenkov.com/java-concurrency/concurrency-vs-parallelism.html" target="_blank" rel="external">Concurrency vs. Parallelism</a></li>
<li><a href="https://wiki.haskell.org/Parallelism_vs._Concurrency" target="_blank" rel="external">Parallelism vs. Concurrency</a></li>
<li><a href="https://blog.golang.org/concurrency-is-not-parallelism" target="_blank" rel="external">Concurrency is not Parallelism</a></li>
<li><a href="http://highscalability.com/blog/2014/12/31/linus-the-whole-parallel-computing-is-the-future-is-a-bunch.html" target="_blank" rel="external">Linus: The Whole &quot;Parallel Computing Is The Future&quot; Is A Bunch Of Crock</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Concurrency-vs-Parallelism&quot;&gt;&lt;a href=&quot;#Concurrency-vs-Parallelism&quot; class=&quot;headerlink&quot; title=&quot;Concurrency vs. Parallelism&quot;&gt;&lt;/a&gt;Concurrency vs. Parallelism&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Concurrency&lt;/code&gt;和&lt;code&gt;Parallelism&lt;/code&gt;是有关系但却又是不同的2个概念：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Concurrency: 并发，多个线程同时处理多个任务，多个线程之间有状态共享或者资源共享。&lt;ul&gt;
&lt;li&gt;如2个线程竞争CPU。&lt;/li&gt;
&lt;li&gt;如2个线程竞争同一个对象锁。&lt;/li&gt;
&lt;li&gt;多个GC线程垃圾回收时，对可回收对象进行并发标记，最后并发清理。&lt;/li&gt;
&lt;li&gt;并发相对于&lt;code&gt;Serial&lt;/code&gt;执行而言，如Serial GC回收。&lt;/li&gt;
&lt;li&gt;可以是单核CPU上进行多线程并发执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Parallelism: 并行，多个线程各做各的事情，多线程间互相间无共享状态。&lt;ul&gt;
&lt;li&gt;一个大文件被切分成10个小文件，然后对这个10个小文件并行分析处理。&lt;/li&gt;
&lt;li&gt;Linus Torvalds还专门在吐槽&lt;a href=&quot;https://www.realworldtech.com/forum/?threadid=146066&amp;amp;curpostid=146227&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;并行就是未来&lt;/a&gt;时提到过，并行计算在GPU图形处理和服务器端上是有用的。&lt;/li&gt;
&lt;li&gt;并行重点在于不同线程之间的独立性，无关性。&lt;/li&gt;
&lt;li&gt;必须要求是多核CPU。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="linux" scheme="https://www.4e00.com/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>report javascript error to server</title>
    <link href="https://www.4e00.com/javascript/2017/09/18/report-javascript-error-to-server.html"/>
    <id>https://www.4e00.com/javascript/2017/09/18/report-javascript-error-to-server.html</id>
    <published>2017-09-18T14:08:25.000Z</published>
    <updated>2017-09-25T01:50:17.665Z</updated>
    
    <content type="html"><![CDATA[<p>当JavaScript运行时错误（包括语法错误）发生时，window会触发一个<code>ErrorEvent</code>接口的error事件，并执行<code>window.onerror()</code>，<code>ErrorEvent</code>接口的属性和方法可以参考下面截图。</p>
<p>当一项资源（如<code>&lt;img&gt;</code>或<code>&lt;script&gt;</code>）加载失败，加载资源的元素会触发一个<code>Event</code>接口的error事件，并执行该元素上的<code>onerror()</code>处理函数。这些error事件不会向上冒泡到window，不过在部分浏览器如Firefox中能被<code>window.addEventListener</code>捕获一次。</p>
<p>加载一个全局的error事件处理函数可用于自动收集错误报告。</p>
<p>由于历史原因，<code>window.onerror</code>和<code>element.onerror</code>接受不同的参数。</p>
<blockquote>
<p>window.onerror = function(message, source, lineno, colno, error) { ... }<br>element.onerror = function(event) { ... }</p>
</blockquote>
<p>JavaScript因为手机浏览器兼容性的问题，或者用户数据和状态问题导致异常，客户端运行时报错，服务器端有时没有任何错误信息，对bug查找和修复非常不方便，所以将客户端的JavaScript运行异常捕获并上传到后台服务器日志中，并且将错误和用户的会话关联上，可以明确知道哪个用户的手机上抛出了什么错误，便于问题排查。</p>
<h2 id="测试-window-onerror-捕获异常"><a href="#测试-window-onerror-捕获异常" class="headerlink" title="测试 window.onerror 捕获异常"></a>测试 window.onerror 捕获异常</h2><p>客户端javascript的异常可以统一由<code>window.onerror</code>进行捕获，并且标准草案定义的也是<code>window.onerror</code>，一般不用<code>window.addEventListener</code>或<code>window.attachEvent</code>的形式去监听<code>window.onerror</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> fn = <span class="built_in">window</span>.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</div><div class="line">    <span class="comment">// 函数中返回 return true，错误便不会暴露到控制台中。</span></div><div class="line">&#125;;</div><div class="line"><span class="comment">// 多次注册 error 事件，不会重复执行多个回调</span></div><div class="line"><span class="comment">// window.onerror 和 addEventListener 都执行了，并只执行了一次</span></div><div class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"error"</span>, fn);</div><div class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"error"</span>, fn);</div><div class="line"></div><div class="line"><span class="built_in">window</span>.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">errorMessage, scriptURI, lineNumber, columnNumber, error</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</div><div class="line">    <span class="keyword">if</span> (error) &#123;</div><div class="line">        <span class="comment">// 标准草案实现</span></div><div class="line">        <span class="built_in">console</span>.log(error);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">console</span>.log(&#123;<span class="attr">message</span>: errorMessage, <span class="attr">script</span>: scriptURI, <span class="attr">line</span>: lineNumber, <span class="attr">column</span>: columnNumber&#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>如上代码注释说明，多次注册error事件，不会重复执行多个回调，<code>window.onerror</code>和<code>window.addEventListener</code>都执行了，并只执行了一次。可以访问此<a href="https://www.4e00.com/tools/window-onerror.html">测试链接</a>查看错误信息，源码截图如下：</p>
<img src="/blog/img/web/js/window-onerror-source.png" class="image-lg" title="[window-onerror-source.png]">
<p>错误截图如下：</p>
<img src="/blog/img/web/js/window-onerror-console.png" class="image-lg" title="[window-onerror-console.png]">
<h2 id="后台应用接收异常并记录日志"><a href="#后台应用接收异常并记录日志" class="headerlink" title="后台应用接收异常并记录日志"></a>后台应用接收异常并记录日志</h2><p>需要注意上传的error对象需要经过<code>encodeURIComponent()</code>方法进行转义，因为url中包括了一些特殊字符如<code>{}</code>会导致tomcat抛出如下异常而不能正常完成请求并记录日志：</p>
<blockquote>
<p>Note: further occurrences of HTTP header parsing errors will be logged at DEBUG level.<br>java.lang.IllegalArgumentException: Invalid character found in the request target. The valid characters are defined in RFC 7230 and RFC 3986</p>
</blockquote>
<h3 id="客户端JavaScript代码"><a href="#客户端JavaScript代码" class="headerlink" title="客户端JavaScript代码"></a>客户端JavaScript代码</h3><p>如下代码一般放在一个全局通用的JavaScript文件中，页面中引入这个JavaScript文件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="built_in">window</span>.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">errorMessage, scriptURI, lineNumber, columnNumber, error</span>) </span>&#123;</div><div class="line">    <span class="keyword">new</span> Image().src = <span class="string">"/js/error/record?error="</span> + <span class="built_in">encodeURIComponent</span>(<span class="built_in">JSON</span>.stringify(&#123;</div><div class="line">        message: errorMessage,</div><div class="line">        script: scriptURI,</div><div class="line">        line: lineNumber,</div><div class="line">        column: columnNumber</div><div class="line">    &#125;));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="后台应用示例"><a href="#后台应用示例" class="headerlink" title="后台应用示例"></a>后台应用示例</h3><p>下面后台应用以springmvc为例，客户端JavaScript通过<code>/js/error/record?error=</code>链接上报异常信息，服务器中记录异常信息到日志文件中，并重定向到一张图片地址即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/js/error"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavascriptErrorRecordController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(getClass());</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/record"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">record</span><span class="params">(String error)</span> </span>&#123;</div><div class="line">        <span class="comment">// 服务器端日志中记录异常信息的json，并且关联到发生异常的用户上</span></div><div class="line">        logger.warn(<span class="string">"javascript error for user : &#123;&#125;, and content : &#123;&#125;"</span>, session.getAttribute(<span class="string">"userId"</span>), error);</div><div class="line">        <span class="comment">// should be 1px png</span></div><div class="line">        <span class="keyword">return</span> <span class="string">"http://www.baidu.com/img/bd_logo1.png"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="CORS问题"><a href="#CORS问题" class="headerlink" title="CORS问题"></a>CORS问题</h2><p>如果当前网页引用另一个域名的JavaScript文件中有脚本错误，当前域下只能看到<code>Script error.</code>这个提示信息，却并不能像访问本域的JavaScript脚本那样，会抛出错误的详细信息。</p>
<img src="/blog/img/web/js/script-error.png" title="[script-error.png]">
<h3 id="CORS问题处理"><a href="#CORS问题处理" class="headerlink" title="CORS问题处理"></a>CORS问题处理</h3><ol>
<li>在脚本引用标签中必须设置<code>crossorigin</code>属性。</li>
<li>同时服务器端需要设置<code>Access-Control-Allow-Origin</code>的响应头。</li>
</ol>
<p>以上二者需要同时满足，不然都会扔出<code>Script error.</code>这个提示信息，关于CORS问题更详细的说明可以参考下面几个链接。</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/GlobalEventHandlers/onerror" target="_blank" rel="external">GlobalEventHandlers.onerror</a></li>
<li><a href="http://www.cnblogs.com/hustskyking/p/fe-monitor.html" target="_blank" rel="external">前端代码异常日志收集与监控</a></li>
<li><a href="http://www.cnblogs.com/cathsfz/p/how-to-capture-and-analyze-javascript-error.html" target="_blank" rel="external">如何捕获和分析 JavaScript Error</a></li>
<li><a href="http://www.cnblogs.com/luminji/p/3617334.html" target="_blank" rel="external">JavaScript 中的异常处理</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当JavaScript运行时错误（包括语法错误）发生时，window会触发一个&lt;code&gt;ErrorEvent&lt;/code&gt;接口的error事件，并执行&lt;code&gt;window.onerror()&lt;/code&gt;，&lt;code&gt;ErrorEvent&lt;/code&gt;接口的属性和方法可以参考下面截图。&lt;/p&gt;
&lt;p&gt;当一项资源（如&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;或&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;）加载失败，加载资源的元素会触发一个&lt;code&gt;Event&lt;/code&gt;接口的error事件，并执行该元素上的&lt;code&gt;onerror()&lt;/code&gt;处理函数。这些error事件不会向上冒泡到window，不过在部分浏览器如Firefox中能被&lt;code&gt;window.addEventListener&lt;/code&gt;捕获一次。&lt;/p&gt;
&lt;p&gt;加载一个全局的error事件处理函数可用于自动收集错误报告。&lt;/p&gt;
&lt;p&gt;由于历史原因，&lt;code&gt;window.onerror&lt;/code&gt;和&lt;code&gt;element.onerror&lt;/code&gt;接受不同的参数。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;window.onerror = function(message, source, lineno, colno, error) { ... }&lt;br&gt;element.onerror = function(event) { ... }&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;JavaScript因为手机浏览器兼容性的问题，或者用户数据和状态问题导致异常，客户端运行时报错，服务器端有时没有任何错误信息，对bug查找和修复非常不方便，所以将客户端的JavaScript运行异常捕获并上传到后台服务器日志中，并且将错误和用户的会话关联上，可以明确知道哪个用户的手机上抛出了什么错误，便于问题排查。&lt;/p&gt;
&lt;h2 id=&quot;测试-window-onerror-捕获异常&quot;&gt;&lt;a href=&quot;#测试-window-onerror-捕获异常&quot; class=&quot;headerlink&quot; title=&quot;测试 window.onerror 捕获异常&quot;&gt;&lt;/a&gt;测试 window.onerror 捕获异常&lt;/h2&gt;&lt;p&gt;客户端javascript的异常可以统一由&lt;code&gt;window.onerror&lt;/code&gt;进行捕获，并且标准草案定义的也是&lt;code&gt;window.onerror&lt;/code&gt;，一般不用&lt;code&gt;window.addEventListener&lt;/code&gt;或&lt;code&gt;window.attachEvent&lt;/code&gt;的形式去监听&lt;code&gt;window.onerror&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fn = &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.onerror = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 函数中返回 return true，错误便不会暴露到控制台中。&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 多次注册 error 事件，不会重复执行多个回调&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// window.onerror 和 addEventListener 都执行了，并只执行了一次&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.addEventListener(&lt;span class=&quot;string&quot;&gt;&quot;error&quot;&lt;/span&gt;, fn);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.addEventListener(&lt;span class=&quot;string&quot;&gt;&quot;error&quot;&lt;/span&gt;, fn);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.onerror = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;errorMessage, scriptURI, lineNumber, columnNumber, error&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (error) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 标准草案实现&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(error);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&amp;#123;&lt;span class=&quot;attr&quot;&gt;message&lt;/span&gt;: errorMessage, &lt;span class=&quot;attr&quot;&gt;script&lt;/span&gt;: scriptURI, &lt;span class=&quot;attr&quot;&gt;line&lt;/span&gt;: lineNumber, &lt;span class=&quot;attr&quot;&gt;column&lt;/span&gt;: columnNumber&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://www.4e00.com/categories/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>mysql deadlock when concurrent insert</title>
    <link href="https://www.4e00.com/mysql/2017/09/16/mysql-deadlock-when-concurrent-insert.html"/>
    <id>https://www.4e00.com/mysql/2017/09/16/mysql-deadlock-when-concurrent-insert.html</id>
    <published>2017-09-16T00:04:08.000Z</published>
    <updated>2017-09-21T00:46:10.343Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL中innodb引擎的锁有多种，具体可查看<a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-locking.html#innodb-next-key-locks" target="_blank" rel="external">官方文档</a>，这次碰到的死锁与<code>Next-Key Locks</code>没有关系，与<code>Record Locks</code>和<code>Gap Locks</code>有关，下面引用innodb锁的部分文档说明。</p>
<h2 id="Shared-and-Exclusive-Locks"><a href="#Shared-and-Exclusive-Locks" class="headerlink" title="Shared and Exclusive Locks"></a>Shared and Exclusive Locks</h2><blockquote>
<p>InnoDB implements standard row-level locking where there are two types of locks, shared (S) locks and exclusive (X) locks.</p>
<ul>
<li>A shared (S) lock permits the transaction that holds the lock to read a row.</li>
<li>An exclusive (X) lock permits the transaction that holds the lock to update or delete a row.</li>
</ul>
</blockquote>
<a id="more"></a>
<h2 id="Intention-Locks"><a href="#Intention-Locks" class="headerlink" title="Intention Locks"></a>Intention Locks</h2><blockquote>
<p>InnoDB supports multiple granularity locking which permits coexistence of row-level locks and locks on entire tables. To make locking at multiple granularity levels practical, additional types of locks called intention locks are used. Intention locks are table-level locks in InnoDB that indicate which type of lock (shared or exclusive) a transaction requires later for a row in that table. There are two types of intention locks used in InnoDB (assume that transaction T has requested a lock of the indicated type on table t):</p>
<ul>
<li>Intention shared (IS): Transaction T intends to set S locks on individual rows in table t.</li>
<li>Intention exclusive (IX): Transaction T intends to set X locks on those rows.</li>
</ul>
<p>For example, <code>SELECT ... LOCK IN SHARE MODE</code> sets an <code>IS</code> lock and <code>SELECT ... FOR UPDATE</code> sets an <code>IX</code> lock.</p>
</blockquote>
<h2 id="Record-Locks"><a href="#Record-Locks" class="headerlink" title="Record Locks"></a>Record Locks</h2><blockquote>
<p>A record lock is a lock on an index record. For example, SELECT c1 FROM t WHERE c1 = 10 FOR UPDATE; prevents any other transaction from inserting, updating, or deleting rows where the value of t.c1 is 10.</p>
<p>Record locks always lock index records, even if a table is defined with no indexes. For such cases, InnoDB creates a hidden clustered index and uses this index for record locking. See Section <a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-index-types.html" target="_blank" rel="external">14.8.2.1</a>, &quot;Clustered and Secondary Indexes&quot;.</p>
<p>Transaction data for a record lock appears similar to the following in SHOW ENGINE INNODB STATUS and InnoDB monitor output:</p>
<p>RECORD LOCKS space id 58 page no 3 n bits 72 index <code>PRIMARY</code> of table test.t trx id 10078 lock_mode X locks rec but not gap<br>Record lock, heap no 2 PHYSICAL RECORD: n_fields 3; compact format; info bits 0<br> 0: len 4; hex 8000000a; asc     ;;<br> 1: len 6; hex 00000000274f; asc     &#39;O;;<br> 2: len 7; hex b60000019d0110; asc        ;;</p>
</blockquote>
<h2 id="Gap-Locks"><a href="#Gap-Locks" class="headerlink" title="Gap Locks"></a>Gap Locks</h2><blockquote>
<p>A gap lock is a lock on a gap between index records, or a lock on the gap before the first or after the last index record. For example, SELECT c1 FROM t WHERE c1 BETWEEN 10 and 20 FOR UPDATE; prevents other transactions from inserting a value of 15 into column t.c1, whether or not there was already any such value in the column, because the gaps between all existing values in the range are locked.</p>
<p>A gap might span a single index value, multiple index values, or even be empty.</p>
<p>Gap locks are part of the tradeoff between performance and concurrency, and are used in some transaction isolation levels and not others.</p>
<p>Gap locking is not needed for statements that lock rows using a unique index to search for a unique row. (This does not include the case that the search condition includes only some columns of a multiple-column unique index; in that case, gap locking does occur.) For example, if the id column has a unique index, the following statement uses only an index-record lock for the row having id value 100 and it does not matter whether other sessions insert rows in the preceding gap:</p>
<ul>
<li>SELECT * FROM child WHERE id = 100;</li>
</ul>
<p>If id is not indexed or has a nonunique index, the statement does lock the preceding gap.</p>
<p>It is also worth noting here that conflicting locks can be held on a gap by different transactions. For example, transaction A can hold a shared gap lock (gap S-lock) on a gap while transaction B holds an exclusive gap lock (gap X-lock) on the same gap. The reason conflicting gap locks are allowed is that if a record is purged from an index, the gap locks held on the record by different transactions must be merged.<br>Gap locks in InnoDB are “purely inhibitive”, which means they only stop other transactions from inserting to the gap. They do not prevent different transactions from taking gap locks on the same gap. Thus, a gap X-lock has the same effect as a gap S-lock.</p>
<p>Gap locking can be disabled explicitly. This occurs if you change the transaction isolation level to READ COMMITTED or enable the innodb_locks_unsafe_for_binlog system variable (which is now deprecated). Under these circumstances, gap locking is disabled for searches and index scans and is used only for foreign-key constraint checking and duplicate-key checking.</p>
<ul>
<li>数据库在<code>READ-COMMITTED</code>隔离级别，对于外键约束和唯一键约束仍然会使用<code>gap locking</code>。</li>
</ul>
<p>There are also other effects of using the READ COMMITTED isolation level or enabling innodb_locks_unsafe_for_binlog. Record locks for nonmatching rows are released after MySQL has evaluated the WHERE condition. For UPDATE statements, InnoDB does a &quot;semi-consistent&quot; read, such that it returns the latest committed version to MySQL so that MySQL can determine whether the row matches the WHERE condition of the UPDATE.</p>
</blockquote>
<h2 id="Next-Key-Locks"><a href="#Next-Key-Locks" class="headerlink" title="Next-Key Locks"></a>Next-Key Locks</h2><blockquote>
<p>By default, InnoDB operates in REPEATABLE READ transaction isolation level. In this case, InnoDB uses next-key locks for searches and index scans, which prevents phantom rows (see Section <a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-next-key-locking.html" target="_blank" rel="external">14.5.4</a>, &quot;Phantom Rows&quot;).</p>
</blockquote>
<h2 id="InnoDB-Locks"><a href="#InnoDB-Locks" class="headerlink" title="InnoDB Locks"></a>InnoDB Locks</h2><p><code>IS/IX/S/X</code>锁兼容矩阵：</p>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">X</th>
<th style="text-align:center">IX</th>
<th style="text-align:center">S</th>
<th style="text-align:center">IS</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">X</td>
<td style="text-align:center">冲突</td>
<td style="text-align:center">冲突</td>
<td style="text-align:center">冲突</td>
<td style="text-align:center">冲突</td>
</tr>
<tr>
<td style="text-align:center">IX</td>
<td style="text-align:center">冲突</td>
<td style="text-align:center">兼容</td>
<td style="text-align:center">冲突</td>
<td style="text-align:center">兼容</td>
</tr>
<tr>
<td style="text-align:center">S</td>
<td style="text-align:center">冲突</td>
<td style="text-align:center">冲突</td>
<td style="text-align:center">兼容</td>
<td style="text-align:center">兼容</td>
</tr>
<tr>
<td style="text-align:center">IS</td>
<td style="text-align:center">冲突</td>
<td style="text-align:center">兼容</td>
<td style="text-align:center">兼容</td>
<td style="text-align:center">兼容</td>
</tr>
</tbody>
</table>
<p>当InnoDB在判断行锁是否冲突的时候, 除了最基本的<code>IS/IX/S/X</code>锁的冲突判断外, InnoDB还将锁细分为如下几种子类型:</p>
<ol>
<li>Record Locks (RK)<ul>
<li>记录锁, 仅仅锁住索引记录的一行。</li>
</ul>
</li>
<li>Gap Locks (GK)<ul>
<li>区间锁, 仅仅锁住一个区间(开区间)。</li>
<li>在<code>READ-COMMITTED</code>隔离级别下，对复合唯一索引也会有gap lock。</li>
</ul>
</li>
<li>Insert Intention Locks (IK)<ul>
<li>Gap Locks中存在一种插入意向锁(Insert Intention Lock)，在INSERT操作时产生。</li>
</ul>
</li>
<li>Next-Key Locks (NK)<ul>
<li>Record Locks + Gap Locks, 半开半闭区间。</li>
<li><a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-locking.html#innodb-next-key-locks" target="_blank" rel="external">Next-Key Locks</a>是为防止幻读的发生，而只有<code>REPEATABLE-READ</code>以及以上隔离级别才能防止幻读，所以在<code>READ-COMMITTED</code>隔离级别下面没有<code>Next-Key Locks</code>。</li>
</ul>
</li>
</ol>
<p><code>RK/GK/IK/NK</code>锁兼容矩阵:</p>
<p>Request Lock与Granted Lock之间的兼容矩阵:</p>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">RK</th>
<th style="text-align:center">GK</th>
<th style="text-align:center">IK</th>
<th style="text-align:center">NK</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">RK</td>
<td style="text-align:center">冲突</td>
<td style="text-align:center">兼容</td>
<td style="text-align:center">兼容</td>
<td style="text-align:center">冲突</td>
</tr>
<tr>
<td style="text-align:center">GK</td>
<td style="text-align:center">兼容</td>
<td style="text-align:center">兼容</td>
<td style="text-align:center">兼容</td>
<td style="text-align:center">兼容</td>
</tr>
<tr>
<td style="text-align:center">IK</td>
<td style="text-align:center">兼容</td>
<td style="text-align:center">冲突</td>
<td style="text-align:center">兼容</td>
<td style="text-align:center">冲突</td>
</tr>
<tr>
<td style="text-align:center">NK</td>
<td style="text-align:center">冲突</td>
<td style="text-align:center">兼容</td>
<td style="text-align:center">兼容</td>
<td style="text-align:center">冲突</td>
</tr>
</tbody>
</table>
<h2 id="问题重现"><a href="#问题重现" class="headerlink" title="问题重现"></a>问题重现</h2><p>应用程序集群有3台机器，由于并发的问题，3台机器同时往数据里插入记录，并且在插入数据过程有其他的数据校验，因为数据校验失败，事务需要回滚，而导致死锁产生。</p>
<p>死锁问题产生的<code>SHOW ENGINE INNODB STATUS</code>提示内容与网上的文章：<a href="http://blog.itpub.net/27000195/viewspace-2120472/" target="_blank" rel="external">并发insert操作导致的dead lock</a>基本是一样的，事务隔离级别为<code>READ-COMMITTED</code>，有2个字段联合的唯一索引，状态提及内容中涉及Gap Lock：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">------------------------</div><div class="line">LATEST DETECTED DEADLOCK</div><div class="line">------------------------</div><div class="line">2017-09-15 09:35:16 7fdb8b6fb700</div><div class="line">*** (1) TRANSACTION:</div><div class="line">TRANSACTION 606898669, ACTIVE 0.036 sec inserting</div><div class="line">mysql tables in use 1, locked 1</div><div class="line">LOCK WAIT 4 lock struct(s), heap size 1184, 2 row lock(s), undo log entries 1</div><div class="line">LOCK BLOCKING MySQL thread id: 5706233 block 5707263</div><div class="line">MySQL thread id 5707263, OS thread handle 0x7fdb867be700, query id 4809191957 10.28.30.213 dbadmin update</div><div class="line">insert into `t_deadlock` (user_id,type,value,active,created) values(3016018,&apos;ADMIN&apos;,&apos;500&apos;,1,&apos;2017-09-15 09:35:16&apos;)</div><div class="line">*** (1) WAITING FOR THIS LOCK TO BE GRANTED:</div><div class="line">RECORD LOCKS space id 543110 page no 15540 n bits 584 index `ix_user_id_type` of table `test`.`t_deadlock` trx id 606898669 lock_mode X locks gap before rec insert intention waiting</div><div class="line">Record lock, heap no 508 PHYSICAL RECORD: n_fields 3; compact format; info bits 0</div><div class="line"> 0: len 4; hex 802e0552; asc . R;;</div><div class="line"> 1: len 13; hex 77785f73756273637269626564; asc subscribed;;</div><div class="line"> 2: len 4; hex 8027c73d; asc &apos; =;;</div><div class="line"></div><div class="line">*** (2) TRANSACTION:</div><div class="line">TRANSACTION 606898668, ACTIVE 0.057 sec inserting</div><div class="line">mysql tables in use 1, locked 1</div><div class="line">4 lock struct(s), heap size 1184, 2 row lock(s), undo log entries 1</div><div class="line">MySQL thread id 5706233, OS thread handle 0x7fdb8b6fb700, query id 4809191891 10.172.25.211 dbadmin update</div><div class="line">insert into `t_deadlock` (user_id,type,value,active,created) values(3016018,&apos;ADMIN&apos;,&apos;2000&apos;,1,&apos;2017-09-15 09:35:15.973&apos;)</div><div class="line">*** (2) HOLDS THE LOCK(S):</div><div class="line">RECORD LOCKS space id 543110 page no 15540 n bits 584 index `ix_user_id_type` of table `test`.`t_deadlock` trx id 606898668 lock mode S locks gap before rec</div><div class="line">Record lock, heap no 508 PHYSICAL RECORD: n_fields 3; compact format; info bits 0</div><div class="line"> 0: len 4; hex 802e0552; asc . R;;</div><div class="line"> 1: len 13; hex 77785f73756273637269626564; asc subscribed;;</div><div class="line"> 2: len 4; hex 8027c73d; asc &apos; =;;</div><div class="line"></div><div class="line">*** (2) WAITING FOR THIS LOCK TO BE GRANTED:</div><div class="line">RECORD LOCKS space id 543110 page no 15540 n bits 584 index `ix_user_id_type` of table `test`.`t_deadlock` trx id 606898668 lock_mode X locks gap before rec insert intention waiting</div><div class="line">Record lock, heap no 508 PHYSICAL RECORD: n_fields 3; compact format; info bits 0</div><div class="line"> 0: len 4; hex 802e0552; asc . R;;</div><div class="line"> 1: len 13; hex 77785f73756273637269626564; asc subscribed;;</div><div class="line"> 2: len 4; hex 8027c73d; asc &apos; =;;</div><div class="line"></div><div class="line">*** WE ROLL BACK TRANSACTION (2)</div><div class="line">------------</div><div class="line">TRANSACTIONS</div><div class="line">------------</div></pre></td></tr></table></figure>
<p>上述信息中关键的3个锁记录如下：</p>
<blockquote>
<p>RECORD LOCKS space id 543110 page no 15540 n bits 584 index ix_user_id_type of table test.t_deadlock trx id 606898669 lock_mode X locks gap before rec insert intention waiting<br>RECORD LOCKS space id 543110 page no 15540 n bits 584 index ix_user_id_type of table test.t_deadlock trx id 606898668 lock mode S locks gap before rec<br>RECORD LOCKS space id 543110 page no 15540 n bits 584 index ix_user_id_type of table test.t_deadlock trx id 606898668 lock_mode X locks gap before rec insert intention waiting</p>
</blockquote>
<h3 id="MySQL-环境"><a href="#MySQL-环境" class="headerlink" title="MySQL 环境"></a>MySQL 环境</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">mysql&gt; SELECT version();</div><div class="line output">+-----------+</div><div class="line output">| version() |</div><div class="line output">+-----------+</div><div class="line output">| 5.6.24    |</div><div class="line output">+-----------+</div><div class="line output">1 row in set (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt; SHOW VARIABLES LIKE &apos;innodb_locks_unsafe_for_binlog&apos;;</div><div class="line output">+--------------------------------+-------+</div><div class="line output">| Variable_name                  | Value |</div><div class="line output">+--------------------------------+-------+</div><div class="line output">| innodb_locks_unsafe_for_binlog | OFF   |</div><div class="line output">+--------------------------------+-------+</div><div class="line output">1 row in set (0.01 sec)</div><div class="line"></div><div class="line">mysql&gt; SELECT @@global.tx_isolation, @@session.tx_isolation, @@tx_isolation;</div><div class="line output">+-----------------------+------------------------+----------------+</div><div class="line output">| @@global.tx_isolation | @@session.tx_isolation | @@tx_isolation |</div><div class="line output">+-----------------------+------------------------+----------------+</div><div class="line output">| READ-COMMITTED        | READ-COMMITTED         | READ-COMMITTED |</div><div class="line output">+-----------------------+------------------------+----------------+</div><div class="line output">1 row in set (0.00 sec)</div></pre></td></tr></table></figure>
<h3 id="设置隔离级别"><a href="#设置隔离级别" class="headerlink" title="设置隔离级别"></a>设置隔离级别</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">mysql&gt; SET GLOBAL tx_isolation = &apos;READ-COMMITTED&apos;;</div><div class="line output">Query OK, 0 rows affected (0.01 sec)</div><div class="line"></div><div class="line">mysql&gt; SET SESSION tx_isolation = &apos;READ-COMMITTED&apos;;</div><div class="line output">Query OK, 0 rows affected (0.00 sec)</div></pre></td></tr></table></figure>
<p>在每个mysql session开启后都执行以下命令，mysql默认的隔离级别一般是<code>REPEATABLE-READ</code>。</p>
<blockquote>
<p>SET SESSION tx_isolation = &#39;READ-COMMITTED&#39;;</p>
</blockquote>
<h3 id="创建测试表"><a href="#创建测试表" class="headerlink" title="创建测试表"></a>创建测试表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="keyword">USE</span> <span class="keyword">test</span>;</div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> deadlock (</div><div class="line">  <span class="keyword">id</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">  a <span class="built_in">smallint</span>(<span class="number">5</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span>,</div><div class="line">  b <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span>,</div><div class="line">  c <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span>,</div><div class="line">  d datetime <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0000-00-00 00:00:00'</span>,</div><div class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="keyword">id</span>),</div><div class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> uniq_b_c_a (b,c,a)</div><div class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</div></pre></td></tr></table></figure>
<h3 id="复现死锁过程"><a href="#复现死锁过程" class="headerlink" title="复现死锁过程"></a>复现死锁过程</h3><table>
<thead>
<tr>
<th style="text-align:left">T1(140104)</th>
<th style="text-align:left">T2(140105)</th>
<th style="text-align:left">T3(140106)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">BEGIN;</td>
<td style="text-align:left">BEGIN;</td>
<td style="text-align:left">BEGIN;</td>
</tr>
<tr>
<td style="text-align:left">INSERT INTO deadlock(a,b,c) VALUES(1,2,4);</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">INSERT INTO deadlock(a,b,c) VALUES(1,2,4);</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">INSERT INTO deadlock(a,b,c) VALUES(1,2,4);</td>
</tr>
<tr>
<td style="text-align:left">ROLLBACK;</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">Query OK, 1 row affected (13.10 sec)</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">ERROR 1213 (40001): Deadlock found when trying to get lock; try restarting transaction</td>
<td style="text-align:left">&nbsp;</td>
</tr>
</tbody>
</table>
<p>在事务T1没有ROLLBACK时，可以查看数据库引擎innodb锁的情况如下：</p>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">mysql&gt; SELECT * FROM information_schema.INNODB_LOCKS;</div><div class="line output">+----------------+-------------+-----------+-----------+-------------------+------------+------------+-----------+----------+-----------+</div><div class="line output">| lock_id        | lock_trx_id | lock_mode | lock_type | lock_table        | lock_index | lock_space | lock_page | lock_rec | lock_data |</div><div class="line output">+----------------+-------------+-----------+-----------+-------------------+------------+------------+-----------+----------+-----------+</div><div class="line output">| 140106:270:4:3 | 140106      | S         | RECORD    | `test`.`deadlock` | unq_b_c_a  |        270 |         4 |        3 | 2, 4, 1   |</div><div class="line output">| 140104:270:4:3 | 140104      | X         | RECORD    | `test`.`deadlock` | unq_b_c_a  |        270 |         4 |        3 | 2, 4, 1   |</div><div class="line output">| 140105:270:4:3 | 140105      | S         | RECORD    | `test`.`deadlock` | unq_b_c_a  |        270 |         4 |        3 | 2, 4, 1   |</div><div class="line output">+----------------+-------------+-----------+-----------+-------------------+------------+------------+-----------+----------+-----------+</div><div class="line output">3 rows in set (0.01 sec)</div></pre></td></tr></table></figure>
<p>如果T1未<code>ROLLBACK</code>，而是<code>COMMIT</code>的话，T2和T3会报唯一键冲突，提示内容如下：</p>
<blockquote>
<p>ERROR 1062 (23000): Duplicate entry &#39;2-3-1&#39; for key &#39;unq_b_c_a&#39;</p>
</blockquote>
<h3 id="SHOW-ENGINE-INNODB-STATUS"><a href="#SHOW-ENGINE-INNODB-STATUS" class="headerlink" title="SHOW ENGINE INNODB STATUS"></a>SHOW ENGINE INNODB STATUS</h3><figure class="highlight"><table><tr><td class="code"><pre><div class="line">mysql&gt; SHOW ENGINE INNODB STATUS\G</div><div class="line output">------------------------</div><div class="line output">LATEST DETECTED DEADLOCK</div><div class="line output">------------------------</div><div class="line output">2017-09-16 09:50:09 12ff74000</div><div class="line output">*** (1) TRANSACTION:</div><div class="line output">TRANSACTION 140105, ACTIVE 32 sec inserting</div><div class="line output">mysql tables in use 1, locked 1</div><div class="line output">LOCK WAIT 4 lock struct(s), heap size 1184, 2 row lock(s), undo log entries 1</div><div class="line output">MySQL thread id 154, OS thread handle 0x12ffb8000, query id 2318 localhost root update</div><div class="line output">insert into deadlock(a,b,c) values(1,2,4)</div><div class="line output">*** (1) WAITING FOR THIS LOCK TO BE GRANTED:</div><div class="line output">RECORD LOCKS space id 270 page no 4 n bits 72 index `unq_b_c_a` of table `test`.`deadlock` trx id 140105 lock_mode X insert intention waiting</div><div class="line output">Record lock, heap no 1 PHYSICAL RECORD: n_fields 1; compact format; info bits 0</div><div class="line output"> 0: len 8; hex 73757072656d756d; asc supremum;;</div><div class="line output"></div><div class="line output">*** (2) TRANSACTION:</div><div class="line output">TRANSACTION 140106, ACTIVE 17 sec inserting</div><div class="line output">mysql tables in use 1, locked 1</div><div class="line output">4 lock struct(s), heap size 1184, 2 row lock(s), undo log entries 1</div><div class="line output">MySQL thread id 153, OS thread handle 0x12ff74000, query id 2320 localhost root update</div><div class="line output">insert into deadlock(a,b,c) values(1,2,4)</div><div class="line output">*** (2) HOLDS THE LOCK(S):</div><div class="line output">RECORD LOCKS space id 270 page no 4 n bits 72 index `unq_b_c_a` of table `test`.`deadlock` trx id 140106 lock mode S</div><div class="line output">Record lock, heap no 1 PHYSICAL RECORD: n_fields 1; compact format; info bits 0</div><div class="line output"> 0: len 8; hex 73757072656d756d; asc supremum;;</div><div class="line output"></div><div class="line output">*** (2) WAITING FOR THIS LOCK TO BE GRANTED:</div><div class="line output">RECORD LOCKS space id 270 page no 4 n bits 72 index `unq_b_c_a` of table `test`.`deadlock` trx id 140106 lock_mode X insert intention waiting</div><div class="line output">Record lock, heap no 1 PHYSICAL RECORD: n_fields 1; compact format; info bits 0</div><div class="line output"> 0: len 8; hex 73757072656d756d; asc supremum;;</div><div class="line output"></div><div class="line output">*** WE ROLL BACK TRANSACTION (2)</div><div class="line output">----------------------------</div><div class="line output">END OF INNODB MONITOR OUTPUT</div><div class="line output">============================</div><div class="line output">1 row in set (0.01 sec)</div></pre></td></tr></table></figure>
<h2 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h2><ol>
<li><code>SHOW ENGINE INNODB STATUS\G</code>看到的DEADLOCK相关信息，只会返回最后的2个事务的信息，而其实有可能有更多的事务才最终导致的死锁。</li>
<li>当有3个（或以上）事务对相同的表进行insert操作，如果insert对应的字段上有uniq key约束并且第一个事务ROLLBACK了，那其中一个将返回死锁错误信息。</li>
<li>死锁的原因<ul>
<li>T1 获得 X 锁并 INSERT 成功</li>
<li>T2 试图 INSERT, 检查重复键需要获得 S 锁, 但试图获得 S 锁失败, 加入等待队列, 等待 T1</li>
<li>T3 试图 INSERT, 检查重复键需要获得 S 锁, 但试图获得 S 锁失败, 加入等待队列, 等待 T1</li>
<li>T1 ROLLBACK, T1 释放锁, 此后 T2, T3 获得 S 锁成功, 检查 duplicate-key, 之后 INSERT 试图获得 X 锁, 但 T2, T3 都已经获得 S 锁, 导致 T2, T3 死锁</li>
</ul>
</li>
<li>避免此DEADLOCK<ul>
<li>我们都知道死锁的问题通常都是业务处理的逻辑造成的，既然是uniq key，同时多台不同服务器上的相同程序对其 INSERT 一模一样的value，这本身逻辑就不太完美。</li>
</ul>
</li>
<li>故解决此问题：<ul>
<li>保证业务程序别再同一时间点并发的插入相同的值到相同的uniq key的表中</li>
<li>上述实验可知，是由于第一个事务ROLLBACK了才产生的DEADLOCK，查明ROLLBACK的原因</li>
<li>尽量减少完成事务的时间</li>
</ul>
</li>
</ol>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol>
<li><a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-locking.html" target="_blank" rel="external">14.5.1 InnoDB Locking</a></li>
<li><a href="http://yeshaoting.cn/article/database/%E9%80%9A%E8%BF%87InnoDB%E7%9B%91%E6%8E%A7%E7%8A%B6%E6%80%81%E5%88%86%E6%9E%90%E9%94%81%E5%8D%A0%E7%94%A8/index.html" target="_blank" rel="external">通过InnoDB监控状态分析锁占用</a></li>
<li><a href="http://yeshaoting.cn/article/database/mysql%20insert%E9%94%81%E6%9C%BA%E5%88%B6/index.html" target="_blank" rel="external">mysql insert锁机制</a></li>
<li><a href="http://blog.itpub.net/27000195/viewspace-2120472/" target="_blank" rel="external">并发insert操作导致的dead lock</a></li>
<li><a href="http://www.cnblogs.com/renolei/p/4673842.html" target="_blank" rel="external">MySQL gap locks/next-key locks浅析</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MySQL中innodb引擎的锁有多种，具体可查看&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/innodb-locking.html#innodb-next-key-locks&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档&lt;/a&gt;，这次碰到的死锁与&lt;code&gt;Next-Key Locks&lt;/code&gt;没有关系，与&lt;code&gt;Record Locks&lt;/code&gt;和&lt;code&gt;Gap Locks&lt;/code&gt;有关，下面引用innodb锁的部分文档说明。&lt;/p&gt;
&lt;h2 id=&quot;Shared-and-Exclusive-Locks&quot;&gt;&lt;a href=&quot;#Shared-and-Exclusive-Locks&quot; class=&quot;headerlink&quot; title=&quot;Shared and Exclusive Locks&quot;&gt;&lt;/a&gt;Shared and Exclusive Locks&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;InnoDB implements standard row-level locking where there are two types of locks, shared (S) locks and exclusive (X) locks.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A shared (S) lock permits the transaction that holds the lock to read a row.&lt;/li&gt;
&lt;li&gt;An exclusive (X) lock permits the transaction that holds the lock to update or delete a row.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="mysql" scheme="https://www.4e00.com/categories/mysql/"/>
    
    
  </entry>
  
</feed>
