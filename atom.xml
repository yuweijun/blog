<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一</title>
  
  <subtitle>{&quot;type&quot;:&quot;编程笔记&quot;}</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://www.4e00.com/"/>
  <updated>2020-05-03T06:09:18.000Z</updated>
  <id>http://www.4e00.com/</id>
  
  <author>
    <name>yuweijun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vim escape key configuration</title>
    <link href="http://www.4e00.com/linux/2020/05/03/vim-escape-key-configuration.html"/>
    <id>http://www.4e00.com/linux/2020/05/03/vim-escape-key-configuration.html</id>
    <published>2020-05-03T05:48:43.000Z</published>
    <updated>2020-05-03T06:09:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>个人在 vim 中一直是使用<kbd>Alt + L</kbd>代替<kbd>Escape</kbd>键，这里没有对这个组合键<code>remap</code>，vim 里原来就支持的，并且响应速度极快，关于这个可以使用<code>:help i_Alt</code>查看说明：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">char        action  ~</span><span class="line">-----------------------------------------------------------------------</span><span class="line"></span><span class="line">                                                    *i_CTRL-[* *i_&lt;Esc&gt;*</span><span class="line">&lt;Esc&gt; or CTRL-[ End insert or Replace mode, go back to Normal mode.  Finish</span><span class="line">                abbreviation.</span><span class="line">                Note: If your &lt;Esc&gt; key is hard to hit, try CTRL-[ instead.</span><span class="line"></span><span class="line">                                                    *i_META* *i_Alt*</span><span class="line">                Alt (META) acts like &lt;Esc&gt; if the chord is not mapped.</span><span class="line">                For example &lt;A-x&gt; acts like &lt;Esc&gt;x if &lt;A-x&gt; does not have an</span><span class="line">                insert-mode mapping.</span></pre></td></tr></table></figure><a id="more"></a><p>另外在 Mac OS 和 Linux 上，可以将无用的 <kbd>Caps Lock</kbd> 键映射成 <kbd>Escape</kbd> 也非常好用。</p><p>也有不少人在插入模式中，将 <kbd>jj</kbd> 或者 <kbd>jk</kbd> 映射为 <kbd>Escape</kbd>，在英文输入时还是挺方便的，不过这个与中文五笔输入打字时有点冲突，所以不如重用 <kbd>Caps Lock</kbd> 键，如下图是在 Mac OS 上的设置：</p><img src="/blog/img/macos/capslock-escape-key.png" class="image-md" title="[capslock escape key]"><p>在 <code>Intellij IDEA</code> 可以在<code>~/.ideavimrc</code>文件中加入以下配置：</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">inoremap</span> <span class="symbol">&lt;A-l&gt;</span> <span class="symbol">&lt;Esc&gt;</span></span></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;个人在 vim 中一直是使用&lt;kbd&gt;Alt + L&lt;/kbd&gt;代替&lt;kbd&gt;Escape&lt;/kbd&gt;键，这里没有对这个组合键&lt;code&gt;remap&lt;/code&gt;，vim 里原来就支持的，并且响应速度极快，关于这个可以使用&lt;code&gt;:help i_Alt&lt;/code&gt;查看说明：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;char        action  ~&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;-----------------------------------------------------------------------&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                                                    *i_CTRL-[* *i_&amp;lt;Esc&amp;gt;*&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;Esc&amp;gt; or CTRL-[ End insert or Replace mode, go back to Normal mode.  Finish&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                abbreviation.&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                Note: If your &amp;lt;Esc&amp;gt; key is hard to hit, try CTRL-[ instead.&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                                                    *i_META* *i_Alt*&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                Alt (META) acts like &amp;lt;Esc&amp;gt; if the chord is not mapped.&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                For example &amp;lt;A-x&amp;gt; acts like &amp;lt;Esc&amp;gt;x if &amp;lt;A-x&amp;gt; does not have an&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                insert-mode mapping.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="linux" scheme="http://www.4e00.com/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>macos 神器之 hammerspoon 篇</title>
    <link href="http://www.4e00.com/macos/2020/05/03/macos-app-hammerspoon.html"/>
    <id>http://www.4e00.com/macos/2020/05/03/macos-app-hammerspoon.html</id>
    <published>2020-05-03T01:51:40.000Z</published>
    <updated>2020-05-03T11:43:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="About-Hammerspoon"><a href="#About-Hammerspoon" class="headerlink" title="About Hammerspoon"></a>About Hammerspoon</h2><p><a href="https://github.com/Hammerspoon/hammerspoon" target="_blank" rel="noopener">Hammerspoon</a> 是 Mac OS 上强大自动化管理工具，<code>Hammerspoon</code> 的核心只是操作系统和 Lua 脚本引擎之间的桥梁。<code>Hammerspoon</code> 强大之处在于提供了一组扩展，这些扩展向用户提供了特定的系统功能，有了这些扩展，我们可以编写 Lua 脚本来控制 Mac OS X 系统的许多行为。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><i class="fa fa-usd"></i> <span class="built_in">brew</span> cask install hammerspoon</span></pre></td></tr></table></figure><p>第一次打开需要授予系统辅助功能权限 <code>Enable Accessibility</code>，如下 2 图。</p><img src="/blog/img/macos/hammerspoon-preferences.png" class="image-md" title="[hammerspoon preferences]"><img src="/blog/img/macos/hammerspoon-system-accessibility.png" class="image-md" title="[system accessibility]"><h2 id="配置文件和-Spoon-插件结构"><a href="#配置文件和-Spoon-插件结构" class="headerlink" title="配置文件和 Spoon 插件结构"></a>配置文件和 Spoon 插件结构</h2><p>配置文件为 <code>~/.hammerspoon/init.lua</code>，插件安装目录 <code>~/.hammerspoon/Spoons</code>。</p><img src="/blog/img/macos/hammerspoon-tree.png" class="image-md" title="[hammerspoon config and plugins]"><a id="more"></a><h2 id="功能配置"><a href="#功能配置" class="headerlink" title="功能配置"></a>功能配置</h2><h3 id="自定义-hyper-键"><a href="#自定义-hyper-键" class="headerlink" title="自定义 hyper 键"></a>自定义 hyper 键</h3><p>这个如果配合<code>Karabiner Element.app</code>来定义是最好的，也可以直接用<code>Hammerspoon</code>自定义<kbd>Hyper</kbd>键如下，即同时按下<kbd>Ctrl + Option + Command</kbd>三个键：</p><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> hyper = &#123;<span class="string">'ctrl'</span>, <span class="string">'alt'</span>, <span class="string">'cmd'</span>&#125;</span></pre></td></tr></table></figure><h3 id="窗口管理"><a href="#窗口管理" class="headerlink" title="窗口管理"></a>窗口管理</h3><p>对窗口大小的位置进行配置管理，达到<code>Spectacle.app</code>软件类似的效果，快捷键说明：</p><ol><li><kbd>Hyper + 1</kbd>: 当前窗口显示到屏幕左上方 1/4 位置；</li><li><kbd>Hyper + 2</kbd>: 当前窗口显示到屏幕右上方 1/4 位置；</li><li><kbd>Hyper + 3</kbd>: 当前窗口显示到屏幕左下方 1/4 位置；</li><li><kbd>Hyper + 4</kbd>: 当前窗口显示到屏幕右下方 1/4 位置；</li><li><kbd>Hyper + left</kbd>: 当前窗口显示到屏幕左方 1/2 位置；</li><li><kbd>Hyper + right</kbd>: 当前窗口显示到屏幕右方 1/2 位置；</li><li><kbd>Hyper + up</kbd>: 当前窗口显示到屏幕上方 1/2 位置；</li><li><kbd>Hyper + down</kbd>: 当前窗口显示到屏幕下方 1/2 位置；</li><li><kbd>Hyper + 5</kbd>: 当前窗口最大化（不是全屏）。</li></ol><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">baseMove</span><span class="params">(x, y, w, h)</span></span></span><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><span class="line">        <span class="keyword">local</span> win = hs.window.focusedWindow()</span><span class="line">        <span class="keyword">local</span> f = win:frame()</span><span class="line">        <span class="keyword">local</span> screen = win:screen()</span><span class="line">        <span class="keyword">local</span> <span class="built_in">max</span> = screen:frame()</span><span class="line"></span><span class="line">        f.x = <span class="built_in">max</span>.w * x + <span class="built_in">max</span>.x</span><span class="line">        f.y = <span class="built_in">max</span>.h * y</span><span class="line">        f.w = <span class="built_in">max</span>.w * w</span><span class="line">        f.h = <span class="built_in">max</span>.h * h</span><span class="line">        win:setFrame(f, <span class="number">0</span>)</span><span class="line">    <span class="keyword">end</span></span><span class="line"><span class="keyword">end</span></span><span class="line"></span><span class="line">hs.hotkey.bind(hyper, <span class="string">'Left'</span>, baseMove(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>, <span class="number">1</span>))</span><span class="line">hs.hotkey.bind(hyper, <span class="string">'Right'</span>, baseMove(<span class="number">0.5</span>, <span class="number">0</span>, <span class="number">0.5</span>, <span class="number">1</span>))</span><span class="line">hs.hotkey.bind(hyper, <span class="string">'Down'</span>, baseMove(<span class="number">0</span>, <span class="number">0.5</span>, <span class="number">1</span>, <span class="number">0.5</span>))</span><span class="line">hs.hotkey.bind(hyper, <span class="string">'Up'</span>, baseMove(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0.5</span>))</span><span class="line">hs.hotkey.bind(hyper, <span class="string">'1'</span>, baseMove(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>, <span class="number">0.5</span>))</span><span class="line">hs.hotkey.bind(hyper, <span class="string">'2'</span>, baseMove(<span class="number">0.5</span>, <span class="number">0</span>, <span class="number">0.5</span>, <span class="number">0.5</span>))</span><span class="line">hs.hotkey.bind(hyper, <span class="string">'3'</span>, baseMove(<span class="number">0</span>, <span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>))</span><span class="line">hs.hotkey.bind(hyper, <span class="string">'4'</span>, baseMove(<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>))</span><span class="line">hs.hotkey.bind(hyper, <span class="string">'5'</span>, hs.grid.maximizeWindow)</span></pre></td></tr></table></figure><h3 id="应用快速切换"><a href="#应用快速切换" class="headerlink" title="应用快速切换"></a>应用快速切换</h3><p>使用快捷键一步直达想要操作的应用，避免使用<kbd>Command + Tab</kbd>切换：</p><ol><li><kbd>Alt + a</kbd>: 打开<code>Launchpad</code>；</li><li><kbd>Alt + s</kbd>: 打开<code>System Preferemces</code>；</li><li><kbd>Alt + d</kbd>: 打开<code>Intellij IDEA CE</code>；</li><li><kbd>Alt + e</kbd>: 打开<code>Evernote</code>；</li><li><kbd>Alt + f</kbd>: 打开<code>finder</code>；</li><li><kbd>Alt + g</kbd>: 打开<code>Google Chrome</code>；</li><li><kbd>Alt + w</kbd>: 打开<code>Mission Control</code>；</li><li><kbd>Alt + x</kbd>: 打开<code>iTerm</code>。</li></ol><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">hs.hotkey.bind(&#123;<span class="string">'alt'</span>&#125;, <span class="string">"a"</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> hs.application.launchOrFocus(<span class="string">'Launchpad'</span>) <span class="keyword">end</span>)</span><span class="line">hs.hotkey.bind(&#123;<span class="string">'alt'</span>&#125;, <span class="string">"s"</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> hs.application.launchOrFocus(<span class="string">'System Preferences'</span>) <span class="keyword">end</span>)</span><span class="line">hs.hotkey.bind(&#123;<span class="string">'alt'</span>&#125;, <span class="string">"d"</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> hs.application.launchOrFocus(<span class="string">'Intellij IDEA CE'</span>) <span class="keyword">end</span>)</span><span class="line">hs.hotkey.bind(&#123;<span class="string">'alt'</span>&#125;, <span class="string">"e"</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> hs.application.launchOrFocus(<span class="string">'Evernote'</span>) <span class="keyword">end</span>)</span><span class="line">hs.hotkey.bind(&#123;<span class="string">'alt'</span>&#125;, <span class="string">"f"</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> hs.application.launchOrFocus(<span class="string">'finder'</span>) <span class="keyword">end</span>)</span><span class="line">hs.hotkey.bind(&#123;<span class="string">'alt'</span>&#125;, <span class="string">"g"</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> hs.application.launchOrFocus(<span class="string">'Google Chrome'</span>) <span class="keyword">end</span>)</span><span class="line">hs.hotkey.bind(&#123;<span class="string">'alt'</span>&#125;, <span class="string">"w"</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> hs.application.launchOrFocus(<span class="string">'Mission Control'</span>) <span class="keyword">end</span>)</span><span class="line">hs.hotkey.bind(&#123;<span class="string">'alt'</span>&#125;, <span class="string">"x"</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> hs.application.launchOrFocus(<span class="string">'iTerm'</span>) <span class="keyword">end</span>)</span></pre></td></tr></table></figure><h3 id="屏幕锁定"><a href="#屏幕锁定" class="headerlink" title="屏幕锁定"></a>屏幕锁定</h3><p>可以安装这 2 款好看的屏保：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><i class="fa fa-usd"></i> <span class="built_in">brew</span> cask install fliqlo clocksaver</span><span class="line"><i class="fa fa-usd"></i> <span class="built_in">xattr</span> -rc <span class="string">"<span class="variable">$HOME</span>/Library/Screen Savers"</span></span></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">hs.hotkey.bind(hyper, <span class="string">'L'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><span class="line">    hs.caffeinate.startScreensaver()</span><span class="line"><span class="keyword">end</span>)</span></pre></td></tr></table></figure><h3 id="方向键映射"><a href="#方向键映射" class="headerlink" title="方向键映射"></a>方向键映射</h3><p>映射<kbd>Alt + JK</kbd>，只映射了最常用到的上下方向键，在命令行和 vim 中与其他快捷键冲突较少：</p><ol><li><kbd>Alt-J</kbd> 映射为向下方向键 <kbd>down</kbd></li><li><kbd>Alt-K</kbd> 映射为向上方向键 <kbd>up</kbd></li></ol><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">pressFn</span><span class="params">(mods, key)</span></span></span><span class="line">    <span class="keyword">if</span> key == <span class="literal">nil</span> <span class="keyword">then</span></span><span class="line">        key = mods</span><span class="line">        mods = &#123;&#125;</span><span class="line">    <span class="keyword">end</span></span><span class="line"></span><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span></span> hs.eventtap.keyStroke(mods, key, <span class="number">80</span>) <span class="keyword">end</span></span><span class="line"><span class="keyword">end</span></span><span class="line"></span><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">remap</span><span class="params">(mods, key, pressFn)</span></span></span><span class="line">    hs.hotkey.bind(mods, key, pressFn, <span class="literal">nil</span>, pressFn)</span><span class="line"><span class="keyword">end</span></span><span class="line"></span><span class="line">remap(&#123;<span class="string">'alt'</span>&#125;, <span class="string">'j'</span>, pressFn(<span class="string">'down'</span>))</span><span class="line">remap(&#123;<span class="string">'alt'</span>&#125;, <span class="string">'k'</span>, pressFn(<span class="string">'up'</span>))</span></pre></td></tr></table></figure><p>网上有配置是映射<kbd>Ctrl + HJKL</kbd>，如 <a href="https://github.com/kkamdooong/hammerspoon-control-hjkl-to-arrow" target="_blank" rel="noopener">https://github.com/kkamdooong/hammerspoon-control-hjkl-to-arrow</a>，这篇文章里对方向键做了更多的映射，可以参考，不过这些与我在命令行和 vim 中的有些快捷键冲突了，所以并不合适我。</p><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">remap(&#123;<span class="string">'ctrl'</span>&#125;, <span class="string">'h'</span>, pressFn(<span class="string">'left'</span>))</span><span class="line">remap(&#123;<span class="string">'ctrl'</span>&#125;, <span class="string">'j'</span>, pressFn(<span class="string">'down'</span>))</span><span class="line">remap(&#123;<span class="string">'ctrl'</span>&#125;, <span class="string">'k'</span>, pressFn(<span class="string">'up'</span>))</span><span class="line">remap(&#123;<span class="string">'ctrl'</span>&#125;, <span class="string">'l'</span>, pressFn(<span class="string">'right'</span>))</span><span class="line"></span><span class="line">remap(&#123;<span class="string">'ctrl'</span>, <span class="string">'shift'</span>&#125;, <span class="string">'h'</span>, pressFn(&#123;<span class="string">'shift'</span>&#125;, <span class="string">'left'</span>))</span><span class="line">remap(&#123;<span class="string">'ctrl'</span>, <span class="string">'shift'</span>&#125;, <span class="string">'j'</span>, pressFn(&#123;<span class="string">'shift'</span>&#125;, <span class="string">'down'</span>))</span><span class="line">remap(&#123;<span class="string">'ctrl'</span>, <span class="string">'shift'</span>&#125;, <span class="string">'k'</span>, pressFn(&#123;<span class="string">'shift'</span>&#125;, <span class="string">'up'</span>))</span><span class="line">remap(&#123;<span class="string">'ctrl'</span>, <span class="string">'shift'</span>&#125;, <span class="string">'l'</span>, pressFn(&#123;<span class="string">'shift'</span>&#125;, <span class="string">'right'</span>))</span><span class="line"></span><span class="line">remap(&#123;<span class="string">'ctrl'</span>, <span class="string">'cmd'</span>&#125;, <span class="string">'h'</span>, pressFn(&#123;<span class="string">'cmd'</span>&#125;, <span class="string">'left'</span>))</span><span class="line">remap(&#123;<span class="string">'ctrl'</span>, <span class="string">'cmd'</span>&#125;, <span class="string">'j'</span>, pressFn(&#123;<span class="string">'cmd'</span>&#125;, <span class="string">'down'</span>))</span><span class="line">remap(&#123;<span class="string">'ctrl'</span>, <span class="string">'cmd'</span>&#125;, <span class="string">'k'</span>, pressFn(&#123;<span class="string">'cmd'</span>&#125;, <span class="string">'up'</span>))</span><span class="line">remap(&#123;<span class="string">'ctrl'</span>, <span class="string">'cmd'</span>&#125;, <span class="string">'l'</span>, pressFn(&#123;<span class="string">'cmd'</span>&#125;, <span class="string">'right'</span>))</span><span class="line"></span><span class="line">remap(&#123;<span class="string">'ctrl'</span>, <span class="string">'alt'</span>&#125;, <span class="string">'h'</span>, pressFn(&#123;<span class="string">'alt'</span>&#125;, <span class="string">'left'</span>))</span><span class="line">remap(&#123;<span class="string">'ctrl'</span>, <span class="string">'alt'</span>&#125;, <span class="string">'j'</span>, pressFn(&#123;<span class="string">'alt'</span>&#125;, <span class="string">'down'</span>))</span><span class="line">remap(&#123;<span class="string">'ctrl'</span>, <span class="string">'alt'</span>&#125;, <span class="string">'k'</span>, pressFn(&#123;<span class="string">'alt'</span>&#125;, <span class="string">'up'</span>))</span><span class="line">remap(&#123;<span class="string">'ctrl'</span>, <span class="string">'alt'</span>&#125;, <span class="string">'l'</span>, pressFn(&#123;<span class="string">'alt'</span>&#125;, <span class="string">'right'</span>))</span><span class="line"></span><span class="line">remap(&#123;<span class="string">'ctrl'</span>, <span class="string">'shift'</span>, <span class="string">'cmd'</span>&#125;, <span class="string">'h'</span>, pressFn(&#123;<span class="string">'shift'</span>, <span class="string">'cmd'</span>&#125;, <span class="string">'left'</span>))</span><span class="line">remap(&#123;<span class="string">'ctrl'</span>, <span class="string">'shift'</span>, <span class="string">'cmd'</span>&#125;, <span class="string">'j'</span>, pressFn(&#123;<span class="string">'shift'</span>, <span class="string">'cmd'</span>&#125;, <span class="string">'down'</span>))</span><span class="line">remap(&#123;<span class="string">'ctrl'</span>, <span class="string">'shift'</span>, <span class="string">'cmd'</span>&#125;, <span class="string">'k'</span>, pressFn(&#123;<span class="string">'shift'</span>, <span class="string">'cmd'</span>&#125;, <span class="string">'up'</span>))</span><span class="line">remap(&#123;<span class="string">'ctrl'</span>, <span class="string">'shift'</span>, <span class="string">'cmd'</span>&#125;, <span class="string">'l'</span>, pressFn(&#123;<span class="string">'shift'</span>, <span class="string">'cmd'</span>&#125;, <span class="string">'right'</span>))</span><span class="line"></span><span class="line">remap(&#123;<span class="string">'ctrl'</span>, <span class="string">'shift'</span>, <span class="string">'alt'</span>&#125;, <span class="string">'h'</span>, pressFn(&#123;<span class="string">'shift'</span>, <span class="string">'alt'</span>&#125;, <span class="string">'left'</span>))</span><span class="line">remap(&#123;<span class="string">'ctrl'</span>, <span class="string">'shift'</span>, <span class="string">'alt'</span>&#125;, <span class="string">'j'</span>, pressFn(&#123;<span class="string">'shift'</span>, <span class="string">'alt'</span>&#125;, <span class="string">'down'</span>))</span><span class="line">remap(&#123;<span class="string">'ctrl'</span>, <span class="string">'shift'</span>, <span class="string">'alt'</span>&#125;, <span class="string">'k'</span>, pressFn(&#123;<span class="string">'shift'</span>, <span class="string">'alt'</span>&#125;, <span class="string">'up'</span>))</span><span class="line">remap(&#123;<span class="string">'ctrl'</span>, <span class="string">'shift'</span>, <span class="string">'alt'</span>&#125;, <span class="string">'l'</span>, pressFn(&#123;<span class="string">'shift'</span>, <span class="string">'alt'</span>&#125;, <span class="string">'right'</span>))</span><span class="line"></span><span class="line">remap(&#123;<span class="string">'ctrl'</span>, <span class="string">'cmd'</span>, <span class="string">'alt'</span>&#125;, <span class="string">'h'</span>, pressFn(&#123;<span class="string">'cmd'</span>, <span class="string">'alt'</span>&#125;, <span class="string">'left'</span>))</span><span class="line">remap(&#123;<span class="string">'ctrl'</span>, <span class="string">'cmd'</span>, <span class="string">'alt'</span>&#125;, <span class="string">'j'</span>, pressFn(&#123;<span class="string">'cmd'</span>, <span class="string">'alt'</span>&#125;, <span class="string">'down'</span>))</span><span class="line">remap(&#123;<span class="string">'ctrl'</span>, <span class="string">'cmd'</span>, <span class="string">'alt'</span>&#125;, <span class="string">'k'</span>, pressFn(&#123;<span class="string">'cmd'</span>, <span class="string">'alt'</span>&#125;, <span class="string">'up'</span>))</span><span class="line">remap(&#123;<span class="string">'ctrl'</span>, <span class="string">'cmd'</span>, <span class="string">'alt'</span>&#125;, <span class="string">'l'</span>, pressFn(&#123;<span class="string">'cmd'</span>, <span class="string">'alt'</span>&#125;, <span class="string">'right'</span>))</span><span class="line"></span><span class="line">remap(&#123;<span class="string">'ctrl'</span>, <span class="string">'cmd'</span>, <span class="string">'alt'</span>, <span class="string">'shift'</span>&#125;, <span class="string">'h'</span>, pressFn(&#123;<span class="string">'cmd'</span>, <span class="string">'alt'</span>, <span class="string">'shift'</span>&#125;, <span class="string">'left'</span>))</span><span class="line">remap(&#123;<span class="string">'ctrl'</span>, <span class="string">'cmd'</span>, <span class="string">'alt'</span>, <span class="string">'shift'</span>&#125;, <span class="string">'j'</span>, pressFn(&#123;<span class="string">'cmd'</span>, <span class="string">'alt'</span>, <span class="string">'shift'</span>&#125;, <span class="string">'down'</span>))</span><span class="line">remap(&#123;<span class="string">'ctrl'</span>, <span class="string">'cmd'</span>, <span class="string">'alt'</span>, <span class="string">'shift'</span>&#125;, <span class="string">'k'</span>, pressFn(&#123;<span class="string">'cmd'</span>, <span class="string">'alt'</span>, <span class="string">'shift'</span>&#125;, <span class="string">'up'</span>))</span><span class="line">remap(&#123;<span class="string">'ctrl'</span>, <span class="string">'cmd'</span>, <span class="string">'alt'</span>, <span class="string">'shift'</span>&#125;, <span class="string">'l'</span>, pressFn(&#123;<span class="string">'cmd'</span>, <span class="string">'alt'</span>, <span class="string">'shift'</span>&#125;, <span class="string">'right'</span>))</span></pre></td></tr></table></figure><h3 id="历史剪切板"><a href="#历史剪切板" class="headerlink" title="历史剪切板"></a>历史剪切板</h3><p><a href="http://www.hammerspoon.org/Spoons/TextClipboardHistory.html" target="_blank" rel="noopener">TextClipboardHistory</a>，剪贴板历史，仅支持文本内容，<a href="https://github.com/Hammerspoon/Spoons/raw/master/Spoons/TextClipboardHistory.spoon.zip" target="_blank" rel="noopener">Download</a> 后解压出来的文件夹加到<code>~/.hammerspoon/Spoons</code>目录下，然后加入以下配置到<code>~/.hammerspoon/init.lua</code>文件中，重启应用即可：</p><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">hs.loadSpoon(<span class="string">'TextClipboardHistory'</span>)</span><span class="line">spoon.TextClipboardHistory.show_in_menubar = <span class="literal">false</span></span><span class="line">spoon.TextClipboardHistory.paste_on_select = <span class="literal">true</span></span><span class="line">spoon.TextClipboardHistory.honor_ignoredidentifiers = <span class="literal">true</span></span><span class="line">spoon.TextClipboardHistory:start()</span><span class="line"></span><span class="line">hs.hotkey.bind(hyper, <span class="string">"V"</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><span class="line">    spoon.TextClipboardHistory:toggleClipboard()</span><span class="line">    mode:<span class="built_in">exit</span>()</span><span class="line"><span class="keyword">end</span>)</span></pre></td></tr></table></figure><p>不过 Mac OS 上其他一些剪贴板管理工具更加强大好用，比如收费的 <code>ipaste</code> 和 <code>paste</code> 都很不错，开源免费的 <code>clipy</code> 和 <code>flycut</code> 也是极好用。</p><h3 id="菜单栏实时显示网速"><a href="#菜单栏实时显示网速" class="headerlink" title="菜单栏实时显示网速"></a>菜单栏实时显示网速</h3><p><a href="http://www.hammerspoon.org/Spoons/SpeedMenu.html" target="_blank" rel="noopener">SpeedMenu</a> 在 menu bar 上显示网速：</p><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">hs.loadSpoon(<span class="string">'SpeedMenu'</span>)</span><span class="line">spoon.SpeedMenu:start()</span></pre></td></tr></table></figure><h3 id="Hammerspoon-reload-配置和显示-Hammerspoon-console"><a href="#Hammerspoon-reload-配置和显示-Hammerspoon-console" class="headerlink" title="Hammerspoon reload 配置和显示 Hammerspoon console"></a>Hammerspoon reload 配置和显示 Hammerspoon console</h3><p>修改完配置文件，按<kbd>Ctrl + Option + Command + R</kbd>重新加载配置，这个功能有一个官方的<a href="http://www.hammerspoon.org/Spoons/ReloadConfiguration.html" target="_blank" rel="noopener">ReloadConfiguration 插件</a>：</p><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">hs.hotkey.bind(hyper, <span class="string">"R"</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><span class="line">    hs.reload()</span><span class="line">    hs.notify.new(&#123;title=<span class="string">"Hammerspoon config reloaded"</span>, informativeText=<span class="string">"Manually via keyboard shortcut"</span>&#125;):send()</span><span class="line"><span class="keyword">end</span>)</span><span class="line">hs.hotkey.bind(hyper, <span class="string">"C"</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><span class="line">    hs.application.get(<span class="string">"Hammerspoon"</span>):selectMenuItem(<span class="string">"Console..."</span>)</span><span class="line">    hs.application.launchOrFocus(<span class="string">"Hammerspoon"</span>)</span><span class="line"><span class="keyword">end</span>)</span></pre></td></tr></table></figure><p>如上配置之后，启动<code>Hammerspoon</code>后，可以使用快捷键<kbd>Ctrl + Option + Command + C</kbd>调出控制台，如下所示：</p><img src="/blog/img/macos/hammerspoon-console.png" class="image-lg" title="[hammerspoon console]"><h2 id="init-lua-完整配置"><a href="#init-lua-完整配置" class="headerlink" title="init.lua 完整配置"></a>init.lua 完整配置</h2><p>个人使用的完整配置<code>~/.hammerspoon/init.lua</code>，没有包括历史剪贴板和显示网速等插件功能，更多插件可以查看：<a href="http://www.hammerspoon.org/Spoons/" target="_blank" rel="noopener">http://www.hammerspoon.org/Spoons/</a>。</p><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> hyper = &#123;<span class="string">'ctrl'</span>, <span class="string">'alt'</span>, <span class="string">'cmd'</span>&#125;</span><span class="line"></span><span class="line">hs.hotkey.bind(hyper, <span class="string">'L'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><span class="line">    hs.caffeinate.startScreensaver()</span><span class="line"><span class="keyword">end</span>)</span><span class="line">hs.hotkey.bind(hyper, <span class="string">"R"</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><span class="line">    hs.reload()</span><span class="line">    hs.notify.new(&#123;title=<span class="string">"Hammerspoon config reloaded"</span>, informativeText=<span class="string">"Manually via keyboard shortcut"</span>&#125;):send()</span><span class="line"><span class="keyword">end</span>)</span><span class="line">hs.hotkey.bind(hyper, <span class="string">"C"</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><span class="line">    hs.application.get(<span class="string">"Hammerspoon"</span>):selectMenuItem(<span class="string">"Console..."</span>)</span><span class="line">    hs.application.launchOrFocus(<span class="string">"Hammerspoon"</span>)</span><span class="line"><span class="keyword">end</span>)</span><span class="line"></span><span class="line"><span class="comment">--------------------------------------------------------------------------------</span></span><span class="line"><span class="comment">---------------------------- Hotkey app management -----------------------------</span></span><span class="line"><span class="comment">--------------------------------------------------------------------------------</span></span><span class="line"></span><span class="line">hs.hotkey.bind(&#123;<span class="string">'alt'</span>&#125;, <span class="string">"["</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> hs.<span class="built_in">execute</span>(<span class="string">'~/.hammerspoon/bin/google'</span>, <span class="literal">true</span>) <span class="keyword">end</span>)</span><span class="line">hs.hotkey.bind(&#123;<span class="string">'alt'</span>&#125;, <span class="string">"]"</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> hs.<span class="built_in">execute</span>(<span class="string">'~/.hammerspoon/bin/translate'</span>, <span class="literal">true</span>) <span class="keyword">end</span>)</span><span class="line">hs.hotkey.bind(&#123;<span class="string">'alt'</span>&#125;, <span class="string">"a"</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> hs.application.launchOrFocus(<span class="string">'Launchpad'</span>) <span class="keyword">end</span>)</span><span class="line">hs.hotkey.bind(&#123;<span class="string">'alt'</span>&#125;, <span class="string">"s"</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> hs.application.launchOrFocus(<span class="string">'System Preferences'</span>) <span class="keyword">end</span>)</span><span class="line">hs.hotkey.bind(&#123;<span class="string">'alt'</span>&#125;, <span class="string">"d"</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> hs.application.launchOrFocus(<span class="string">'Intellij IDEA CE'</span>) <span class="keyword">end</span>)</span><span class="line">hs.hotkey.bind(&#123;<span class="string">'alt'</span>&#125;, <span class="string">"e"</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> hs.application.launchOrFocus(<span class="string">'Evernote'</span>) <span class="keyword">end</span>)</span><span class="line">hs.hotkey.bind(&#123;<span class="string">'alt'</span>&#125;, <span class="string">"f"</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> hs.application.launchOrFocus(<span class="string">'finder'</span>) <span class="keyword">end</span>)</span><span class="line">hs.hotkey.bind(&#123;<span class="string">'alt'</span>&#125;, <span class="string">"g"</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> hs.application.launchOrFocus(<span class="string">'Google Chrome'</span>) <span class="keyword">end</span>)</span><span class="line">hs.hotkey.bind(&#123;<span class="string">'alt'</span>&#125;, <span class="string">"w"</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> hs.application.launchOrFocus(<span class="string">'Mission Control'</span>) <span class="keyword">end</span>)</span><span class="line">hs.hotkey.bind(&#123;<span class="string">'alt'</span>&#125;, <span class="string">"x"</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> hs.application.launchOrFocus(<span class="string">'iTerm'</span>) <span class="keyword">end</span>)</span><span class="line"></span><span class="line"><span class="comment">--------------------------------------------------------------------------------</span></span><span class="line"><span class="comment">------------------------------ Window management -------------------------------</span></span><span class="line"><span class="comment">--------------------------------------------------------------------------------</span></span><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">baseMove</span><span class="params">(x, y, w, h)</span></span></span><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><span class="line">        <span class="keyword">local</span> win = hs.window.focusedWindow()</span><span class="line">        <span class="keyword">local</span> f = win:frame()</span><span class="line">        <span class="keyword">local</span> screen = win:screen()</span><span class="line">        <span class="keyword">local</span> <span class="built_in">max</span> = screen:frame()</span><span class="line"></span><span class="line">        f.x = <span class="built_in">max</span>.w * x + <span class="built_in">max</span>.x</span><span class="line">        f.y = <span class="built_in">max</span>.h * y</span><span class="line">        f.w = <span class="built_in">max</span>.w * w</span><span class="line">        f.h = <span class="built_in">max</span>.h * h</span><span class="line">        win:setFrame(f, <span class="number">0</span>)</span><span class="line">    <span class="keyword">end</span></span><span class="line"><span class="keyword">end</span></span><span class="line"></span><span class="line">hs.hotkey.bind(hyper, <span class="string">'Left'</span>, baseMove(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>, <span class="number">1</span>))</span><span class="line">hs.hotkey.bind(hyper, <span class="string">'Right'</span>, baseMove(<span class="number">0.5</span>, <span class="number">0</span>, <span class="number">0.5</span>, <span class="number">1</span>))</span><span class="line">hs.hotkey.bind(hyper, <span class="string">'Down'</span>, baseMove(<span class="number">0</span>, <span class="number">0.5</span>, <span class="number">1</span>, <span class="number">0.5</span>))</span><span class="line">hs.hotkey.bind(hyper, <span class="string">'Up'</span>, baseMove(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0.5</span>))</span><span class="line">hs.hotkey.bind(hyper, <span class="string">'1'</span>, baseMove(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>, <span class="number">0.5</span>))</span><span class="line">hs.hotkey.bind(hyper, <span class="string">'2'</span>, baseMove(<span class="number">0.5</span>, <span class="number">0</span>, <span class="number">0.5</span>, <span class="number">0.5</span>))</span><span class="line">hs.hotkey.bind(hyper, <span class="string">'3'</span>, baseMove(<span class="number">0</span>, <span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>))</span><span class="line">hs.hotkey.bind(hyper, <span class="string">'4'</span>, baseMove(<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>))</span><span class="line">hs.hotkey.bind(hyper, <span class="string">'5'</span>, hs.grid.maximizeWindow)</span><span class="line"></span><span class="line"><span class="comment">--------------------------------------------------------------------------------</span></span><span class="line"><span class="comment">------------------------------- remapping alt+jk -------------------------------</span></span><span class="line"><span class="comment">--------------------------------------------------------------------------------</span></span><span class="line"></span><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">pressFn</span><span class="params">(mods, key)</span></span></span><span class="line">    <span class="keyword">if</span> key == <span class="literal">nil</span> <span class="keyword">then</span></span><span class="line">        key = mods</span><span class="line">        mods = &#123;&#125;</span><span class="line">    <span class="keyword">end</span></span><span class="line"></span><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span></span> hs.eventtap.keyStroke(mods, key, <span class="number">80</span>) <span class="keyword">end</span></span><span class="line"><span class="keyword">end</span></span><span class="line"></span><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">remap</span><span class="params">(mods, key, pressFn)</span></span></span><span class="line">    hs.hotkey.bind(mods, key, pressFn, <span class="literal">nil</span>, pressFn)</span><span class="line"><span class="keyword">end</span></span><span class="line"></span><span class="line">remap(&#123;<span class="string">'alt'</span>&#125;, <span class="string">'j'</span>, pressFn(<span class="string">'down'</span>))</span><span class="line">remap(&#123;<span class="string">'alt'</span>&#125;, <span class="string">'k'</span>, pressFn(<span class="string">'up'</span>))</span></pre></td></tr></table></figure><h2 id="其他人的配置参考"><a href="#其他人的配置参考" class="headerlink" title="其他人的配置参考"></a>其他人的配置参考</h2><p>官方提供了一些大神们的<a href="https://github.com/Hammerspoon/hammerspoon/wiki/Sample-Configurations" target="_blank" rel="noopener">配置样例</a>，可以参考学习。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol><li><a href="https://github.com/Hammerspoon/hammerspoon" target="_blank" rel="noopener">Hammerspoon on Github</a></li><li><a href="https://github.com/Hammerspoon/hammerspoon/wiki/Sample-Configurations" target="_blank" rel="noopener">Sample Configurations</a></li><li><a href="https://spinscale.de/posts/2016-11-08-creating-a-productive-osx-environment-hammerspoon.html" target="_blank" rel="noopener">Creating a productive osx environment - hammerspoon</a></li><li><a href="http://www.hammerspoon.org/go/" target="_blank" rel="noopener">Getting Started with Hammerspoon</a></li><li><a href="https://www.songofcode.com/posts/powerful-hammerspoon/" target="_blank" rel="noopener">Powerful Hammerspoon</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;About-Hammerspoon&quot;&gt;&lt;a href=&quot;#About-Hammerspoon&quot; class=&quot;headerlink&quot; title=&quot;About Hammerspoon&quot;&gt;&lt;/a&gt;About Hammerspoon&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/Hammerspoon/hammerspoon&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hammerspoon&lt;/a&gt; 是 Mac OS 上强大自动化管理工具，&lt;code&gt;Hammerspoon&lt;/code&gt; 的核心只是操作系统和 Lua 脚本引擎之间的桥梁。&lt;code&gt;Hammerspoon&lt;/code&gt; 强大之处在于提供了一组扩展，这些扩展向用户提供了特定的系统功能，有了这些扩展，我们可以编写 Lua 脚本来控制 Mac OS X 系统的许多行为。&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;i class=&quot;fa fa-usd&quot;&gt;&lt;/i&gt; &lt;span class=&quot;built_in&quot;&gt;brew&lt;/span&gt; cask install hammerspoon&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第一次打开需要授予系统辅助功能权限 &lt;code&gt;Enable Accessibility&lt;/code&gt;，如下 2 图。&lt;/p&gt;
&lt;img src=&quot;/blog/img/macos/hammerspoon-preferences.png&quot; class=&quot;image-md&quot; title=&quot;[hammerspoon preferences]&quot;&gt;
&lt;img src=&quot;/blog/img/macos/hammerspoon-system-accessibility.png&quot; class=&quot;image-md&quot; title=&quot;[system accessibility]&quot;&gt;
&lt;h2 id=&quot;配置文件和-Spoon-插件结构&quot;&gt;&lt;a href=&quot;#配置文件和-Spoon-插件结构&quot; class=&quot;headerlink&quot; title=&quot;配置文件和 Spoon 插件结构&quot;&gt;&lt;/a&gt;配置文件和 Spoon 插件结构&lt;/h2&gt;&lt;p&gt;配置文件为 &lt;code&gt;~/.hammerspoon/init.lua&lt;/code&gt;，插件安装目录 &lt;code&gt;~/.hammerspoon/Spoons&lt;/code&gt;。&lt;/p&gt;
&lt;img src=&quot;/blog/img/macos/hammerspoon-tree.png&quot; class=&quot;image-md&quot; title=&quot;[hammerspoon config and plugins]&quot;&gt;
    
    </summary>
    
      <category term="macos" scheme="http://www.4e00.com/categories/macos/"/>
    
    
  </entry>
  
  <entry>
    <title>terminal colors tools and tutorial</title>
    <link href="http://www.4e00.com/linux/2020/03/18/terminal-colors-tools-and-tutorial.html"/>
    <id>http://www.4e00.com/linux/2020/03/18/terminal-colors-tools-and-tutorial.html</id>
    <published>2020-03-18T01:38:00.000Z</published>
    <updated>2020-05-04T02:24:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 <code>terminal</code> 和 <code>vim</code> 配色时，常会用到颜色名字或者对应的数字，一种方式就是查看网页，如 <a href="http://www.4e00.com/tools/xterm-256-colors.html">256 COLORS - CHEAT SHEET</a>，另一种方便的方式，直接在命令行中输出颜色面板和名字，方便配色时引用。</p><h2 id="检查当前-Terminal-是否支持-24bit-色彩"><a href="#检查当前-Terminal-是否支持-24bit-色彩" class="headerlink" title="检查当前 Terminal 是否支持 24bit 色彩"></a>检查当前 Terminal 是否支持 24bit 色彩</h2><p>可以使用以下<a href="https://gist.github.com/sindresorhus/bed863fb8bedf023b833c88c322e44f9" target="_blank" rel="noopener">脚本</a>，在命令行中运行一下，看输出的结果，可以判断当前 <code>terminal</code> 对 truecolors (24bit)支持的情况。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk <span class="string">'BEGIN&#123;</span></span><span class="line"><span class="string">    s="/\\/\\/\\/\\/\\"; s=s s s s s s s s;</span></span><span class="line"><span class="string">    for (colnum = 0; colnum&lt;77; colnum++) &#123;</span></span><span class="line"><span class="string">        r = 255-(colnum*255/76);</span></span><span class="line"><span class="string">        g = (colnum*510/76);</span></span><span class="line"><span class="string">        b = (colnum*255/76);</span></span><span class="line"><span class="string">        if (g&gt;255) g = 510-g;</span></span><span class="line"><span class="string">        printf "\033[48;2;%d;%d;%dm", r,g,b;</span></span><span class="line"><span class="string">        printf "\033[38;2;%d;%d;%dm", 255-r,255-g,255-b;</span></span><span class="line"><span class="string">        printf "%s\033[0m", substr(s,colnum+1,1);</span></span><span class="line"><span class="string">    &#125;</span></span><span class="line"><span class="string">    printf "\n";</span></span><span class="line"><span class="string">&#125;'</span></span></pre></td></tr></table></figure><p>如下是在<code>iTerm.app</code>中的运行结果：</p><img src="/blog/img/linux/terminal-check-24bit-colors.png" class="image-lg" title="[iterm terminal 24bit colors]"><p>如下图是在<code>Terminal.app</code>中的运行结果，目前应该是只支持 256 色，相比而言，<code>iTerm.app</code>的色彩支持更好：</p><img src="/blog/img/linux/terminal-app-256-colors.png" class="image-lg" title="[terminal app 256 colors]"><a id="more"></a><h2 id="Terminal-escape-sequences-说明"><a href="#Terminal-escape-sequences-说明" class="headerlink" title="Terminal escape sequences 说明"></a>Terminal escape sequences 说明</h2><blockquote><p>The ANSI/VT100 terminals and terminal emulators are not just able to display black and white text ; they can display colors and formatted texts thanks to escape sequences. Those sequences are composed of the Escape character (often represented by &quot;<span style="color: deeppink">^[</span>&quot; or &quot;<span style="color: deeppink">&lt;Esc&gt;</span>&quot;) followed by some other characters: &quot;<span style="color: deeppink">&lt;Esc&gt;[<span style="color: purple">FormatCode</span>m</span>&quot;.</p><p>In Bash, the <span style="color: deeppink">&lt;Esc&gt;</span> character can be obtained with the following syntaxes:</p></blockquote><ol><li><kbd>\e</kbd></li><li><kbd>\033</kbd></li><li><kbd>\x1B</kbd></li></ol><blockquote><p>Foreground (text)</p><p>For using one of the 256 colors on the foreground (text color), the control sequence is &quot;<span style="color: deeppink">&lt;Esc&gt;[38;5;<span style="color: purple">ColorNumber</span>m</span>&quot; where ColorNumber is one of the following colors:</p><p>Background</p><p>For using one of the 256 colors on the background, the control sequence is &quot;<span style="color: deeppink">&lt;Esc&gt;[48;5;<span style="color: purple">ColorNumber</span>m</span>&quot; where ColorNumber is one of the following colors:</p></blockquote><p>详细说明可参考 <a href="https://tools.paco.bg/14/" target="_blank" rel="noopener">Bash Colors</a> 和 <a href="https://en.wikipedia.org/wiki/ANSI_escape_code#8-bit" target="_blank" rel="noopener">ANSI escape code</a>。</p><h2 id="24bit-true-colour"><a href="#24bit-true-colour" class="headerlink" title="24bit true colour"></a>24bit true colour</h2><p>24bit 彩色通过 RBG 方式明确指定，其中 <code>fg</code> 为 <code>38</code>，<code>bg</code> 为 <code>48</code>。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span> <span class="string">"\x1b[<span class="variable">$&#123;fg&#125;</span>;2;<span class="variable">$&#123;red&#125;</span>;<span class="variable">$&#123;green&#125;</span>;<span class="variable">$&#123;blue&#125;</span>m\n"</span></span><span class="line"><span class="built_in">printf</span> <span class="string">"\x1b[<span class="variable">$&#123;bg&#125;</span>;2;<span class="variable">$&#123;red&#125;</span>;<span class="variable">$&#123;green&#125;</span>;<span class="variable">$&#123;blue&#125;</span>m\n"</span></span></pre></td></tr></table></figure><p>以下结果输出为白色的则表示不支持 24bit 颜色，如下图是在 <code>iTerm.app</code> 中输出的真彩结果：</p><img src="/blog/img/linux/iterm2-24bit-true-colors-support.png" class="image-lg" title="[iterm2 24bit true colors support]"><h3 id="24bit-true-colors-support-in-neovim-and-vim"><a href="#24bit-true-colors-support-in-neovim-and-vim" class="headerlink" title="24bit true colors support in neovim and vim"></a>24bit true colors support in neovim and vim</h3><ol><li>neovim - since commit <a href="https://github.com/neovim/neovim/commit/8dd415e887923f99ab5daaeba9f0303e173dd1aa" target="_blank" rel="noopener">8dd415e887923f99ab5daaeba9f0303e173dd1aa</a>; need to set <a href="https://neovim.io/doc/user/options.html#%27termguicolors" target="_blank" rel="noopener">termguicolors</a> to enable true color.</li><li>vim - (from 7.4.1770) since commit <a href="https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd" target="_blank" rel="noopener">8a633e3427b47286869aa4b96f2bfc1fe65b25cd</a>; need to set <a href="https://github.com/vim/vim/blob/master/runtime/doc/version8.txt#L202" target="_blank" rel="noopener">termguicolors</a> to enable true color.</li></ol><h2 id="打印-256-色到控制台"><a href="#打印-256-色到控制台" class="headerlink" title="打印 256 色到控制台"></a>打印 256 色到控制台</h2><p>如下<a href="http://askubuntu.com/questions/821157/print-a-256-color-test-pattern-in-the-terminal/821163#821163" target="_blank" rel="noopener">脚本</a>，会输出 256 色示例到控制台，显示对应颜色和色号：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><i class="fa fa-usd"></i> <span class="built_in">curl</span> -s https://gist.githubusercontent.com/HaleTom/89ffe32783f89f403bba96bd7bcd1263/raw/ | bash</span></pre></td></tr></table></figure><p>控制台输出如下图：</p><img src="/blog/img/linux/xterm-256colors-table.png" class="image-lg" title="[xterm-256colors-table]"><p>上面输出的结果中第一行的 16 色(3/4bit)分别对应 8 个背景色和 8 个前景色，可以参考文章说明：<a href="/blog/linux/2007/06/03/table-for-16-color-terminal-escape-sequences.html">table for 16-color terminal escape sequences</a></p><h3 id="ANSI-16-colors-escape-codes"><a href="#ANSI-16-colors-escape-codes" class="headerlink" title="ANSI 16 colors escape codes"></a>ANSI 16 colors escape codes</h3><p>8 背景色和 8 前景色以及粗细字体组合:</p><img src="/blog/img/linux/xterm-16colors-table.png" class="image-lg" title="[xterm-16colors-table]"><h2 id="bash-前景色和背景色-256-色输出示例"><a href="#bash-前景色和背景色-256-色输出示例" class="headerlink" title="bash 前景色和背景色 256 色输出示例"></a>bash 前景色和背景色 256 色输出示例</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><span class="line"></span><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;0..255&#125;; <span class="keyword">do</span> <span class="built_in">printf</span> <span class="string">'\e[48;5;%dm%3d '</span> <span class="variable">$i</span> <span class="variable">$i</span>; (((i+3) % 18)) || <span class="built_in">printf</span> <span class="string">'\e[0m\n\t'</span>; <span class="keyword">done</span></span><span class="line"></span><span class="line"><span class="built_in">printf</span> <span class="string">'\e[0m\n'</span></span><span class="line"><span class="built_in">printf</span> <span class="string">'\n\t'</span></span><span class="line"></span><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;0..255&#125;; <span class="keyword">do</span> <span class="built_in">printf</span> <span class="string">'\x1b[38;5;%dm%3d '</span> <span class="variable">$i</span> <span class="variable">$i</span>; (((i+3) % 18)) || <span class="built_in">printf</span> <span class="string">'\x1b[0m\n\t'</span>; <span class="keyword">done</span></span><span class="line"><span class="built_in">printf</span> <span class="string">'\n'</span></span></pre></td></tr></table></figure><img src="/blog/img/linux/bash-256-colors.png" class="image-lg" title="[bash-256-colors]"><h2 id="zsh-中前景色和背景色设置模式说明"><a href="#zsh-中前景色和背景色设置模式说明" class="headerlink" title="zsh 中前景色和背景色设置模式说明"></a>zsh 中前景色和背景色设置模式说明</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><i class="fa fa-usd"></i> <span class="built_in">man</span> zshmisc</span></pre></td></tr></table></figure><p>上述命令输出内容摘录与前景色后景色设置有关的部分说明如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Visual effects</span><span class="line">    # %B (%b)</span><span class="line">        # Start (stop) boldface mode.</span><span class="line"></span><span class="line">    # %E     Clear to end of line.</span><span class="line"></span><span class="line">    # %U (%u)</span><span class="line">        # Start (stop) underline mode.</span><span class="line"></span><span class="line">    # %S (%s)</span><span class="line">        # Start (stop) standout mode.</span><span class="line"></span><span class="line">    # %F (%f)</span><span class="line">        # Start (stop) using a different foreground colour, if supported by the terminal.  The colour may be  specified  two  ways:</span><span class="line">        # either as a numeric argument, as normal, or by a sequence in braces following the %F, for example %F&#123;red&#125;.  In the latter</span><span class="line">        # case the values allowed are as described for the fg zle_highlight attribute; see  Character  Highlighting  in  zshzle(1).</span><span class="line">        # This means that numeric colours are allowed in the second format also.</span><span class="line"></span><span class="line">    # %K (%k)</span><span class="line">        # Start (stop) using a different bacKground colour.  The syntax is identical to that for %F and %f.</span><span class="line"></span><span class="line">    # %&#123;...%&#125;</span><span class="line">        # Include  a  string  as  a  literal  escape sequence.  The string within the braces should not change the cursor position.</span><span class="line">        # Brace pairs can nest.</span><span class="line"></span><span class="line">        # A positive numeric argument between the % and the &#123; is treated as described for %G below.</span><span class="line"></span><span class="line">    # %G  Within a %&#123;...%&#125; sequence, include a `glitch&apos;: that is, assume that a single character width will  be  output.   This  is</span><span class="line">        # useful  when outputting characters that otherwise cannot be correctly handled by the shell, such as the alternate charac-</span><span class="line">        # ter set on some terminals.  The characters in question can be included within a %&#123;...%&#125; sequence together with the appro-</span><span class="line">        # priate  number  of  %G sequences to indicate the correct width.  An integer between the `%&apos; and `G&apos; indicates a character</span><span class="line">        # width other than one.  Hence %&#123;seq%2G%&#125; outputs seq and assumes it takes up the width of two standard characters.</span><span class="line"></span><span class="line">        # Multiple uses of %G accumulate in the obvious fashion; the position of the %G is unimportant.  Negative integers are  not</span><span class="line">        # handled.</span><span class="line"></span><span class="line">        # Note that when prompt truncation is in use it is advisable to divide up output into single characters within each %&#123;...%&#125;</span><span class="line">        # group so that the correct truncation point can be found.</span></pre></td></tr></table></figure><h2 id="zsh-前景色和背景色-256-色输出示例"><a href="#zsh-前景色和背景色-256-色输出示例" class="headerlink" title="zsh 前景色和背景色 256 色输出示例"></a>zsh 前景色和背景色 256 色输出示例</h2><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env zsh</span></span><span class="line"></span><span class="line"><span class="comment"># You can switch foreground and background colors with the standout mode %S (%s).</span></span><span class="line"><span class="comment"># As you can see, it does not matter in which order the colors and modes (works the same for boldface and underline modes) are set.</span></span><span class="line"><span class="comment"># You can set a foreground color with %F&#123;color&#125; before or after starting standout mode with %S, it is just used as background after %S until you stop standout mode with %s.</span></span><span class="line"><span class="built_in">print</span> -P $<span class="string">'\t unchanged output colors'</span></span><span class="line"><span class="built_in">print</span> -P $<span class="string">'\t%f%k default colors %S standout mode %s'</span></span><span class="line"><span class="built_in">print</span> -P $<span class="string">'\t%F&#123;blue&#125;%K&#123;red&#125; blue on red %f%k'</span></span><span class="line"><span class="built_in">print</span> -P $<span class="string">'\t%S%F&#123;blue&#125;%K&#123;red&#125; red on blue %s blue on red %f%k'</span></span><span class="line"><span class="built_in">print</span> -P $<span class="string">'\t%K&#123;default&#125;%F&#123;blue&#125;%Sdefault background on blue %s%f%k'</span></span><span class="line"><span class="built_in">print</span> -P $<span class="string">'\t%K&#123;red&#125;%F&#123;default&#125;%S red on default foreground %f%k%s'</span></span></pre></td></tr></table></figure><img src="/blog/img/linux/zsh-fg-bg-colors-example.png" class="image-lg" title="[zsh-fg-bg-colors-example]"><h3 id="powerlevel9k-输出前景色和背景色"><a href="#powerlevel9k-输出前景色和背景色" class="headerlink" title="powerlevel9k 输出前景色和背景色"></a>powerlevel9k 输出前景色和背景色</h3><p>上面这个前景色和背景色输出示例，在<code>oh-my-zsh</code>主题<code>powerlevel9k</code>中有个帮助方法，可以用来查看类似的效果，命令如下所示：</p><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line"><i class="fa fa-usd"></i> <span class="built_in">getColorCode</span> foreground</span><span class="line"><i class="fa fa-usd"></i> <span class="built_in">getColorCode</span> background</span></pre></td></tr></table></figure><p>上述二个命令输出截图部分如下：</p><img src="/blog/img/linux/powerlevel9k-get-color-code.png" class="image-lg" title="[powerlevel9k get color code]"><h2 id="scripts-source-code"><a href="#scripts-source-code" class="headerlink" title="scripts source code"></a>scripts source code</h2><p>下面是一些在命令行控制台输出颜色的 <code>bash</code> 或者 <code>zsh</code> 脚本源码。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><span class="line"></span><span class="line"><span class="comment"># prints a color table of 8bg * 8fg * 2 states (regular/bold)</span></span><span class="line"><span class="built_in">echo</span></span><span class="line"><span class="built_in">echo</span> Table <span class="keyword">for</span> 16-color terminal escape sequences.</span><span class="line"><span class="built_in">echo</span> Replace ESC with \\033 <span class="keyword">in</span> bash.</span><span class="line"><span class="built_in">echo</span></span><span class="line"><span class="built_in">echo</span> <span class="string">"Background | Foreground colors"</span></span><span class="line"><span class="built_in">echo</span> <span class="string">"---------------------------------------------------------------------"</span></span><span class="line"><span class="keyword">for</span>((<span class="built_in">bg</span>=40;<span class="built_in">bg</span>&lt;=47;<span class="built_in">bg</span>++)); <span class="keyword">do</span></span><span class="line">    <span class="keyword">for</span>((bold=0;bold&lt;=1;bold++)) <span class="keyword">do</span></span><span class="line">        <span class="built_in">echo</span> -en <span class="string">"\033[0m"</span><span class="string">" ESC[<span class="variable">$&#123;bg&#125;</span>m   | "</span></span><span class="line">        <span class="keyword">for</span>((<span class="built_in">fg</span>=30;<span class="built_in">fg</span>&lt;=37;<span class="built_in">fg</span>++)); <span class="keyword">do</span></span><span class="line">            <span class="keyword">if</span> [ <span class="variable">$bold</span> == <span class="string">"0"</span> ]; <span class="keyword">then</span></span><span class="line">                <span class="built_in">echo</span> -en <span class="string">"\033[<span class="variable">$&#123;bg&#125;</span>m\033[<span class="variable">$&#123;fg&#125;</span>m [<span class="variable">$&#123;fg&#125;</span>m  "</span></span><span class="line">            <span class="keyword">else</span></span><span class="line">                <span class="built_in">echo</span> -en <span class="string">"\033[<span class="variable">$&#123;bg&#125;</span>m\033[1;<span class="variable">$&#123;fg&#125;</span>m [1;<span class="variable">$&#123;fg&#125;</span>m"</span></span><span class="line">            <span class="keyword">fi</span></span><span class="line">        <span class="keyword">done</span></span><span class="line">        <span class="built_in">echo</span> -e <span class="string">"\033[0m"</span></span><span class="line">    <span class="keyword">done</span></span><span class="line">    <span class="built_in">echo</span> <span class="string">"--------------------------------------------------------------------- "</span></span><span class="line"><span class="keyword">done</span></span><span class="line"><span class="built_in">echo</span></span></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><span class="line"></span><span class="line"><span class="comment"># Tom Hale, 2016. MIT Licence.</span></span><span class="line"><span class="comment"># Print out 256 colours, with each number printed in its corresponding colour</span></span><span class="line"><span class="comment"># See http://askubuntu.com/questions/821157/print-a-256-color-test-pattern-in-the-terminal/821163#821163</span></span><span class="line"></span><span class="line"><span class="built_in">set</span> -eu <span class="comment"># Fail on errors or undeclared variables</span></span><span class="line"></span><span class="line">printable_colours=256</span><span class="line"></span><span class="line"><span class="comment"># Return a colour that contrasts with the given colour</span></span><span class="line"><span class="comment"># Bash only does integer division, so keep it integral</span></span><span class="line"><span class="keyword">function</span> contrast_colour &#123;</span><span class="line">    <span class="built_in">local</span> r g b luminance</span><span class="line">    colour=<span class="string">"<span class="variable">$1</span>"</span></span><span class="line"></span><span class="line">    <span class="keyword">if</span> (( colour &lt; 16 )); <span class="keyword">then</span> <span class="comment"># Initial 16 ANSI colours</span></span><span class="line">        (( colour == 0 )) &amp;&amp; <span class="built_in">printf</span> <span class="string">"15"</span> || <span class="built_in">printf</span> <span class="string">"0"</span></span><span class="line">        <span class="built_in">return</span></span><span class="line">    <span class="keyword">fi</span></span><span class="line"></span><span class="line">    <span class="comment"># Greyscale # rgb_R = rgb_G = rgb_B = (number - 232) * 10 + 8</span></span><span class="line">    <span class="keyword">if</span> (( colour &gt; 231 )); <span class="keyword">then</span> <span class="comment"># Greyscale ramp</span></span><span class="line">        (( colour &lt; 244 )) &amp;&amp; <span class="built_in">printf</span> <span class="string">"15"</span> || <span class="built_in">printf</span> <span class="string">"0"</span></span><span class="line">        <span class="built_in">return</span></span><span class="line">    <span class="keyword">fi</span></span><span class="line"></span><span class="line">    <span class="comment"># All other colours:</span></span><span class="line">    <span class="comment"># 6x6x6 colour cube = 16 + 36*R + 6*G + B  # Where RGB are [0..5]</span></span><span class="line">    <span class="comment"># See http://stackoverflow.com/a/27165165/5353461</span></span><span class="line"></span><span class="line">    <span class="comment"># r=$(( (colour-16) / 36 ))</span></span><span class="line">    g=$(( ((colour-16) % 36) / 6 ))</span><span class="line">    <span class="comment"># b=$(( (colour-16) % 6 ))</span></span><span class="line"></span><span class="line">    <span class="comment"># If luminance is bright, print number in black, white otherwise.</span></span><span class="line">    <span class="comment"># Green contributes 587/1000 to human perceived luminance - ITU R-REC-BT.601</span></span><span class="line">    (( g &gt; 2)) &amp;&amp; <span class="built_in">printf</span> <span class="string">"0"</span> || <span class="built_in">printf</span> <span class="string">"15"</span></span><span class="line">    <span class="built_in">return</span></span><span class="line"></span><span class="line">    <span class="comment"># Uncomment the below for more precise luminance calculations</span></span><span class="line"></span><span class="line">    <span class="comment"># # Calculate percieved brightness</span></span><span class="line">    <span class="comment"># # See https://www.w3.org/TR/AERT#color-contrast</span></span><span class="line">    <span class="comment"># # and http://www.itu.int/rec/R-REC-BT.601</span></span><span class="line">    <span class="comment"># # Luminance is in range 0..5000 as each value is 0..5</span></span><span class="line">    <span class="comment"># luminance=$(( (r * 299) + (g * 587) + (b * 114) ))</span></span><span class="line">    <span class="comment"># (( $luminance &gt; 2500 )) &amp;&amp; printf "0" || printf "15"</span></span><span class="line">&#125;</span><span class="line"></span><span class="line"><span class="comment"># Print a coloured block with the number of that colour</span></span><span class="line"><span class="keyword">function</span> print_colour &#123;</span><span class="line">    <span class="built_in">local</span> colour=<span class="string">"<span class="variable">$1</span>"</span> contrast</span><span class="line">    contrast=$(contrast_colour <span class="string">"<span class="variable">$1</span>"</span>)</span><span class="line">    <span class="built_in">printf</span> <span class="string">"\e[48;5;%sm"</span> <span class="string">"<span class="variable">$colour</span>"</span>                <span class="comment"># Start block of colour</span></span><span class="line">    <span class="built_in">printf</span> <span class="string">"\e[38;5;%sm%3d"</span> <span class="string">"<span class="variable">$contrast</span>"</span> <span class="string">"<span class="variable">$colour</span>"</span> <span class="comment"># In contrast, print number</span></span><span class="line">    <span class="built_in">printf</span> <span class="string">"\e[0m "</span>                               <span class="comment"># Reset colour</span></span><span class="line">&#125;</span><span class="line"></span><span class="line"><span class="comment"># Starting at $1, print a run of $2 colours</span></span><span class="line"><span class="keyword">function</span> print_run &#123;</span><span class="line">    <span class="built_in">local</span> i</span><span class="line">    <span class="built_in">printf</span> <span class="string">"  "</span></span><span class="line">    <span class="keyword">for</span> (( i = <span class="string">"<span class="variable">$1</span>"</span>; i &lt; <span class="string">"<span class="variable">$1</span>"</span> + <span class="string">"<span class="variable">$2</span>"</span> &amp;&amp; i &lt; printable_colours; i++ )) <span class="keyword">do</span></span><span class="line">        print_colour <span class="string">"<span class="variable">$i</span>"</span></span><span class="line">    <span class="keyword">done</span></span><span class="line">    <span class="built_in">printf</span> <span class="string">"  "</span></span><span class="line">&#125;</span><span class="line"></span><span class="line"><span class="comment"># Print blocks of colours</span></span><span class="line"><span class="keyword">function</span> print_blocks &#123;</span><span class="line">    <span class="built_in">local</span> start=<span class="string">"<span class="variable">$1</span>"</span> i</span><span class="line">    <span class="built_in">local</span> end=<span class="string">"<span class="variable">$2</span>"</span> <span class="comment"># inclusive</span></span><span class="line">    <span class="built_in">local</span> block_cols=<span class="string">"<span class="variable">$3</span>"</span></span><span class="line">    <span class="built_in">local</span> block_rows=<span class="string">"<span class="variable">$4</span>"</span></span><span class="line">    <span class="built_in">local</span> blocks_per_line=<span class="string">"<span class="variable">$5</span>"</span></span><span class="line">    <span class="built_in">local</span> block_length=$((block_cols * block_rows))</span><span class="line"></span><span class="line">    <span class="comment"># Print sets of blocks</span></span><span class="line">    <span class="keyword">for</span> (( i = start; i &lt;= end; i += (blocks_per_line-1) * block_length )) <span class="keyword">do</span></span><span class="line">        <span class="built_in">printf</span> <span class="string">"\n"</span> <span class="comment"># Space before each set of blocks</span></span><span class="line">        <span class="comment"># For each block row</span></span><span class="line">        <span class="keyword">for</span> (( row = 0; row &lt; block_rows; row++ )) <span class="keyword">do</span></span><span class="line">            <span class="comment"># Print block columns for all blocks on the line</span></span><span class="line">            <span class="keyword">for</span> (( block = 0; block &lt; blocks_per_line; block++ )) <span class="keyword">do</span></span><span class="line">                print_run $(( i + (block * block_length) )) <span class="string">"<span class="variable">$block_cols</span>"</span></span><span class="line">            <span class="keyword">done</span></span><span class="line">            (( i += block_cols )) <span class="comment"># Prepare to print the next row</span></span><span class="line">            <span class="built_in">printf</span> <span class="string">"\n"</span></span><span class="line">        <span class="keyword">done</span></span><span class="line">    <span class="keyword">done</span></span><span class="line">&#125;</span><span class="line"></span><span class="line"><span class="built_in">printf</span> <span class="string">"\n"</span></span><span class="line">print_run 0 16 <span class="comment"># The first 16 colours are spread over the whole spectrum</span></span><span class="line"><span class="built_in">printf</span> <span class="string">"\n"</span></span><span class="line">print_blocks 16 231 6 6 3 <span class="comment"># 6x6x6 colour cube between 16 and 231 inclusive</span></span><span class="line">print_blocks 232 255 12 2 1 <span class="comment"># Not 50, but 24 Shades of Grey</span></span></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><span class="line"></span><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;0..255&#125; ; <span class="keyword">do</span> <span class="built_in">printf</span> <span class="string">"\x1b[38;5;<span class="variable">$&#123;i&#125;</span>mcolour<span class="variable">$&#123;i&#125;</span>\x1b[0m\n"</span>; <span class="keyword">done</span></span><span class="line"></span><span class="line"><span class="built_in">printf</span> <span class="string">'\e[0m\n'</span></span><span class="line"></span><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;0..255&#125; ; <span class="keyword">do</span> <span class="built_in">printf</span> <span class="string">"\e[48;5;<span class="variable">$&#123;i&#125;</span>mcolour<span class="variable">$&#123;i&#125;</span>\e[0m\n"</span>; <span class="keyword">done</span></span></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><span class="line"></span><span class="line"><span class="comment"># This program is free software. It comes without any warranty, to</span></span><span class="line"><span class="comment"># the extent permitted by applicable law. You can redistribute it</span></span><span class="line"><span class="comment"># and/or modify it under the terms of the Do What The Fuck You Want</span></span><span class="line"><span class="comment"># To Public License, Version 2, as published by Sam Hocevar. See</span></span><span class="line"><span class="comment"># http://sam.zoy.org/wtfpl/COPYING for more details.</span></span><span class="line"></span><span class="line"><span class="keyword">for</span> fgbg <span class="keyword">in</span> 38 48 ; <span class="keyword">do</span> <span class="comment">#Foreground/Background</span></span><span class="line">    <span class="keyword">for</span> color <span class="keyword">in</span> &#123;0..255&#125; ; <span class="keyword">do</span> <span class="comment">#Colors</span></span><span class="line">        <span class="comment">#Display the color</span></span><span class="line">        <span class="built_in">echo</span> -en <span class="string">"\e[<span class="variable">$&#123;fgbg&#125;</span>;5;<span class="variable">$&#123;color&#125;</span>m <span class="variable">$&#123;color&#125;</span>\t\e[0m"</span></span><span class="line">        <span class="comment">#Display 10 colors per lines</span></span><span class="line">        <span class="keyword">if</span> [ $(((<span class="variable">$color</span> + 1) % 10)) == 0 ] ; <span class="keyword">then</span></span><span class="line">            <span class="built_in">echo</span> <span class="comment">#New line</span></span><span class="line">        <span class="keyword">fi</span></span><span class="line">    <span class="keyword">done</span></span><span class="line">    <span class="built_in">echo</span> <span class="comment">#New line</span></span><span class="line"><span class="keyword">done</span></span><span class="line"></span><span class="line"><span class="built_in">exit</span> 0</span></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><span class="line"></span><span class="line"><span class="comment"># This program is free software. It comes without any warranty, to</span></span><span class="line"><span class="comment"># the extent permitted by applicable law. You can redistribute it</span></span><span class="line"><span class="comment"># and/or modify it under the terms of the Do What The Fuck You Want</span></span><span class="line"><span class="comment"># To Public License, Version 2, as published by Sam Hocevar. See</span></span><span class="line"><span class="comment"># http://sam.zoy.org/wtfpl/COPYING for more details.</span></span><span class="line"></span><span class="line"><span class="comment">#Background</span></span><span class="line"><span class="keyword">for</span> clbg <span class="keyword">in</span> &#123;40..47&#125; &#123;100..107&#125; 49 ; <span class="keyword">do</span></span><span class="line">    <span class="comment">#Foreground</span></span><span class="line">    <span class="keyword">for</span> clfg <span class="keyword">in</span> &#123;30..37&#125; &#123;90..97&#125; 39 ; <span class="keyword">do</span></span><span class="line">        <span class="comment">#Formatting</span></span><span class="line">        <span class="keyword">for</span> attr <span class="keyword">in</span> 0 1 2 4 5 7 ; <span class="keyword">do</span></span><span class="line">            <span class="comment">#Print the result</span></span><span class="line">            <span class="built_in">echo</span> -en <span class="string">"\e[<span class="variable">$&#123;attr&#125;</span>;<span class="variable">$&#123;clbg&#125;</span>;<span class="variable">$&#123;clfg&#125;</span>m ^[<span class="variable">$&#123;attr&#125;</span>;<span class="variable">$&#123;clbg&#125;</span>;<span class="variable">$&#123;clfg&#125;</span>m \e[0m"</span></span><span class="line">        <span class="keyword">done</span></span><span class="line">        <span class="built_in">echo</span> <span class="comment">#Newline</span></span><span class="line">    <span class="keyword">done</span></span><span class="line"><span class="keyword">done</span></span><span class="line"></span><span class="line"><span class="built_in">exit</span> 0</span></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env zsh</span></span><span class="line"></span><span class="line"><span class="keyword">for</span> code (&#123;000..255&#125;) <span class="built_in">print</span> -P -- <span class="string">"<span class="variable">$code</span>: %F&#123;<span class="variable">$code</span>&#125;This is how your text would look like%f"</span></span><span class="line"><span class="keyword">for</span> code (&#123;000..255&#125;) <span class="built_in">print</span> -P -- <span class="string">"<span class="variable">$code</span>: %K&#123;<span class="variable">$code</span>&#125;This is how your background would look like%k"</span></span></pre></td></tr></table></figure><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env zsh</span></span><span class="line"></span><span class="line"><span class="comment">################################################################</span></span><span class="line"><span class="comment"># vim:ft=zsh ts=2 sw=2 sts=2 et fenc=utf-8</span></span><span class="line"><span class="comment"># Color functions</span></span><span class="line"><span class="comment"># This file holds some color-functions for</span></span><span class="line"><span class="comment"># the powerlevel9k-ZSH-theme</span></span><span class="line"><span class="comment"># https://github.com/bhilburn/powerlevel9k</span></span><span class="line"><span class="comment">################################################################</span></span><span class="line"></span><span class="line"><span class="built_in">typeset</span> -gAh __P9K_COLORS</span><span class="line"><span class="comment"># https://jonasjacek.github.io/colors/</span></span><span class="line"><span class="comment"># use color names by default to allow dark/light themes to adjust colors based on names</span></span><span class="line">__P9K_COLORS=(</span><span class="line">  black             000</span><span class="line">  red               001</span><span class="line">  green             002</span><span class="line">  yellow            003</span><span class="line">  blue              004</span><span class="line">  magenta           005</span><span class="line">  cyan              006</span><span class="line">  white             007</span><span class="line">  grey              008</span><span class="line">  maroon            009</span><span class="line">  lime              010</span><span class="line">  olive             011</span><span class="line">  navy              012</span><span class="line">  fuchsia           013</span><span class="line">  purple            013</span><span class="line">  aqua              014</span><span class="line">  teal              014</span><span class="line">  silver            015</span><span class="line">  grey0             016</span><span class="line">  navyblue          017</span><span class="line">  darkblue          018</span><span class="line">  blue3             019</span><span class="line">  blue3             020</span><span class="line">  blue1             021</span><span class="line">  darkgreen         022</span><span class="line">  deepskyblue4      023</span><span class="line">  deepskyblue4      024</span><span class="line">  deepskyblue4      025</span><span class="line">  dodgerblue3       026</span><span class="line">  dodgerblue2       027</span><span class="line">  green4            028</span><span class="line">  springgreen4      029</span><span class="line">  turquoise4        030</span><span class="line">  deepskyblue3      031</span><span class="line">  deepskyblue3      032</span><span class="line">  dodgerblue1       033</span><span class="line">  green3            034</span><span class="line">  springgreen3      035</span><span class="line">  darkcyan          036</span><span class="line">  lightseagreen     037</span><span class="line">  deepskyblue2      038</span><span class="line">  deepskyblue1      039</span><span class="line">  green3            040</span><span class="line">  springgreen3      041</span><span class="line">  springgreen2      042</span><span class="line">  cyan3             043</span><span class="line">  darkturquoise     044</span><span class="line">  turquoise2        045</span><span class="line">  green1            046</span><span class="line">  springgreen2      047</span><span class="line">  springgreen1      048</span><span class="line">  mediumspringgreen 049</span><span class="line">  cyan2             050</span><span class="line">  cyan1             051</span><span class="line">  darkred           052</span><span class="line">  deeppink4         053</span><span class="line">  purple4           054</span><span class="line">  purple4           055</span><span class="line">  purple3           056</span><span class="line">  blueviolet        057</span><span class="line">  orange4           058</span><span class="line">  grey37            059</span><span class="line">  mediumpurple4     060</span><span class="line">  slateblue3        061</span><span class="line">  slateblue3        062</span><span class="line">  royalblue1        063</span><span class="line">  chartreuse4       064</span><span class="line">  darkseagreen4     065</span><span class="line">  paleturquoise4    066</span><span class="line">  steelblue         067</span><span class="line">  steelblue3        068</span><span class="line">  cornflowerblue    069</span><span class="line">  chartreuse3       070</span><span class="line">  darkseagreen4     071</span><span class="line">  cadetblue         072</span><span class="line">  cadetblue         073</span><span class="line">  skyblue3          074</span><span class="line">  steelblue1        075</span><span class="line">  chartreuse3       076</span><span class="line">  palegreen3        077</span><span class="line">  seagreen3         078</span><span class="line">  aquamarine3       079</span><span class="line">  mediumturquoise   080</span><span class="line">  steelblue1        081</span><span class="line">  chartreuse2       082</span><span class="line">  seagreen2         083</span><span class="line">  seagreen1         084</span><span class="line">  seagreen1         085</span><span class="line">  aquamarine1       086</span><span class="line">  darkslategray2    087</span><span class="line">  darkred           088</span><span class="line">  deeppink4         089</span><span class="line">  darkmagenta       090</span><span class="line">  darkmagenta       091</span><span class="line">  darkviolet        092</span><span class="line">  purple            093</span><span class="line">  orange4           094</span><span class="line">  lightpink4        095</span><span class="line">  plum4             096</span><span class="line">  mediumpurple3     097</span><span class="line">  mediumpurple3     098</span><span class="line">  slateblue1        099</span><span class="line">  yellow4           100</span><span class="line">  wheat4            101</span><span class="line">  grey53            102</span><span class="line">  lightslategrey    103</span><span class="line">  mediumpurple      104</span><span class="line">  lightslateblue    105</span><span class="line">  yellow4           106</span><span class="line">  darkolivegreen3   107</span><span class="line">  darkseagreen      108</span><span class="line">  lightskyblue3     109</span><span class="line">  lightskyblue3     110</span><span class="line">  skyblue2          111</span><span class="line">  chartreuse2       112</span><span class="line">  darkolivegreen3   113</span><span class="line">  palegreen3        114</span><span class="line">  darkseagreen3     115</span><span class="line">  darkslategray3    116</span><span class="line">  skyblue1          117</span><span class="line">  chartreuse1       118</span><span class="line">  lightgreen        119</span><span class="line">  lightgreen        120</span><span class="line">  palegreen1        121</span><span class="line">  aquamarine1       122</span><span class="line">  darkslategray1    123</span><span class="line">  red3              124</span><span class="line">  deeppink4         125</span><span class="line">  mediumvioletred   126</span><span class="line">  magenta3          127</span><span class="line">  darkviolet        128</span><span class="line">  purple            129</span><span class="line">  darkorange3       130</span><span class="line">  indianred         131</span><span class="line">  hotpink3          132</span><span class="line">  mediumorchid3     133</span><span class="line">  mediumorchid      134</span><span class="line">  mediumpurple2     135</span><span class="line">  darkgoldenrod     136</span><span class="line">  lightsalmon3      137</span><span class="line">  rosybrown         138</span><span class="line">  grey63            139</span><span class="line">  mediumpurple2     140</span><span class="line">  mediumpurple1     141</span><span class="line">  gold3             142</span><span class="line">  darkkhaki         143</span><span class="line">  navajowhite3      144</span><span class="line">  grey69            145</span><span class="line">  lightsteelblue3   146</span><span class="line">  lightsteelblue    147</span><span class="line">  yellow3           148</span><span class="line">  darkolivegreen3   149</span><span class="line">  darkseagreen3     150</span><span class="line">  darkseagreen2     151</span><span class="line">  lightcyan3        152</span><span class="line">  lightskyblue1     153</span><span class="line">  greenyellow       154</span><span class="line">  darkolivegreen2   155</span><span class="line">  palegreen1        156</span><span class="line">  darkseagreen2     157</span><span class="line">  darkseagreen1     158</span><span class="line">  paleturquoise1    159</span><span class="line">  red3              160</span><span class="line">  deeppink3         161</span><span class="line">  deeppink3         162</span><span class="line">  magenta3          163</span><span class="line">  magenta3          164</span><span class="line">  magenta2          165</span><span class="line">  darkorange3       166</span><span class="line">  indianred         167</span><span class="line">  hotpink3          168</span><span class="line">  hotpink2          169</span><span class="line">  orchid            170</span><span class="line">  mediumorchid1     171</span><span class="line">  orange3           172</span><span class="line">  lightsalmon3      173</span><span class="line">  lightpink3        174</span><span class="line">  pink3             175</span><span class="line">  plum3             176</span><span class="line">  violet            177</span><span class="line">  gold3             178</span><span class="line">  lightgoldenrod3   179</span><span class="line">  tan               180</span><span class="line">  mistyrose3        181</span><span class="line">  thistle3          182</span><span class="line">  plum2             183</span><span class="line">  yellow3           184</span><span class="line">  khaki3            185</span><span class="line">  lightgoldenrod2   186</span><span class="line">  lightyellow3      187</span><span class="line">  grey84            188</span><span class="line">  lightsteelblue1   189</span><span class="line">  yellow2           190</span><span class="line">  darkolivegreen1   191</span><span class="line">  darkolivegreen1   192</span><span class="line">  darkseagreen1     193</span><span class="line">  honeydew2         194</span><span class="line">  lightcyan1        195</span><span class="line">  red1              196</span><span class="line">  deeppink2         197</span><span class="line">  deeppink1         198</span><span class="line">  deeppink1         199</span><span class="line">  magenta2          200</span><span class="line">  magenta1          201</span><span class="line">  orangered1        202</span><span class="line">  indianred1        203</span><span class="line">  indianred1        204</span><span class="line">  hotpink           205</span><span class="line">  hotpink           206</span><span class="line">  mediumorchid1     207</span><span class="line">  darkorange        208</span><span class="line">  salmon1           209</span><span class="line">  lightcoral        210</span><span class="line">  palevioletred1    211</span><span class="line">  orchid2           212</span><span class="line">  orchid1           213</span><span class="line">  orange1           214</span><span class="line">  sandybrown        215</span><span class="line">  lightsalmon1      216</span><span class="line">  lightpink1        217</span><span class="line">  pink1             218</span><span class="line">  plum1             219</span><span class="line">  gold1             220</span><span class="line">  lightgoldenrod2   221</span><span class="line">  lightgoldenrod2   222</span><span class="line">  navajowhite1      223</span><span class="line">  mistyrose1        224</span><span class="line">  thistle1          225</span><span class="line">  yellow1           226</span><span class="line">  lightgoldenrod1   227</span><span class="line">  khaki1            228</span><span class="line">  wheat1            229</span><span class="line">  cornsilk1         230</span><span class="line">  grey100           231</span><span class="line">  grey3             232</span><span class="line">  grey7             233</span><span class="line">  grey11            234</span><span class="line">  grey15            235</span><span class="line">  grey19            236</span><span class="line">  grey23            237</span><span class="line">  grey27            238</span><span class="line">  grey30            239</span><span class="line">  grey35            240</span><span class="line">  grey39            241</span><span class="line">  grey42            242</span><span class="line">  grey46            243</span><span class="line">  grey50            244</span><span class="line">  grey54            245</span><span class="line">  grey58            246</span><span class="line">  grey62            247</span><span class="line">  grey66            248</span><span class="line">  grey70            249</span><span class="line">  grey74            250</span><span class="line">  grey78            251</span><span class="line">  grey82            252</span><span class="line">  grey85            253</span><span class="line">  grey89            254</span><span class="line">  grey93            255</span><span class="line">)</span><span class="line"></span><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">termColors</span></span>() &#123;</span><span class="line">  <span class="keyword">if</span> [[ <span class="variable">$POWERLEVEL9K_IGNORE_TERM_COLORS</span> == <span class="literal">true</span> ]]; <span class="keyword">then</span></span><span class="line">    <span class="built_in">return</span></span><span class="line">  <span class="keyword">fi</span></span><span class="line"></span><span class="line">  <span class="built_in">local</span> term_colors</span><span class="line"></span><span class="line">  <span class="keyword">if</span> <span class="built_in">which</span> tput &amp;&gt;/dev/null; <span class="keyword">then</span></span><span class="line">    term_colors=$(tput colors)</span><span class="line">  <span class="keyword">else</span></span><span class="line">    term_colors=$(<span class="built_in">echotc</span> Co)</span><span class="line">  <span class="keyword">fi</span></span><span class="line">  <span class="keyword">if</span> (( ! $? &amp;&amp; <span class="variable">$&#123;term_colors:-0&#125;</span> &lt; 256 )); <span class="keyword">then</span></span><span class="line">    <span class="built_in">print</span> -P <span class="string">"%F&#123;red&#125;WARNING!%f Your terminal appears to support fewer than 256 colors!"</span></span><span class="line">    <span class="built_in">print</span> -P <span class="string">"If your terminal supports 256 colors, please export the appropriate environment variable"</span></span><span class="line">    <span class="built_in">print</span> -P <span class="string">"_before_ loading this theme in your \~\/.zshrc. In most terminal emulators, putting"</span></span><span class="line">    <span class="built_in">print</span> -P <span class="string">"%F&#123;blue&#125;export TERM=\"xterm-256color\"%f at the top of your \~\/.zshrc is sufficient."</span></span><span class="line">  <span class="keyword">fi</span></span><span class="line">&#125;</span><span class="line"></span><span class="line"><span class="comment"># get the proper color code if it does not exist as a name.</span></span><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">getColor</span></span>() &#123;</span><span class="line">  <span class="comment"># If Color is not numerical, try to get the color code.</span></span><span class="line">  <span class="keyword">if</span> [[ <span class="string">"<span class="variable">$1</span>"</span> != &lt;-&gt; ]]; <span class="keyword">then</span></span><span class="line">    1=$(getColorCode <span class="variable">$1</span>)</span><span class="line">  <span class="keyword">fi</span></span><span class="line">  <span class="built_in">echo</span> -n <span class="string">"<span class="variable">$1</span>"</span></span><span class="line">&#125;</span><span class="line"></span><span class="line"><span class="comment"># empty paramenter resets (stops) background color</span></span><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">backgroundColor</span></span>() &#123;</span><span class="line">  <span class="built_in">echo</span> -n <span class="string">"%K&#123;<span class="variable">$(getColor $1)</span>&#125;"</span></span><span class="line">&#125;</span><span class="line"></span><span class="line"><span class="comment"># empty paramenter resets (stops) foreground color</span></span><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">foregroundColor</span></span>() &#123;</span><span class="line">  <span class="built_in">echo</span> -n <span class="string">"%F&#123;<span class="variable">$(getColor $1)</span>&#125;"</span></span><span class="line">&#125;</span><span class="line"></span><span class="line"><span class="comment"># Get numerical color codes. That way we translate ANSI codes</span></span><span class="line"><span class="comment"># into ZSH-Style color codes.</span></span><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">getColorCode</span></span>() &#123;</span><span class="line">  <span class="comment"># Early exit: Check if given value is already numerical</span></span><span class="line">  <span class="keyword">if</span> [[ <span class="string">"<span class="variable">$1</span>"</span> == &lt;-&gt; ]]; <span class="keyword">then</span></span><span class="line">    <span class="comment"># Pad color with zeroes</span></span><span class="line">    <span class="built_in">echo</span> -n <span class="string">"<span class="variable">$&#123;(l:3::0:)1&#125;</span>"</span></span><span class="line">    <span class="built_in">return</span></span><span class="line">  <span class="keyword">fi</span></span><span class="line"></span><span class="line">  <span class="built_in">local</span> colorName=<span class="string">"<span class="variable">$&#123;1&#125;</span>"</span></span><span class="line">  <span class="comment"># Check if value is none with any case.</span></span><span class="line">  <span class="keyword">if</span> [[ <span class="string">"<span class="variable">$&#123;(L)colorName&#125;</span>"</span> == <span class="string">"none"</span> ]]; <span class="keyword">then</span></span><span class="line">      <span class="built_in">echo</span> -n <span class="string">'none'</span></span><span class="line">  <span class="keyword">elif</span> [[ <span class="string">"<span class="variable">$&#123;colorName&#125;</span>"</span> == <span class="string">"foreground"</span>  ]]; <span class="keyword">then</span></span><span class="line">      <span class="comment"># for testing purposes in terminal</span></span><span class="line">      <span class="comment"># call via `getColorCode foreground`</span></span><span class="line">      <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">"<span class="variable">$&#123;(k@)__P9K_COLORS&#125;</span>"</span>; <span class="keyword">do</span></span><span class="line">          <span class="built_in">print</span> -P <span class="string">"<span class="variable">$(foregroundColor $i)</span><span class="variable">$(getColor $i)</span> - <span class="variable">$i</span>%f"</span></span><span class="line">      <span class="keyword">done</span></span><span class="line">  <span class="keyword">elif</span> [[ <span class="string">"<span class="variable">$&#123;colorName&#125;</span>"</span> == <span class="string">"background"</span>  ]]; <span class="keyword">then</span></span><span class="line">      <span class="comment"># call via `getColorCode background`</span></span><span class="line">      <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">"<span class="variable">$&#123;(k@)__P9K_COLORS&#125;</span>"</span>; <span class="keyword">do</span></span><span class="line">          <span class="built_in">print</span> -P <span class="string">"<span class="variable">$(backgroundColor $i)</span><span class="variable">$(getColor $i)</span> - <span class="variable">$i</span>%k"</span></span><span class="line">      <span class="keyword">done</span></span><span class="line">  <span class="keyword">else</span></span><span class="line">      <span class="comment"># Strip eventual "bg-" prefixes</span></span><span class="line">      colorName=<span class="variable">$&#123;colorName#bg-&#125;</span></span><span class="line">      <span class="comment"># Strip eventual "fg-" prefixes</span></span><span class="line">      colorName=<span class="variable">$&#123;colorName#fg-&#125;</span></span><span class="line">      <span class="comment"># Strip eventual "br" prefixes ("bright" colors)</span></span><span class="line">      colorName=<span class="variable">$&#123;colorName#br&#125;</span></span><span class="line">      <span class="built_in">echo</span> -n <span class="variable">$__P9K_COLORS</span>[<span class="variable">$colorName</span>]</span><span class="line">  <span class="keyword">fi</span></span><span class="line">&#125;</span><span class="line"></span><span class="line"><span class="comment"># Check if two colors are equal, even if one is specified as ANSI code.</span></span><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">isSameColor</span></span>() &#123;</span><span class="line">  <span class="keyword">if</span> [[ <span class="string">"<span class="variable">$1</span>"</span> == <span class="string">"NONE"</span> || <span class="string">"<span class="variable">$2</span>"</span> == <span class="string">"NONE"</span> ]]; <span class="keyword">then</span></span><span class="line">    <span class="built_in">return</span> 1</span><span class="line">  <span class="keyword">fi</span></span><span class="line"></span><span class="line">  <span class="built_in">local</span> color1=$(getColorCode <span class="string">"<span class="variable">$1</span>"</span>)</span><span class="line">  <span class="built_in">local</span> color2=$(getColorCode <span class="string">"<span class="variable">$2</span>"</span>)</span><span class="line"></span><span class="line">  <span class="built_in">return</span> $(( color1 != color2 ))</span><span class="line">&#125;</span></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol><li><a href="http://www.4e00.com/tools/xterm-256-colors.html">256 COLORS - CHEAT SHEET</a></li><li><a href="/blog/linux/2007/06/03/table-for-16-color-terminal-escape-sequences.html">table for 16-color terminal escape sequences</a></li><li><a href="https://tools.paco.bg/14/" target="_blank" rel="noopener">Bash Colors</a></li><li><a href="https://upload.wikimedia.org/wikipedia/commons/1/15/Xterm_256color_chart.svg" target="_blank" rel="noopener">Xterm 256color chart SVG</a></li><li><a href="/tools/xterm-256color-chart.png">Xterm 256color chart PNG</a></li><li><a href="https://stackoverflow.com/questions/24188309/zsh-256colors-default-background-color-as-foreground-color" target="_blank" rel="noopener">zsh 256colors: default background color as foreground color</a></li><li><a href="https://jonasjacek.github.io/colors/" target="_blank" rel="noopener">colors.zsh of powerlevel9k</a></li><li><a href="https://en.wikipedia.org/wiki/ANSI_escape_code" target="_blank" rel="noopener">ANSI escape code</a></li><li><a href="https://stackoverflow.com/questions/5947742/how-to-change-the-output-color-of-echo-in-linux" target="_blank" rel="noopener">How to change the output color of echo in Linux</a></li><li><a href="https://askubuntu.com/questions/821157/print-a-256-color-test-pattern-in-the-terminal" target="_blank" rel="noopener">Print a 256-color test pattern in the terminal</a></li><li><a href="https://gist.github.com/sindresorhus/bed863fb8bedf023b833c88c322e44f9" target="_blank" rel="noopener">Colours in terminal</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 &lt;code&gt;terminal&lt;/code&gt; 和 &lt;code&gt;vim&lt;/code&gt; 配色时，常会用到颜色名字或者对应的数字，一种方式就是查看网页，如 &lt;a href=&quot;http://www.4e00.com/tools/xterm-256-colors.html&quot;&gt;256 COLORS - CHEAT SHEET&lt;/a&gt;，另一种方便的方式，直接在命令行中输出颜色面板和名字，方便配色时引用。&lt;/p&gt;
&lt;h2 id=&quot;检查当前-Terminal-是否支持-24bit-色彩&quot;&gt;&lt;a href=&quot;#检查当前-Terminal-是否支持-24bit-色彩&quot; class=&quot;headerlink&quot; title=&quot;检查当前 Terminal 是否支持 24bit 色彩&quot;&gt;&lt;/a&gt;检查当前 Terminal 是否支持 24bit 色彩&lt;/h2&gt;&lt;p&gt;可以使用以下&lt;a href=&quot;https://gist.github.com/sindresorhus/bed863fb8bedf023b833c88c322e44f9&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;脚本&lt;/a&gt;，在命令行中运行一下，看输出的结果，可以判断当前 &lt;code&gt;terminal&lt;/code&gt; 对 truecolors (24bit)支持的情况。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;awk &lt;span class=&quot;string&quot;&gt;&#39;BEGIN&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    s=&quot;/\\/\\/\\/\\/\\&quot;; s=s s s s s s s s;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    for (colnum = 0; colnum&amp;lt;77; colnum++) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;        r = 255-(colnum*255/76);&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;        g = (colnum*510/76);&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;        b = (colnum*255/76);&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;        if (g&amp;gt;255) g = 510-g;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;        printf &quot;\033[48;2;%d;%d;%dm&quot;, r,g,b;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;        printf &quot;\033[38;2;%d;%d;%dm&quot;, 255-r,255-g,255-b;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;        printf &quot;%s\033[0m&quot;, substr(s,colnum+1,1);&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    printf &quot;\n&quot;;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;#125;&#39;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如下是在&lt;code&gt;iTerm.app&lt;/code&gt;中的运行结果：&lt;/p&gt;
&lt;img src=&quot;/blog/img/linux/terminal-check-24bit-colors.png&quot; class=&quot;image-lg&quot; title=&quot;[iterm terminal 24bit colors]&quot;&gt;
&lt;p&gt;如下图是在&lt;code&gt;Terminal.app&lt;/code&gt;中的运行结果，目前应该是只支持 256 色，相比而言，&lt;code&gt;iTerm.app&lt;/code&gt;的色彩支持更好：&lt;/p&gt;
&lt;img src=&quot;/blog/img/linux/terminal-app-256-colors.png&quot; class=&quot;image-lg&quot; title=&quot;[terminal app 256 colors]&quot;&gt;
    
    </summary>
    
      <category term="linux" scheme="http://www.4e00.com/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>vim killer plugin - 2html.vim</title>
    <link href="http://www.4e00.com/linux/2020/03/14/vim-killer-plugin-2html.html"/>
    <id>http://www.4e00.com/linux/2020/03/14/vim-killer-plugin-2html.html</id>
    <published>2020-03-14T04:46:18.000Z</published>
    <updated>2020-03-23T07:41:56.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>2html.vim</code> 这个内置插件的文档说明：</p><blockquote><p>Vim provides a script that can create an html document (including the foreground and background colors, and syntax highlighting) from the current file, or from selected lines. <a href="http://vimdoc.sourceforge.net/htmldoc/syntax.html#convert-to-HTML" target="_blank" rel="noopener">:help convert-to-HTML</a></p></blockquote><h2 id="2html-vim-帮助文档里的示例"><a href="#2html-vim-帮助文档里的示例" class="headerlink" title="2html.vim 帮助文档里的示例"></a>2html.vim 帮助文档里的示例</h2><p>Here is an example how to run the script over all .c and .h files from a Unix shell:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><i class="fa fa-usd"></i> <span class="keyword">for</span> f <span class="keyword">in</span> *.[ch]; <span class="keyword">do</span> gvim -f +<span class="string">"syn on"</span> +<span class="string">"run! syntax/2html.vim"</span> +<span class="string">"wq"</span> +<span class="string">"q"</span> <span class="variable">$f</span>; <span class="keyword">done</span></span></pre></td></tr></table></figure><a id="more"></a><h2 id="印象笔记的排版问题"><a href="#印象笔记的排版问题" class="headerlink" title="印象笔记的排版问题"></a>印象笔记的排版问题</h2><p>印象笔记里格式化代码片断和处理笔记排版并不是很方便，所以利用 vim 导出文件，并指定主题配色导出为 html 页面，然后在本地打开一个本地 web 服务器，显示此 html 文件，再利用印象笔记的浏览器插件<code>Evernote Web Clipper</code>，将当前文件收录到印象笔记中，就可以保留此文件内容在 vim 中一样的配色和排版结果。</p><p>操作如下，首先为 2html 插件单独写了一份 vimrc 配置文件<code>2html.vimrc</code>，内容如下：</p><h2 id="2html-vimrc"><a href="#2html-vimrc" class="headerlink" title="2html.vimrc"></a>2html.vimrc</h2><p>这个文件中包括 vim 的一些基本配置和主题配色设置：</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> nocompatible</span><span class="line"></span><span class="line"><span class="keyword">syntax</span> <span class="keyword">on</span></span><span class="line"><span class="keyword">set</span> encoding=utf-<span class="number">8</span></span><span class="line"><span class="keyword">set</span> nobackup</span><span class="line"><span class="keyword">set</span> noswapfile</span><span class="line"></span><span class="line"><span class="keyword">colorscheme</span> darkblue</span></pre></td></tr></table></figure><h2 id="convert-to-HTML"><a href="#convert-to-HTML" class="headerlink" title="convert-to-HTML"></a>convert-to-HTML</h2><p>运行以下命令，可以生成一个 html 文件：<code>2html.vimrc.html</code>，最后面的参数代表需要导出的文件位置，并在相同位置生成对应的 html 文件。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><i class="fa fa-usd"></i> <span class="built_in">vim</span> -u 2html.vimrc -c TOhtml -c wqa 2html.vimrc</span></pre></td></tr></table></figure><h2 id="在-html-文件生成位置运行-http-server"><a href="#在-html-文件生成位置运行-http-server" class="headerlink" title="在 html 文件生成位置运行 http server"></a>在 html 文件生成位置运行 http server</h2><p>这个用 python2 如下命令启动服务器：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><i class="fa fa-usd"></i> <span class="built_in">python</span> -m SimpleHTTPServer 8080</span></pre></td></tr></table></figure><p>或者 python3 如下命令启动服务器：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><i class="fa fa-usd"></i> <span class="built_in">python</span> -m http.server 8080</span></pre></td></tr></table></figure><p>个人最常用的是 node 的 <code>http-server</code> 工具：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><i class="fa fa-usd"></i> <span class="built_in">http-server</span></span></pre></td></tr></table></figure><h2 id="浏览器里打开页面"><a href="#浏览器里打开页面" class="headerlink" title="浏览器里打开页面"></a>浏览器里打开页面</h2><p>访问<code>http://localhost:8080</code>即可显示文件列表，找到对应生成的 html 文件即可，如上述命令生成的地址为：</p><blockquote><p><a href="http://localhost:8080/2html.vimrc.html" target="_blank" rel="noopener">http://localhost:8080/2html.vimrc.html</a></p></blockquote><p>浏览器中显示效果截屏如下：</p><img src="/blog/img/linux/vim/2html.png" class="image-md" title="[2html.vimrc.html]"><h2 id="用印象笔记的浏览器插件保存当前页面"><a href="#用印象笔记的浏览器插件保存当前页面" class="headerlink" title="用印象笔记的浏览器插件保存当前页面"></a>用印象笔记的浏览器插件保存当前页面</h2><p>印象笔记里的内容就和上面截图的效果是一致的。</p><h2 id="个人配置"><a href="#个人配置" class="headerlink" title="个人配置"></a>个人配置</h2><p>个人的主题配色换了另一个<code>molokai</code>，并且主要在 MacOS 中使用，简单写了个脚本来做这个事。</p><h3 id="tohtml-vimrc"><a href="#tohtml-vimrc" class="headerlink" title="tohtml.vimrc"></a>tohtml.vimrc</h3><p>这个文件保存位置：<code>~/.vim/tohtml.vimrc</code></p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> nocompatible</span><span class="line"></span><span class="line"><span class="keyword">filetype</span> off</span><span class="line"><span class="keyword">set</span> rtp+=~/.<span class="keyword">vim</span>/bundle/Vundle.<span class="keyword">vim</span></span><span class="line"></span><span class="line"><span class="keyword">call</span> vundle#begin()</span><span class="line">Plugin <span class="string">'tomasr/molokai'</span></span><span class="line"><span class="keyword">call</span> vundle#end()</span><span class="line"></span><span class="line"><span class="keyword">syntax</span> <span class="keyword">on</span></span><span class="line"></span><span class="line"><span class="keyword">set</span> encoding=utf-<span class="number">8</span></span><span class="line"><span class="keyword">set</span> nobackup</span><span class="line"><span class="keyword">set</span> noswapfile</span><span class="line"></span><span class="line"><span class="keyword">colorscheme</span> molokai</span></pre></td></tr></table></figure><h3 id="bash-script"><a href="#bash-script" class="headerlink" title="bash script"></a>bash script</h3><p>所有文件我复制到 <code>~/vscode/html</code> 目录下，再生成 html 文件，并自动打开浏览器显示。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><span class="line"></span><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -eq 1 ]; <span class="keyword">then</span></span><span class="line">    FILE=<span class="string">"<span class="variable">$1</span>"</span></span><span class="line">    <span class="keyword">if</span> [ -f <span class="string">"<span class="variable">$FILE</span>"</span> ]; <span class="keyword">then</span></span><span class="line">        dest=~/vscode/html</span><span class="line">        f=<span class="string">"<span class="variable">$(basename -- $FILE)</span>"</span></span><span class="line"></span><span class="line">        cp <span class="variable">$1</span> <span class="variable">$dest</span></span><span class="line">        <span class="built_in">cd</span> <span class="variable">$dest</span></span><span class="line">        LANG=en_US.UTF-8 vim -u ~/.vim/tohtml.vimrc -c TOhtml -c wqa <span class="variable">$f</span></span><span class="line">        open <span class="string">"http://localhost:8080/<span class="variable">$f</span>.html"</span></span><span class="line">        http-server -p 8080</span><span class="line">    <span class="keyword">else</span></span><span class="line">        <span class="built_in">echo</span> <span class="string">"<span class="variable">$FILE</span> not exists"</span></span><span class="line">        <span class="built_in">exit</span> 1</span><span class="line">    <span class="keyword">fi</span></span><span class="line"><span class="keyword">fi</span></span></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol><li><a href="http://vimdoc.sourceforge.net/htmldoc/syntax.html#convert-to-HTML" target="_blank" rel="noopener">:help convert-to-HTML</a></li><li><a href="https://vim.fandom.com/wiki/Pasting_code_with_syntax_coloring_in_emails" target="_blank" rel="noopener">Pasting code with syntax coloring in emails</a></li><li><a href="https://stackoverflow.com/questions/23983885/vim-how-to-run-tohtml-on-all-files-within-current-directory-via-a-single-com" target="_blank" rel="noopener">How to run :TOhtml on all files within current directory via a single command</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;2html.vim&lt;/code&gt; 这个内置插件的文档说明：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Vim provides a script that can create an html document (including the foreground and background colors, and syntax highlighting) from the current file, or from selected lines. &lt;a href=&quot;http://vimdoc.sourceforge.net/htmldoc/syntax.html#convert-to-HTML&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;:help convert-to-HTML&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;2html-vim-帮助文档里的示例&quot;&gt;&lt;a href=&quot;#2html-vim-帮助文档里的示例&quot; class=&quot;headerlink&quot; title=&quot;2html.vim 帮助文档里的示例&quot;&gt;&lt;/a&gt;2html.vim 帮助文档里的示例&lt;/h2&gt;&lt;p&gt;Here is an example how to run the script over all .c and .h files from a Unix shell:&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;i class=&quot;fa fa-usd&quot;&gt;&lt;/i&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; f &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; *.[ch]; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; gvim -f +&lt;span class=&quot;string&quot;&gt;&quot;syn on&quot;&lt;/span&gt; +&lt;span class=&quot;string&quot;&gt;&quot;run! syntax/2html.vim&quot;&lt;/span&gt; +&lt;span class=&quot;string&quot;&gt;&quot;wq&quot;&lt;/span&gt; +&lt;span class=&quot;string&quot;&gt;&quot;q&quot;&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$f&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;done&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="linux" scheme="http://www.4e00.com/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>disable macos shortcut command-h</title>
    <link href="http://www.4e00.com/macos/2020/03/11/disable-macos-shortcut-command-h.html"/>
    <id>http://www.4e00.com/macos/2020/03/11/disable-macos-shortcut-command-h.html</id>
    <published>2020-03-11T14:18:00.000Z</published>
    <updated>2020-03-18T14:54:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>MacOS 使用时经常会误按到<code>Command-H</code>快捷键，或者就是这个快捷键希望绑定在另一个菜单功能上，在网上查了一下，只能按应用单独配置，并且根据应用中下拉菜单的文字进行匹配设置快捷键，菜单文字匹配时区分大小写。</p><p>功能修改位置：<code>System Preferences</code> -&gt; <code>Keyboard</code> -&gt; <code>Shortcuts</code> -&gt; <code>App Shortcuts</code> -&gt; <code>+</code>.</p><p>如下示例，我把 <code>iTerm2</code> 水平分隔的快捷键改成 <code>command+H</code>，避免与原来的隐藏功能冲突，也可以修改原来默认的 <code>Command+H</code> 的快捷键，如修改了 <code>VMware Fusion</code> 默认的隐藏快捷键：</p><a id="more"></a><img src="/blog/img/macos/macos-shortcuts-modify.png" class="image-lg" title="[macos-shortcuts-modify]"><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol><li><a href="https://superuser.com/questions/1043596/mac-osx-remove-hide-window-keyboard-shortcut" target="_blank" rel="noopener">Mac OSX remove Hide Window keyboard shortcut</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MacOS 使用时经常会误按到&lt;code&gt;Command-H&lt;/code&gt;快捷键，或者就是这个快捷键希望绑定在另一个菜单功能上，在网上查了一下，只能按应用单独配置，并且根据应用中下拉菜单的文字进行匹配设置快捷键，菜单文字匹配时区分大小写。&lt;/p&gt;
&lt;p&gt;功能修改位置：&lt;code&gt;System Preferences&lt;/code&gt; -&amp;gt; &lt;code&gt;Keyboard&lt;/code&gt; -&amp;gt; &lt;code&gt;Shortcuts&lt;/code&gt; -&amp;gt; &lt;code&gt;App Shortcuts&lt;/code&gt; -&amp;gt; &lt;code&gt;+&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;如下示例，我把 &lt;code&gt;iTerm2&lt;/code&gt; 水平分隔的快捷键改成 &lt;code&gt;command+H&lt;/code&gt;，避免与原来的隐藏功能冲突，也可以修改原来默认的 &lt;code&gt;Command+H&lt;/code&gt; 的快捷键，如修改了 &lt;code&gt;VMware Fusion&lt;/code&gt; 默认的隐藏快捷键：&lt;/p&gt;
    
    </summary>
    
      <category term="macos" scheme="http://www.4e00.com/categories/macos/"/>
    
    
  </entry>
  
  <entry>
    <title>openjdk asmtools usage examples</title>
    <link href="http://www.4e00.com/java/2019/04/28/openjdk-asmtools-usage-examples.html"/>
    <id>http://www.4e00.com/java/2019/04/28/openjdk-asmtools-usage-examples.html</id>
    <published>2019-04-28T07:48:56.000Z</published>
    <updated>2019-04-27T16:34:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="asmtools"><a href="#asmtools" class="headerlink" title="asmtools"></a>asmtools</h2><p>AsmTools 由一组（Java 类文件）汇编程序/反汇编程序组成：</p><ol><li><p>Jasm / Jdis: 一种汇编语言，提供类似 Java 的成员签名声明，同时提供符合 Java VM 规范的字节码指令助记符。Jasm 还为 classfile 属性中常见的构造提供高级语法。Jasm 编码测试对于对字节代码进行排序非常有用，因为 Javac 编译的代码通常不会对字节代码进行排序。</p></li><li><p>JCod / JDec: 一种汇编语言，提供类文件结构的字节码容器。</p></li></ol><p>AsmTools 是完全自反的，Java 二进制（.class）文件可以被反汇编成文本表示，而文本表示又可以汇编回同一个二进制文件。</p><h3 id="Downloads"><a href="#Downloads" class="headerlink" title="Downloads"></a>Downloads</h3><p><a href="https://wiki.openjdk.java.net/display/CodeTools/asmtools" target="_blank" rel="noopener">https://wiki.openjdk.java.net/display/CodeTools/asmtools</a> 下载 jar 包或者在 github 上搜索下载 <code>asmtools.jar</code>。</p><a id="more"></a><h3 id="bash-scripts-for-jdis"><a href="#bash-scripts-for-jdis" class="headerlink" title="bash scripts for jdis"></a>bash scripts for jdis</h3><p>设置二个 bash 脚本，添加可执行权限，方便后面命令执行。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><span class="line"></span><span class="line">java -jar asmtools.jar jdis <span class="variable">$@</span></span></pre></td></tr></table></figure><h3 id="bash-scripts-for-jasm"><a href="#bash-scripts-for-jasm" class="headerlink" title="bash scripts for jasm"></a>bash scripts for jasm</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><span class="line"></span><span class="line">java -jar asmtools.jar jasm <span class="variable">$@</span></span></pre></td></tr></table></figure><h3 id="java-源码"><a href="#java-源码" class="headerlink" title="java 源码"></a>java 源码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><span class="line"></span><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><span class="line">        System.out.println(<span class="string">"Hello World"</span>);</span><span class="line">    &#125;</span><span class="line"></span><span class="line">&#125;</span></pre></td></tr></table></figure><h3 id="jdis-jasm"><a href="#jdis-jasm" class="headerlink" title="jdis / jasm"></a>jdis / jasm</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><i class="fa fa-usd"></i> <span class="built_in">jdis</span> HelloWorld.class</span><span class="line output">super public class HelloWorld</span><span class="line output">        version 52:0</span><span class="line output">&#123;</span><span class="line output"></span><span class="line output"></span><span class="line output">public Method <span class="string">"&lt;init&gt;"</span>:<span class="string">"()V"</span></span><span class="line output">        stack 1 locals 1</span><span class="line output">&#123;</span><span class="line output">                aload_0;</span><span class="line output">                invokespecial   Method java/lang/Object.<span class="string">"&lt;init&gt;"</span>:<span class="string">"()V"</span>;</span><span class="line output">                <span class="built_in">return</span>;</span><span class="line output"></span><span class="line output">&#125;</span><span class="line output"></span><span class="line output">public static Method main:<span class="string">"([Ljava/lang/String;)V"</span></span><span class="line output">        stack 2 locals 1</span><span class="line output">&#123;</span><span class="line output">                getstatic       Field java/lang/System.out:<span class="string">"Ljava/io/PrintStream;"</span>;</span><span class="line output">                ldc     String <span class="string">"Hello World"</span>;</span><span class="line output">                invokevirtual   Method java/io/PrintStream.println:<span class="string">"(Ljava/lang/String;)V"</span>;</span><span class="line output">                <span class="built_in">return</span>;</span><span class="line output"></span><span class="line output">&#125;</span><span class="line output"></span><span class="line output">&#125; // end Class HelloWorld</span><span class="line"></span><span class="line"><i class="fa fa-usd"></i> <span class="built_in">jdis</span> HelloWorld.class &gt; HelloWorld.jdis</span><span class="line"></span><span class="line"><span class="comment"># 删除原来的 HelloWorld.class 文件</span></span><span class="line"><i class="fa fa-usd"></i> <span class="built_in">rm</span> -f HelloWorld.class</span><span class="line"></span><span class="line"><span class="comment"># 用 jasm 生成 HelloWorld.class 文件</span></span><span class="line"><i class="fa fa-usd"></i> <span class="built_in">jasm</span> HelloWorld.jdis</span><span class="line"></span><span class="line"><i class="fa fa-usd"></i> <span class="built_in">ll</span> HelloWorld.class</span><span class="line output">-rw-r--r-- 1 yu staff 379 Apr 27 23:55 HelloWorld.class</span><span class="line"></span><span class="line"><span class="comment"># 运行 jasm 生的 HelloWorld.class</span></span><span class="line"><i class="fa fa-usd"></i> <span class="built_in">java</span> HelloWorld</span><span class="line output">Hello World</span></pre></td></tr></table></figure><h3 id="修改-jdis-生成的文件"><a href="#修改-jdis-生成的文件" class="headerlink" title="修改 jdis 生成的文件"></a>修改 jdis 生成的文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><i class="fa fa-usd"></i> <span class="built_in">awk</span> <span class="string">'NR==1,/Hello World/&#123;sub(/Hello World/, "Hello World!!")&#125; 1'</span> HelloWorld.jdis &gt; HelloWorld.jdis.2</span><span class="line"></span><span class="line"><span class="comment"># 上面的命令修改了 ldc String "Hello World";</span></span><span class="line"><i class="fa fa-usd"></i> <span class="built_in">diff</span> HelloWorld.jdis HelloWorld.jdis.2</span><span class="line output">20c20</span><span class="line output">&lt;               ldc     String <span class="string">"Hello World"</span>;</span><span class="line output">---</span><span class="line output">&gt;               ldc     String <span class="string">"Hello World!!"</span>;</span><span class="line"></span><span class="line"><i class="fa fa-usd"></i> <span class="built_in">cat</span> HelloWorld.jdis.2</span><span class="line output">super public class HelloWorld</span><span class="line output">        version 52:0</span><span class="line output">&#123;</span><span class="line output"></span><span class="line output"></span><span class="line output">public Method <span class="string">"&lt;init&gt;"</span>:<span class="string">"()V"</span></span><span class="line output">        stack 1 locals 1</span><span class="line output">&#123;</span><span class="line output">                aload_0;</span><span class="line output">                invokespecial   Method java/lang/Object.<span class="string">"&lt;init&gt;"</span>:<span class="string">"()V"</span>;</span><span class="line output">                <span class="built_in">return</span>;</span><span class="line output"></span><span class="line output">&#125;</span><span class="line output"></span><span class="line output">public static Method main:<span class="string">"([Ljava/lang/String;)V"</span></span><span class="line output">        stack 2 locals 1</span><span class="line output">&#123;</span><span class="line output">                getstatic       Field java/lang/System.out:<span class="string">"Ljava/io/PrintStream;"</span>;</span><span class="line output">                ldc     String <span class="string">"Hello World!!"</span>;</span><span class="line output">                invokevirtual   Method java/io/PrintStream.println:<span class="string">"(Ljava/lang/String;)V"</span>;</span><span class="line output">                <span class="built_in">return</span>;</span><span class="line output"></span><span class="line output">&#125;</span><span class="line output"></span><span class="line output">&#125; // end Class HelloWorld</span><span class="line"></span><span class="line"><i class="fa fa-usd"></i> <span class="built_in">rm</span> -f HelloWorld.class</span><span class="line"></span><span class="line"><i class="fa fa-usd"></i> <span class="built_in">jasm</span> HelloWorld.jdis.2</span><span class="line"></span><span class="line"><i class="fa fa-usd"></i> <span class="built_in">ll</span> HelloWorld.class</span><span class="line output">-rw-r--r-- 1 yu staff 383 Apr 28 00:15 HelloWorld.class</span><span class="line"></span><span class="line"><i class="fa fa-usd"></i> <span class="built_in">java</span> HelloWorld</span><span class="line output">Hello World!!</span></pre></td></tr></table></figure><h2 id="jdec-jcoder"><a href="#jdec-jcoder" class="headerlink" title="jdec / jcoder"></a>jdec / jcoder</h2><h3 id="jdec"><a href="#jdec" class="headerlink" title="jdec"></a>jdec</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><span class="line"></span><span class="line">java -jar asmtools.jar jdec <span class="variable">$@</span></span></pre></td></tr></table></figure><h3 id="jcoder"><a href="#jcoder" class="headerlink" title="jcoder"></a>jcoder</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><span class="line"></span><span class="line">java -jar asmtools.jar jcoder <span class="variable">$@</span></span></pre></td></tr></table></figure><h3 id="jdec-jcoder-example"><a href="#jdec-jcoder-example" class="headerlink" title="jdec / jcoder example"></a>jdec / jcoder example</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><i class="fa fa-usd"></i> <span class="built_in">rm</span> -f HelloWorld.class</span><span class="line"></span><span class="line"><i class="fa fa-usd"></i> <span class="built_in">javac</span> HelloWorld.java</span><span class="line"></span><span class="line"><i class="fa fa-usd"></i> <span class="built_in">jdec</span> HelloWorld.class</span><span class="line output">class HelloWorld &#123;</span><span class="line output">  0xCAFEBABE;</span><span class="line output">  0; // minor version</span><span class="line output">  52; // version</span><span class="line output">  [] &#123; // Constant Pool</span><span class="line output">    ; // first element is empty</span><span class="line output">    Method <span class="comment">#6 #20; // #1</span></span><span class="line output">    Field <span class="comment">#21 #22; // #2</span></span><span class="line output">    String <span class="comment">#23; // #3</span></span><span class="line output">    Method <span class="comment">#24 #25; // #4</span></span><span class="line output">    class <span class="comment">#26; // #5</span></span><span class="line output">    class <span class="comment">#27; // #6</span></span><span class="line output">    Utf8 <span class="string">"&lt;init&gt;"</span>; // <span class="comment">#7</span></span><span class="line output">    Utf8 <span class="string">"()V"</span>; // <span class="comment">#8</span></span><span class="line output">    Utf8 <span class="string">"Code"</span>; // <span class="comment">#9</span></span><span class="line output">    Utf8 <span class="string">"LineNumberTable"</span>; // <span class="comment">#10</span></span><span class="line output">    Utf8 <span class="string">"LocalVariableTable"</span>; // <span class="comment">#11</span></span><span class="line output">    Utf8 <span class="string">"this"</span>; // <span class="comment">#12</span></span><span class="line output">    Utf8 <span class="string">"LHelloWorld;"</span>; // <span class="comment">#13</span></span><span class="line output">    Utf8 <span class="string">"main"</span>; // <span class="comment">#14</span></span><span class="line output">    Utf8 <span class="string">"([Ljava/lang/String;)V"</span>; // <span class="comment">#15</span></span><span class="line output">    Utf8 <span class="string">"args"</span>; // <span class="comment">#16</span></span><span class="line output">    Utf8 <span class="string">"[Ljava/lang/String;"</span>; // <span class="comment">#17</span></span><span class="line output">    Utf8 <span class="string">"SourceFile"</span>; // <span class="comment">#18</span></span><span class="line output">    Utf8 <span class="string">"HelloWorld.java"</span>; // <span class="comment">#19</span></span><span class="line output">    NameAndType <span class="comment">#7 #8; // #20</span></span><span class="line output">    class <span class="comment">#28; // #21</span></span><span class="line output">    NameAndType <span class="comment">#29 #30; // #22</span></span><span class="line output">    Utf8 <span class="string">"Hello World"</span>; // <span class="comment">#23</span></span><span class="line output">    class <span class="comment">#31; // #24</span></span><span class="line output">    NameAndType <span class="comment">#32 #33; // #25</span></span><span class="line output">    Utf8 <span class="string">"HelloWorld"</span>; // <span class="comment">#26</span></span><span class="line output">    Utf8 <span class="string">"java/lang/Object"</span>; // <span class="comment">#27</span></span><span class="line output">    Utf8 <span class="string">"java/lang/System"</span>; // <span class="comment">#28</span></span><span class="line output">    Utf8 <span class="string">"out"</span>; // <span class="comment">#29</span></span><span class="line output">    Utf8 <span class="string">"Ljava/io/PrintStream;"</span>; // <span class="comment">#30</span></span><span class="line output">    Utf8 <span class="string">"java/io/PrintStream"</span>; // <span class="comment">#31</span></span><span class="line output">    Utf8 <span class="string">"println"</span>; // <span class="comment">#32</span></span><span class="line output">    Utf8 <span class="string">"(Ljava/lang/String;)V"</span>; // <span class="comment">#33</span></span><span class="line output">  &#125; // Constant Pool</span><span class="line output"></span><span class="line output">  0x0021; // access</span><span class="line output">  <span class="comment">#5;// this_cpx</span></span><span class="line output">  <span class="comment">#6;// super_cpx</span></span><span class="line output"></span><span class="line output">  [] &#123; // Interfaces</span><span class="line output">  &#125; // Interfaces</span><span class="line output"></span><span class="line output">  [] &#123; // fields</span><span class="line output">  &#125; // fields</span><span class="line output"></span><span class="line output">  [] &#123; // methods</span><span class="line output">    &#123; // Member</span><span class="line output">      0x0001; // access</span><span class="line output">      <span class="comment">#7; // name_cpx</span></span><span class="line output">      <span class="comment">#8; // sig_cpx</span></span><span class="line output">      [] &#123; // Attributes</span><span class="line output">        Attr(<span class="comment">#9) &#123; // Code</span></span><span class="line output">          1; // max_stack</span><span class="line output">          1; // max_locals</span><span class="line output">          Bytes[]&#123;</span><span class="line output">            0x2AB70001B1;</span><span class="line output">          &#125;</span><span class="line output">          [] &#123; // Traps</span><span class="line output">          &#125; // end Traps</span><span class="line output">          [] &#123; // Attributes</span><span class="line output">            Attr(<span class="comment">#10) &#123; // LineNumberTable</span></span><span class="line output">              [] &#123; // LineNumberTable</span><span class="line output">                0  1;</span><span class="line output">              &#125;</span><span class="line output">            &#125; // end LineNumberTable</span><span class="line output">            ;</span><span class="line output">            Attr(<span class="comment">#11) &#123; // LocalVariableTable</span></span><span class="line output">              [] &#123; // LocalVariableTable</span><span class="line output">                0 5 12 13 0;</span><span class="line output">              &#125;</span><span class="line output">            &#125; // end LocalVariableTable</span><span class="line output">          &#125; // Attributes</span><span class="line output">        &#125; // end Code</span><span class="line output">      &#125; // Attributes</span><span class="line output">    &#125; // Member</span><span class="line output">    ;</span><span class="line output">    &#123; // Member</span><span class="line output">      0x0009; // access</span><span class="line output">      <span class="comment">#14; // name_cpx</span></span><span class="line output">      <span class="comment">#15; // sig_cpx</span></span><span class="line output">      [] &#123; // Attributes</span><span class="line output">        Attr(<span class="comment">#9) &#123; // Code</span></span><span class="line output">          2; // max_stack</span><span class="line output">          1; // max_locals</span><span class="line output">          Bytes[]&#123;</span><span class="line output">            0xB200021203B60004;</span><span class="line output">            0xB1;</span><span class="line output">          &#125;</span><span class="line output">          [] &#123; // Traps</span><span class="line output">          &#125; // end Traps</span><span class="line output">          [] &#123; // Attributes</span><span class="line output">            Attr(<span class="comment">#10) &#123; // LineNumberTable</span></span><span class="line output">              [] &#123; // LineNumberTable</span><span class="line output">                0  4;</span><span class="line output">                8  5;</span><span class="line output">              &#125;</span><span class="line output">            &#125; // end LineNumberTable</span><span class="line output">            ;</span><span class="line output">            Attr(<span class="comment">#11) &#123; // LocalVariableTable</span></span><span class="line output">              [] &#123; // LocalVariableTable</span><span class="line output">                0 9 16 17 0;</span><span class="line output">              &#125;</span><span class="line output">            &#125; // end LocalVariableTable</span><span class="line output">          &#125; // Attributes</span><span class="line output">        &#125; // end Code</span><span class="line output">      &#125; // Attributes</span><span class="line output">    &#125; // Member</span><span class="line output">  &#125; // methods</span><span class="line output"></span><span class="line output">  [] &#123; // Attributes</span><span class="line output">    Attr(<span class="comment">#18) &#123; // SourceFile</span></span><span class="line output">      <span class="comment">#19;</span></span><span class="line output">    &#125; // end SourceFile</span><span class="line output">  &#125; // Attributes</span><span class="line output">&#125; // end class HelloWorld</span><span class="line"></span><span class="line"><i class="fa fa-usd"></i> <span class="built_in">jdec</span> HelloWorld.class &gt; HelloWorld.jdec</span><span class="line"></span><span class="line"><i class="fa fa-usd"></i> <span class="built_in">rm</span> -f HelloWorld.class</span><span class="line"></span><span class="line"><i class="fa fa-usd"></i> <span class="built_in">jcoder</span> HelloWorld.jdec</span><span class="line"></span><span class="line"><i class="fa fa-usd"></i> <span class="built_in">ll</span> HelloWorld.class</span><span class="line output">-rw-r--r-- 1 yu staff 533 Apr 28 00:27 HelloWorld.class</span><span class="line"></span><span class="line"><i class="fa fa-usd"></i> <span class="built_in">java</span> HelloWorld</span><span class="line output">Hello World</span></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol><li><a href="https://wiki.openjdk.java.net/display/CodeTools/asmtools" target="_blank" rel="noopener">https://wiki.openjdk.java.net/display/CodeTools/asmtools</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;asmtools&quot;&gt;&lt;a href=&quot;#asmtools&quot; class=&quot;headerlink&quot; title=&quot;asmtools&quot;&gt;&lt;/a&gt;asmtools&lt;/h2&gt;&lt;p&gt;AsmTools 由一组（Java 类文件）汇编程序/反汇编程序组成：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Jasm / Jdis: 一种汇编语言，提供类似 Java 的成员签名声明，同时提供符合 Java VM 规范的字节码指令助记符。Jasm 还为 classfile 属性中常见的构造提供高级语法。Jasm 编码测试对于对字节代码进行排序非常有用，因为 Javac 编译的代码通常不会对字节代码进行排序。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JCod / JDec: 一种汇编语言，提供类文件结构的字节码容器。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;AsmTools 是完全自反的，Java 二进制（.class）文件可以被反汇编成文本表示，而文本表示又可以汇编回同一个二进制文件。&lt;/p&gt;
&lt;h3 id=&quot;Downloads&quot;&gt;&lt;a href=&quot;#Downloads&quot; class=&quot;headerlink&quot; title=&quot;Downloads&quot;&gt;&lt;/a&gt;Downloads&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://wiki.openjdk.java.net/display/CodeTools/asmtools&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://wiki.openjdk.java.net/display/CodeTools/asmtools&lt;/a&gt; 下载 jar 包或者在 github 上搜索下载 &lt;code&gt;asmtools.jar&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://www.4e00.com/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>cross origin resource sharing - cors</title>
    <link href="http://www.4e00.com/web/2019/04/09/http-cross-origin-resource-sharing-cors.html"/>
    <id>http://www.4e00.com/web/2019/04/09/http-cross-origin-resource-sharing-cors.html</id>
    <published>2019-04-09T14:21:49.000Z</published>
    <updated>2019-04-10T01:56:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Preflight-request"><a href="#Preflight-request" class="headerlink" title="Preflight request"></a>Preflight request</h2><p>一个 CORS 预检请求是用于检查服务器是否支持 <a href="https://developer.mozilla.org/en-US/docs/Glossary/CORS" target="_blank" rel="noopener">CORS</a> 即跨域资源共享。</p><p>它一般是用了以下几个 HTTP 请求首部的 OPTIONS 请求：Access-Control-Request-Method 和 Access-Control-Request-Headers，以及一个 Origin 首部。</p><p>当有必要的时候，浏览器会自动发出一个预检请求；所以在正常情况下，前端开发者不需要自己去发这样的请求。</p><p>这里先看个简单的例子，下文有详细说明预检请求过程，一个客户端可能会在实际发送一个 DELETE 请求之前，先向服务器发起一个预检请求，用于询问是否可以向服务器发起一个 DELETE 请求：</p><figure class="highlight http"><table><tr><td class="code"><pre><span class="line">OPTIONS /resource/foo</span><span class="line"><span class="attribute">Access-Control-Request-Method</span>: DELETE</span><span class="line"><span class="attribute">Access-Control-Request-Headers</span>: origin, x-requested-with</span><span class="line"><span class="attribute">Origin</span>: https://foo.bar.org</span></pre></td></tr></table></figure><p>如果服务器允许，那么服务器就会响应这个预检请求，并且其响应首部 Access-Control-Allow-Methods 会将 DELETE 包含在其中：</p><figure class="highlight http"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">200</span> OK</span><span class="line"><span class="attribute">Content-Length</span>: 0</span><span class="line"><span class="attribute">Connection</span>: keep-alive</span><span class="line"><span class="attribute">Access-Control-Allow-Origin</span>: https://foo.bar.org</span><span class="line"><span class="attribute">Access-Control-Allow-Methods</span>: POST, GET, OPTIONS, DELETE</span><span class="line"><span class="attribute">Access-Control-Max-Age</span>: 86400</span></pre></td></tr></table></figure><a id="more"></a><h2 id="跨域资源共享-CORS"><a href="#跨域资源共享-CORS" class="headerlink" title="跨域资源共享 - CORS"></a>跨域资源共享 - CORS</h2><p>跨域资源共享(CORS) 是一种机制，它使用额外的 HTTP 头来告诉浏览器，让运行在一个 origin (domain) 上的 Web 应用被准许访问来自不同源服务器上的指定的资源。当一个资源从与该资源本身所在的服务器不同的域、协议或端口请求一个资源时，资源会发起一个跨域 HTTP 请求。</p><p>比如，站点 <a href="http://domain-a.com" target="_blank" rel="noopener">http://domain-a.com</a> 的某 HTML 页面通过 <code>&lt;img&gt;</code> 的 src 请求 <a href="http://domain-b.com/image.jpg" target="_blank" rel="noopener">http://domain-b.com/image.jpg</a> 。网络上的许多页面都会加载来自不同域的 CSS 样式表，图像和脚本等资源。</p><p>出于安全原因，浏览器限制从脚本内发起的跨源 HTTP 请求（译者注：这段描述不准确，并不一定是浏览器限制了发起跨站请求，也可能是跨站请求可以正常发起，但是返回结果被浏览器拦截了）。例如，XMLHttpRequest 和 Fetch API 遵循同源策略。这意味着使用这些 API 的 Web 应用程序只能从加载应用程序的同一个域请求 HTTP 资源，除非响应报文包含了正确 CORS 响应头。</p><img src="/blog/img/web/cors/cors-principle.png" class="image-md" title="[cors-principle.png]"><p>跨域资源共享（ CORS ）机制允许 Web 应用服务器进行跨域访问控制，从而使跨域数据传输得以安全进行。现代浏览器支持在 API 容器中（例如 XMLHttpRequest 或 Fetch）使用 CORS，以降低跨域 HTTP 请求所带来的风险。</p><h2 id="什么情况下需要-CORS"><a href="#什么情况下需要-CORS" class="headerlink" title="什么情况下需要 CORS"></a>什么情况下需要 CORS</h2><p>跨域资源共享标准（ cross-origin sharing standard ）允许在下列场景中使用跨域 HTTP 请求：</p><ol><li>前文提到的由 XMLHttpRequest 或 Fetch 发起的跨域 HTTP 请求。</li><li>Web 字体 (CSS 中通过 @font-face 使用跨域字体资源), 因此，网站就可以发布 TrueType 字体资源，并只允许已授权网站进行跨站调用。</li><li>WebGL 贴图</li><li>使用 drawImage 将 Images/video 画面绘制到 canvas</li><li>样式表（使用 CSSOM）</li></ol><p>本文概述了跨域资源共享机制及其所涉及的 HTTP 头。</p><h2 id="功能概述"><a href="#功能概述" class="headerlink" title="功能概述"></a>功能概述</h2><p>跨域资源共享标准新增了一组 HTTP 首部字段，允许服务器声明哪些源站通过浏览器有权限访问哪些资源。另外，规范要求，对那些可能对服务器数据产生副作用的 HTTP 请求方法（特别是 GET 以外的 HTTP 请求，或者搭配某些 MIME 类型的 POST 请求），浏览器必须首先使用 OPTIONS 方法发起一个预检请求（preflight request），从而获知服务端是否允许该跨域请求。服务器确认允许之后，才发起实际的 HTTP 请求。在预检请求的返回中，服务器端也可以通知客户端，是否需要携带身份凭证（包括 Cookies 和 HTTP 认证相关数据）。</p><p>CORS 请求失败会产生错误，但是为了安全，在 JavaScript 代码层面是无法获知到底具体是哪里出了问题。你只能查看浏览器的控制台以得知具体是哪里出现了错误。</p><p>接下来的内容将讨论相关场景，并剖析该机制所涉及的 HTTP 首部字段。</p><h2 id="若干访问控制场景"><a href="#若干访问控制场景" class="headerlink" title="若干访问控制场景"></a>若干访问控制场景</h2><p>这里，我们使用三个场景来解释跨域资源共享机制的工作原理。这些例子都使用 XMLHttpRequest 对象。</p><p>本文中的 JavaScript 代码片段都可以从 <a href="http://arunranga.com/examples/access-control/" target="_blank" rel="noopener">http://arunranga.com/examples/access-control/</a> 获得。另外，使用支持跨域  XMLHttpRequest 的浏览器访问该地址，可以看到代码的实际运行结果。</p><p>关于服务端对跨域资源共享的支持的讨论，请参见这篇文章： Server-Side_Access_Control (CORS)。</p><h2 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h2><p>某些请求不会触发 CORS 预检请求。本文称这样的请求为<code>简单请求</code>，请注意，该术语并不属于 Fetch （其中定义了 CORS）规范。若请求满足所有下述条件，则该请求可视为<code>简单请求</code>：</p><p>使用下列方法之一：</p><ol><li>GET</li><li>HEAD</li><li>POST</li></ol><p>Fetch 规范定义了对 CORS 安全的首部字段集合，不得人为设置该集合之外的其他首部字段。该集合为：</p><ol><li>Accept</li><li>Accept-Language</li><li>Content-Language</li><li>Content-Type （需要注意额外的限制）</li><li>DPR</li><li>Downlink</li><li>Save-Data</li><li>Viewport-Width</li><li>Width</li></ol><p>Content-Type 的值仅限于下列三者之一：</p><ol><li>text/plain</li><li>multipart/form-data</li><li>application/x-www-form-urlencoded</li></ol><p>请求中的任意 XMLHttpRequestUpload 对象均没有注册任何事件监听器；XMLHttpRequestUpload 对象可以使用 XMLHttpRequest.upload 属性访问。</p><p>请求中没有使用 ReadableStream 对象。</p><blockquote><p>注意: 这些跨域请求与浏览器发出的其他跨域请求并无二致。如果服务器未返回正确的响应首部，则请求方不会收到任何数据。因此，那些不允许跨域请求的网站无需为这一新的 HTTP 访问控制特性担心。</p></blockquote><blockquote><p>注意: WebKit Nightly 和 Safari Technology Preview 为 Accept, Accept-Language, 和 Content-Language 首部字段的值添加了额外的限制。<br>如果这些首部字段的值是<code>非标准</code>的，WebKit/Safari 就不会将这些请求视为<code>简单请求</code>。<br>WebKit/Safari 并没有在文档中列出哪些值是<code>非标准</code>的，不过我们可以在这里找到相关讨论：<br>Require preflight for non-standard CORS-safelisted request headers Accept, Accept-Language, and Content-Language, Allow commas in Accept, Accept-Language, and Content-Language request headers for simple CORS, and Switch to a blacklist model for restricted Accept headers in simple CORS requests。<br>其它浏览器并不支持这些额外的限制，因为它们不属于规范的一部分。</p></blockquote><p>比如说，假如站点 <a href="http://foo.example" target="_blank" rel="noopener">http://foo.example</a> 的网页应用想要访问 <a href="http://bar.other" target="_blank" rel="noopener">http://bar.other</a> 的资源。<a href="http://foo.example" target="_blank" rel="noopener">http://foo.example</a> 的网页中可能包含类似于下面的 JavaScript 代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> invocation = <span class="keyword">new</span> XMLHttpRequest();</span><span class="line"><span class="keyword">var</span> url = <span class="string">'http://bar.other/resources/public-data/'</span>;</span><span class="line"></span><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callOtherDomain</span>(<span class="params"></span>) </span>&#123;</span><span class="line">  <span class="keyword">if</span>(invocation) &#123;</span><span class="line">    invocation.open(<span class="string">'GET'</span>, url, <span class="literal">true</span>);</span><span class="line">    invocation.onreadystatechange = handler;</span><span class="line">    invocation.send();</span><span class="line">  &#125;</span><span class="line">&#125;</span></pre></td></tr></table></figure><p>客户端和服务器之间使用 CORS 首部字段来处理跨域权限：</p><img src="/blog/img/web/cors/cors-simple-request.png" class="image-md" title="[cors-simple-request]"><p>分别检视请求报文和响应报文：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/resources/public-data/</span> HTTP/1.1</span><span class="line"><span class="attribute">Host</span>: bar.other</span><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.5; en-US; rv:1.9.1b3pre) Gecko/20081130 Minefield/3.1b3pre</span><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><span class="line"><span class="attribute">Accept-Language</span>: en-us,en;q=0.5</span><span class="line"><span class="attribute">Accept-Encoding</span>: gzip,deflate</span><span class="line"><span class="attribute">Accept-Charset</span>: ISO-8859-1,utf-8;q=0.7,*;q=0.7</span><span class="line"><span class="attribute">Connection</span>: keep-alive</span><span class="line"><span class="attribute">Referer</span>: http://foo.example/examples/access-control/simpleXSInvocation.html</span><span class="line"><span class="attribute">Origin</span>: http://foo.example</span><span class="line"></span><span class="line"></span><span class="line">HTTP/1.1 <span class="number">200</span> OK</span><span class="line"><span class="attribute">Date</span>: Mon, 01 Dec 2008 00:23:53 GMT</span><span class="line"><span class="attribute">Server</span>: Apache/2.0.61</span><span class="line"><span class="attribute">Access-Control-Allow-Origin</span>: *</span><span class="line"><span class="attribute">Keep-Alive</span>: timeout=2, max=100</span><span class="line"><span class="attribute">Connection</span>: Keep-Alive</span><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked</span><span class="line"><span class="attribute">Content-Type</span>: application/xml</span></pre></td></tr></table></figure><p>第 1~10 行是请求首部。第 10 行 的请求首部字段 Origin 表明该请求来源于 <a href="http://foo.exmaple" target="_blank" rel="noopener">http://foo.exmaple</a> 。</p><p>第 13~22 行是来自于 <a href="http://bar.other" target="_blank" rel="noopener">http://bar.other</a> 的服务端响应。响应中携带了响应首部字段 Access-Control-Allow-Origin（第 16 行）。使用 Origin 和 Access-Control-Allow-Origin 就能完成最简单的访问控制。本例中，服务端返回的 Access-Control-Allow-Origin: * 表明，该资源可以被任意外域访问。如果服务端仅允许来自 <a href="http://foo.example" target="_blank" rel="noopener">http://foo.example</a> 的访问，该首部字段的内容如下：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attribute">Access-Control-Allow-Origin</span>: http://foo.example</span></pre></td></tr></table></figure><p>现在，除了 <a href="http://foo.example" target="_blank" rel="noopener">http://foo.example</a> ，其它外域均不能访问该资源（该策略由请求首部中的 ORIGIN 字段定义，见第 10 行）。Access-Control-Allow-Origin 应当为 <code>*</code> 或者包含由 Origin 首部字段所指明的域名。</p><h2 id="预检请求"><a href="#预检请求" class="headerlink" title="预检请求"></a>预检请求</h2><p>与前述简单请求不同，<code>需预检的请求</code> 要求必须首先使用 OPTIONS 方法发起一个预检请求到服务器，以获知服务器是否允许该实际请求。<code>预检请求</code> 的使用，可以避免跨域请求对服务器的用户数据产生未预期的影响。</p><p>当请求满足下述任一条件时，即应首先发送预检请求：</p><p>使用了下面任一 HTTP 方法：</p><ol><li>PUT</li><li>DELETE</li><li>CONNECT</li><li>OPTIONS</li><li>TRACE</li><li>PATCH</li></ol><p>人为设置了对 CORS 安全的首部字段集合之外的其他首部字段。该集合为：</p><ol><li>Accept</li><li>Accept-Language</li><li>Content-Language</li><li>Content-Type (需要注意额外的限制)</li><li>DPR</li><li>Downlink</li><li>Save-Data</li><li>Viewport-Width</li><li>Width</li></ol><p>Content-Type 的值不属于下列之一:</p><ol><li>application/x-www-form-urlencoded</li><li>multipart/form-data</li><li>text/plain</li></ol><p>请求中的 XMLHttpRequestUpload 对象注册了任意多个事件监听器。</p><p>请求中使用了 ReadableStream 对象。</p><blockquote><p>注意: WebKit Nightly 和 Safari Technology Preview 为 Accept, Accept-Language, 和 Content-Language 首部字段的值添加了额外的限制。<br>如果这些首部字段的值是<code>非标准</code>的，WebKit/Safari 就不会将这些请求视为<code>简单请求</code>。<br>WebKit/Safari 并没有在文档中列出哪些值是<code>非标准</code>的，不过我们可以在这里找到相关讨论：<br>Require preflight for non-standard CORS-safelisted request headers Accept, Accept-Language, and Content-Language, Allow commas in Accept, Accept-Language, and Content-Language request headers for simple CORS, and Switch to a blacklist model for restricted Accept headers in simple CORS requests。<br>其它浏览器并不支持这些额外的限制，因为它们不属于规范的一部分。</p></blockquote><p>如下是一个需要执行预检请求的 HTTP 请求：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> invocation = <span class="keyword">new</span> XMLHttpRequest();</span><span class="line"><span class="keyword">var</span> url = <span class="string">'http://bar.other/resources/post-here/'</span>;</span><span class="line"><span class="keyword">var</span> body = <span class="string">'&lt;?xml version="1.0"?&gt;&lt;person&gt;&lt;name&gt;Arun&lt;/name&gt;&lt;/person&gt;'</span>;</span><span class="line"></span><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callOtherDomain</span>(<span class="params"></span>)</span>&#123;</span><span class="line">  <span class="keyword">if</span>(invocation)</span><span class="line">    &#123;</span><span class="line">      invocation.open(<span class="string">'POST'</span>, url, <span class="literal">true</span>);</span><span class="line">      invocation.setRequestHeader(<span class="string">'X-PINGOTHER'</span>, <span class="string">'pingpong'</span>);</span><span class="line">      invocation.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/xml'</span>);</span><span class="line">      invocation.onreadystatechange = handler;</span><span class="line">      invocation.send(body);</span><span class="line">    &#125;</span><span class="line">&#125;</span><span class="line"></span></pre></td></tr></table></figure><p>上面的代码使用 POST 请求发送一个 XML 文档，该请求包含了一个自定义的请求首部字段（X-PINGOTHER: pingpong）。另外，该请求的 Content-Type 为 application/xml。因此，该请求需要首先发起<code>预检请求</code>。</p><img src="/blog/img/web/cors/cors-prelight.png" class="image-md" title="[cors-prelight]"><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">OPTIONS</span> <span class="string">/resources/post-here/</span> HTTP/1.1</span><span class="line"><span class="attribute">Host</span>: bar.other</span><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.5; en-US; rv:1.9.1b3pre) Gecko/20081130 Minefield/3.1b3pre</span><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><span class="line"><span class="attribute">Accept-Language</span>: en-us,en;q=0.5</span><span class="line"><span class="attribute">Accept-Encoding</span>: gzip,deflate</span><span class="line"><span class="attribute">Accept-Charset</span>: ISO-8859-1,utf-8;q=0.7,*;q=0.7</span><span class="line"><span class="attribute">Connection</span>: keep-alive</span><span class="line"><span class="attribute">Origin</span>: http://foo.example</span><span class="line"><span class="attribute">Access-Control-Request-Method</span>: POST</span><span class="line"><span class="attribute">Access-Control-Request-Headers</span>: X-PINGOTHER, Content-Type</span><span class="line"></span><span class="line"></span><span class="line">HTTP/1.1 <span class="number">200</span> OK</span><span class="line"><span class="attribute">Date</span>: Mon, 01 Dec 2008 01:15:39 GMT</span><span class="line"><span class="attribute">Server</span>: Apache/2.0.61 (Unix)</span><span class="line"><span class="attribute">Access-Control-Allow-Origin</span>: http://foo.example</span><span class="line"><span class="attribute">Access-Control-Allow-Methods</span>: POST, GET, OPTIONS</span><span class="line"><span class="attribute">Access-Control-Allow-Headers</span>: X-PINGOTHER, Content-Type</span><span class="line"><span class="attribute">Access-Control-Max-Age</span>: 86400</span><span class="line"><span class="attribute">Vary</span>: Accept-Encoding, Origin</span><span class="line"><span class="attribute">Content-Encoding</span>: gzip</span><span class="line"><span class="attribute">Content-Length</span>: 0</span><span class="line"><span class="attribute">Keep-Alive</span>: timeout=2, max=100</span><span class="line"><span class="attribute">Connection</span>: Keep-Alive</span><span class="line"><span class="attribute">Content-Type</span>: text/plain</span></pre></td></tr></table></figure><p>预检请求完成之后，发送实际请求：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span><span class="line">27</span><span class="line">28</span><span class="line">29</span><span class="line">30</span><span class="line">31</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/resources/post-here/</span> HTTP/1.1</span><span class="line"><span class="attribute">Host</span>: bar.other</span><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.5; en-US; rv:1.9.1b3pre) Gecko/20081130 Minefield/3.1b3pre</span><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><span class="line"><span class="attribute">Accept-Language</span>: en-us,en;q=0.5</span><span class="line"><span class="attribute">Accept-Encoding</span>: gzip,deflate</span><span class="line"><span class="attribute">Accept-Charset</span>: ISO-8859-1,utf-8;q=0.7,*;q=0.7</span><span class="line"><span class="attribute">Connection</span>: keep-alive</span><span class="line"><span class="attribute">X-PINGOTHER</span>: pingpong</span><span class="line"><span class="attribute">Content-Type</span>: text/xml; charset=UTF-8</span><span class="line"><span class="attribute">Referer</span>: http://foo.example/examples/preflightInvocation.html</span><span class="line"><span class="attribute">Content-Length</span>: 55</span><span class="line"><span class="attribute">Origin</span>: http://foo.example</span><span class="line"><span class="attribute">Pragma</span>: no-cache</span><span class="line"><span class="attribute">Cache-Control</span>: no-cache</span><span class="line"></span><span class="line">&lt;?xml version="1.0"?&gt;&lt;person&gt;&lt;name&gt;Arun&lt;/name&gt;&lt;/person&gt;</span><span class="line"></span><span class="line"></span><span class="line">HTTP/1.1 <span class="number">200</span> OK</span><span class="line"><span class="attribute">Date</span>: Mon, 01 Dec 2008 01:15:40 GMT</span><span class="line"><span class="attribute">Server</span>: Apache/2.0.61 (Unix)</span><span class="line"><span class="attribute">Access-Control-Allow-Origin</span>: http://foo.example</span><span class="line"><span class="attribute">Vary</span>: Accept-Encoding, Origin</span><span class="line"><span class="attribute">Content-Encoding</span>: gzip</span><span class="line"><span class="attribute">Content-Length</span>: 235</span><span class="line"><span class="attribute">Keep-Alive</span>: timeout=2, max=99</span><span class="line"><span class="attribute">Connection</span>: Keep-Alive</span><span class="line"><span class="attribute">Content-Type</span>: text/plain</span><span class="line"></span><span class="line">[Some GZIP'd payload]</span></pre></td></tr></table></figure><p>浏览器检测到，从 JavaScript 中发起的请求需要被预检。从上面的报文中，我们看到，第 1~12 行发送了一个使用 OPTIONS 方法的<code>预检请求</code>。 OPTIONS 是 HTTP/1.1 协议中定义的方法，用以从服务器获取更多信息。该方法不会对服务器资源产生影响。 预检请求中同时携带了下面两个首部字段：</p><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Access-Control-Request-Method</span>: POST</span><span class="line"><span class="attribute">Access-Control-Request-Headers</span>: X-PINGOTHER, Content-Type</span></pre></td></tr></table></figure><p>首部字段 Access-Control-Request-Method 告知服务器，实际请求将使用 POST 方法。首部字段 Access-Control-Request-Headers 告知服务器，实际请求将携带两个自定义请求首部字段：X-PINGOTHER 与 Content-Type。服务器据此决定，该实际请求是否被允许。</p><p>第 14~26 行为预检请求的响应，表明服务器将接受后续的实际请求。重点看第 17~20 行：</p><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Access-Control-Allow-Origin</span>: http://foo.example</span><span class="line"><span class="attribute">Access-Control-Allow-Methods</span>: POST, GET, OPTIONS</span><span class="line"><span class="attribute">Access-Control-Allow-Headers</span>: X-PINGOTHER, Content-Type</span><span class="line"><span class="attribute">Access-Control-Max-Age</span>: 86400</span></pre></td></tr></table></figure><p>首部字段 Access-Control-Allow-Methods 表明服务器允许客户端使用 POST, GET 和 OPTIONS 方法发起请求。该字段与 <code>HTTP/1.1</code> 的 <code>Allow: response header</code> 类似，但仅限于在需要访问控制的场景中使用。</p><p>首部字段 Access-Control-Allow-Headers 表明服务器允许请求中携带字段 X-PINGOTHER 与 Content-Type。与 Access-Control-Allow-Methods 一样，Access-Control-Allow-Headers 的值为逗号分割的列表。</p><p>最后，首部字段 Access-Control-Max-Age 表明该响应的有效时间为 86400 秒，也就是 24 小时。在有效时间内，浏览器无须为同一请求再次发起预检请求。请注意，浏览器自身维护了一个最大有效时间，如果该首部字段的值超过了最大有效时间，将不会生效。</p><h2 id="预检请求与重定向"><a href="#预检请求与重定向" class="headerlink" title="预检请求与重定向"></a>预检请求与重定向</h2><p>大多数浏览器不支持针对于预检请求的重定向。如果一个预检请求发生了重定向，浏览器将报告错误：</p><blockquote><p>The request was redirected to &#39;<a href="https://example.com/foo&#39;" target="_blank" rel="noopener">https://example.com/foo&#39;</a>, which is disallowed for cross-origin requests that require preflight</p><p>Request requires preflight, which is disallowed to follow cross-origin redirect</p></blockquote><p>CORS 最初要求该行为，不过在后续的修订中废弃了这一要求。</p><p>在浏览器的实现跟上规范之前，有两种方式规避上述报错行为：</p><ol><li>在服务端去掉对预检请求的重定向；</li><li>将实际请求变成一个简单请求。</li></ol><p>如果上面两种方式难以做到，我们仍有其他办法：</p><ol><li>发出一个简单请求（使用  Response.url 或 XHR.responseURL）以判断真正的预检请求会返回什么地址。</li><li>发出另一个请求（真正的请求），使用在上一步通过 Response.url 或 XMLHttpRequest.responseURL 获得的 URL。</li></ol><p>不过，如果请求是由于存在 Authorization 字段而引发了预检请求，则这一方法将无法使用。这种情况只能由服务端进行更改。</p><h2 id="附带身份凭证的请求"><a href="#附带身份凭证的请求" class="headerlink" title="附带身份凭证的请求"></a>附带身份凭证的请求</h2><p>Fetch 与 CORS 的一个有趣的特性是，可以基于  HTTP cookies 和 HTTP 认证信息发送身份凭证。一般而言，对于跨域 XMLHttpRequest 或 Fetch 请求，浏览器不会发送身份凭证信息。如果要发送凭证信息，需要设置 XMLHttpRequest 的某个特殊标志位。</p><p>本例中，<a href="http://foo.example" target="_blank" rel="noopener">http://foo.example</a> 的某脚本向 <a href="http://bar.other" target="_blank" rel="noopener">http://bar.other</a> 发起一个 GET 请求，并设置 Cookies：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> invocation = <span class="keyword">new</span> XMLHttpRequest();</span><span class="line"><span class="keyword">var</span> url = <span class="string">'http://bar.other/resources/credentialed-content/'</span>;</span><span class="line"></span><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callOtherDomain</span>(<span class="params"></span>)</span>&#123;</span><span class="line">  <span class="keyword">if</span>(invocation) &#123;</span><span class="line">    invocation.open(<span class="string">'GET'</span>, url, <span class="literal">true</span>);</span><span class="line">    invocation.withCredentials = <span class="literal">true</span>;</span><span class="line">    invocation.onreadystatechange = handler;</span><span class="line">    invocation.send();</span><span class="line">  &#125;</span><span class="line">&#125;</span></pre></td></tr></table></figure><p>第 7 行将 XMLHttpRequest 的 withCredentials 标志设置为 true，从而向服务器发送 Cookies。因为这是一个简单 GET 请求，所以浏览器不会对其发起<code>预检请求</code>。但是，如果服务器端的响应中未携带 Access-Control-Allow-Credentials: true ，浏览器将不会把响应内容返回给请求的发送者。</p><img src="/blog/img/web/cors/cors-with-credentials-request.png" class="image-md" title="[cors-with-credentials-request]"><p>客户端与服务器端交互示例如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span><span class="line">27</span><span class="line">28</span><span class="line">29</span><span class="line">30</span><span class="line">31</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/resources/access-control-with-credentials/</span> HTTP/1.1</span><span class="line"><span class="attribute">Host</span>: bar.other</span><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.5; en-US; rv:1.9.1b3pre) Gecko/20081130 Minefield/3.1b3pre</span><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><span class="line"><span class="attribute">Accept-Language</span>: en-us,en;q=0.5</span><span class="line"><span class="attribute">Accept-Encoding</span>: gzip,deflate</span><span class="line"><span class="attribute">Accept-Charset</span>: ISO-8859-1,utf-8;q=0.7,*;q=0.7</span><span class="line"><span class="attribute">Connection</span>: keep-alive</span><span class="line"><span class="attribute">Referer</span>: http://foo.example/examples/credential.html</span><span class="line"><span class="attribute">Origin</span>: http://foo.example</span><span class="line"><span class="attribute">Cookie</span>: pageAccess=2</span><span class="line"></span><span class="line"></span><span class="line">HTTP/1.1 <span class="number">200</span> OK</span><span class="line"><span class="attribute">Date</span>: Mon, 01 Dec 2008 01:34:52 GMT</span><span class="line"><span class="attribute">Server</span>: Apache/2.0.61 (Unix) PHP/4.4.7 mod_ssl/2.0.61 OpenSSL/0.9.7e mod_fastcgi/2.4.2 DAV/2 SVN/1.4.2</span><span class="line"><span class="attribute">X-Powered-By</span>: PHP/5.2.6</span><span class="line"><span class="attribute">Access-Control-Allow-Origin</span>: http://foo.example</span><span class="line"><span class="attribute">Access-Control-Allow-Credentials</span>: true</span><span class="line"><span class="attribute">Cache-Control</span>: no-cache</span><span class="line"><span class="attribute">Pragma</span>: no-cache</span><span class="line"><span class="attribute">Set-Cookie</span>: pageAccess=3; expires=Wed, 31-Dec-2008 01:34:53 GMT</span><span class="line"><span class="attribute">Vary</span>: Accept-Encoding, Origin</span><span class="line"><span class="attribute">Content-Encoding</span>: gzip</span><span class="line"><span class="attribute">Content-Length</span>: 106</span><span class="line"><span class="attribute">Keep-Alive</span>: timeout=2, max=100</span><span class="line"><span class="attribute">Connection</span>: Keep-Alive</span><span class="line"><span class="attribute">Content-Type</span>: text/plain</span><span class="line"></span><span class="line"></span><span class="line">[text/plain payload]</span></pre></td></tr></table></figure><p>即使第 11 行指定了 Cookie 的相关信息，但是，如果 bar.other 的响应中缺失 Access-Control-Allow-Credentials: true（第 19 行），则响应内容不会返回给请求的发起者。</p><h3 id="附带身份凭证的请求与通配符"><a href="#附带身份凭证的请求与通配符" class="headerlink" title="附带身份凭证的请求与通配符"></a>附带身份凭证的请求与通配符</h3><p>对于附带身份凭证的请求，服务器 <strong>不能</strong> 设置 Access-Control-Allow-Origin 的值为<code>*</code>。</p><p>这是因为请求的首部中携带了 Cookie 信息，如果 Access-Control-Allow-Origin 的值为<code>*</code>，请求将会失败。而将 Access-Control-Allow-Origin 的值设置为 <a href="http://foo.example" target="_blank" rel="noopener">http://foo.example</a> ，则请求将成功执行。</p><p>另外，响应首部中也携带了 Set-Cookie 字段，尝试对 Cookie 进行修改。如果操作失败，将会抛出异常。</p><h2 id="HTTP-响应首部字段"><a href="#HTTP-响应首部字段" class="headerlink" title="HTTP 响应首部字段"></a>HTTP 响应首部字段</h2><p>本节列出了规范所定义的响应首部字段。上一小节中，我们已经看到了这些首部字段在实际场景中是如何工作的。</p><h3 id="Access-Control-Allow-Origin"><a href="#Access-Control-Allow-Origin" class="headerlink" title="Access-Control-Allow-Origin"></a>Access-Control-Allow-Origin</h3><p>响应首部中可以携带一个 Access-Control-Allow-Origin 字段，其语法如下:</p><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Access-Control-Allow-Origin</span>: &lt;origin&gt; | *</span></pre></td></tr></table></figure><p>其中，origin 参数的值指定了允许访问该资源的外域 URI。对于不需要携带身份凭证的请求，服务器可以指定该字段的值为通配符，表示允许来自所有域的请求。</p><p>例如，下面的字段值将允许来自 <a href="http://mozilla.com" target="_blank" rel="noopener">http://mozilla.com</a> 的请求：</p><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Access-Control-Allow-Origin</span>: http://mozilla.com</span></pre></td></tr></table></figure><p>如果服务端指定了具体的域名而非<code>*</code>，那么响应首部中的 Vary 字段的值必须包含 Origin。这将告诉客户端：服务器对不同的源站返回不同的内容。</p><h3 id="Access-Control-Expose-Headers"><a href="#Access-Control-Expose-Headers" class="headerlink" title="Access-Control-Expose-Headers"></a>Access-Control-Expose-Headers</h3><p>译者注：在跨域访问时，XMLHttpRequest 对象的 getResponseHeader()方法只能拿到一些最基本的响应头，Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma，如果要访问其他头，则需要服务器设置本响应头。</p><p>Access-Control-Expose-Headers 头让服务器把允许浏览器访问的头放入白名单，例如：</p><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Access-Control-Expose-Headers</span>: X-My-Custom-Header, X-Another-Custom-Header</span></pre></td></tr></table></figure><p>这样浏览器就能够通过 getResponseHeader 访问 X-My-Custom-Header 和 X-Another-Custom-Header 响应头了。</p><h3 id="Access-Control-Max-Age"><a href="#Access-Control-Max-Age" class="headerlink" title="Access-Control-Max-Age"></a>Access-Control-Max-Age</h3><p>Access-Control-Max-Age 头指定了 preflight 请求的结果能够被缓存多久，请参考本文在前面提到的 preflight 例子。</p><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Access-Control-Max-Age</span>: &lt;delta-seconds&gt;</span></pre></td></tr></table></figure><p>delta-seconds 参数表示 preflight 请求的结果在多少秒内有效。</p><h3 id="Access-Control-Allow-Credentials"><a href="#Access-Control-Allow-Credentials" class="headerlink" title="Access-Control-Allow-Credentials"></a>Access-Control-Allow-Credentials</h3><p>Access-Control-Allow-Credentials 头指定了当浏览器的 credentials 设置为 true 时是否允许浏览器读取 response 的内容。当用在对 preflight 预检测请求的响应中时，它指定了实际的请求是否可以使用 credentials。</p><blockquote><p>请注意：简单 GET 请求不会被预检；<br>如果对此类请求的响应中不包含该字段，这个响应将被忽略掉，并且浏览器也不会将相应内容返回给网页。</p></blockquote><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Access-Control-Allow-Credentials</span>: true</span></pre></td></tr></table></figure><p>上文已经讨论了附带身份凭证的请求。</p><h3 id="Access-Control-Allow-Methods"><a href="#Access-Control-Allow-Methods" class="headerlink" title="Access-Control-Allow-Methods"></a>Access-Control-Allow-Methods</h3><p>Access-Control-Allow-Methods 首部字段用于预检请求的响应。其指明了实际请求所允许使用的 HTTP 方法。</p><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Access-Control-Allow-Methods</span>: &lt;method&gt;[, &lt;method&gt;]*</span></pre></td></tr></table></figure><h3 id="Access-Control-Allow-Headers"><a href="#Access-Control-Allow-Headers" class="headerlink" title="Access-Control-Allow-Headers"></a>Access-Control-Allow-Headers</h3><p>Access-Control-Allow-Headers 首部字段用于预检请求的响应。其指明了实际请求中允许携带的首部字段。</p><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Access-Control-Allow-Headers</span>: &lt;field-name&gt;[, &lt;field-name&gt;]*</span></pre></td></tr></table></figure><h2 id="HTTP-请求首部字段"><a href="#HTTP-请求首部字段" class="headerlink" title="HTTP 请求首部字段"></a>HTTP 请求首部字段</h2><p>本节列出了可用于发起跨域请求的首部字段。请注意，这些首部字段无须手动设置。 当开发者使用 XMLHttpRequest 对象发起跨域请求时，它们已经被设置就绪。</p><h3 id="Origin"><a href="#Origin" class="headerlink" title="Origin"></a>Origin</h3><p>Origin 首部字段表明预检请求或实际请求的源站。</p><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Origin</span>: &lt;origin&gt;</span></pre></td></tr></table></figure><p>origin 参数的值为源站 URI。它不包含任何路径信息，只是服务器名称。</p><p>Note: 有时候将该字段的值设置为空字符串是有用的，例如，当源站是一个 data URL 时。</p><blockquote><p>注意，不管是否为跨域请求，ORIGIN 字段总是被发送。</p></blockquote><h3 id="Access-Control-Request-Method"><a href="#Access-Control-Request-Method" class="headerlink" title="Access-Control-Request-Method"></a>Access-Control-Request-Method</h3><p>Access-Control-Request-Method 首部字段用于预检请求。其作用是，将实际请求所使用的 HTTP 方法告诉服务器。</p><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Access-Control-Request-Method</span>: &lt;method&gt;</span></pre></td></tr></table></figure><h3 id="Access-Control-Request-Headers"><a href="#Access-Control-Request-Headers" class="headerlink" title="Access-Control-Request-Headers"></a>Access-Control-Request-Headers</h3><p>Access-Control-Request-Headers 首部字段用于预检请求。其作用是，将实际请求所携带的首部字段告诉服务器。</p><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Access-Control-Request-Headers</span>: &lt;field-name&gt;[, &lt;field-name&gt;]*</span></pre></td></tr></table></figure><h2 id="server-CORS-process-flowchart"><a href="#server-CORS-process-flowchart" class="headerlink" title="server CORS process flowchart"></a>server CORS process flowchart</h2><img src="/blog/img/web/cors/cors-server-flowchart.png" class="image-lg" title="[cors-server-flowchart]"><h2 id="CORS-POST-example"><a href="#CORS-POST-example" class="headerlink" title="CORS POST example"></a>CORS POST example</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fetch(<span class="string">'https://httpbin.org/post'</span>,</span><span class="line">        &#123;<span class="attr">method</span>: <span class="string">'POST'</span>, <span class="attr">headers</span>: <span class="keyword">new</span> Headers(&#123;<span class="string">'Content-Type'</span>: <span class="string">'application/json'</span>&#125;), <span class="attr">body</span>: <span class="built_in">JSON</span>.stringify(&#123;<span class="attr">a</span>: <span class="number">1</span>&#125;)&#125;)</span><span class="line">    .then(<span class="function"><span class="params">response</span> =&gt;</span> response.json())</span><span class="line">    .then(<span class="function"><span class="params">json</span> =&gt;</span> <span class="built_in">console</span>.log(json));</span></pre></td></tr></table></figure><p>上述请求可在浏览器控制台测试，OPTIONS 请求头如下：</p><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Access-Control-Request-Headers</span>: content-type</span><span class="line"><span class="attribute">Access-Control-Request-Method</span>: POST</span><span class="line"><span class="attribute">DNT</span>: 1</span><span class="line"><span class="attribute">Origin</span>: http://test.4e00.com</span><span class="line"><span class="attribute">Referer</span>: http://test.4e00.com/blog/web/2019/04/09/http-cross-origin-resource-sharing-cors.html</span><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36</span></pre></td></tr></table></figure><p>OPTIONS 请求服务器回响应头如下：</p><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Access-Control-Allow-Credentials</span>: true</span><span class="line"><span class="attribute">Access-Control-Allow-Headers</span>: content-type</span><span class="line"><span class="attribute">Access-Control-Allow-Methods</span>: GET, POST, PUT, DELETE, PATCH, OPTIONS</span><span class="line"><span class="attribute">Access-Control-Allow-Origin</span>: http://test.4e00.com</span><span class="line"><span class="attribute">Access-Control-Max-Age</span>: 3600</span><span class="line"><span class="attribute">Allow</span>: POST, OPTIONS</span><span class="line"><span class="attribute">Connection</span>: keep-alive</span><span class="line"><span class="attribute">Content-Length</span>: 0</span><span class="line"><span class="attribute">Content-Type</span>: text/html; charset=utf-8</span><span class="line"><span class="attribute">Date</span>: Wed, 09 Apr 2019 11:29:49 GMT</span><span class="line"><span class="attribute">Server</span>: nginx</span></pre></td></tr></table></figure><p>OPTIONS 预检请求合法，然后发起的 HTTP POST 请求头如下：</p><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">content-type</span>: application/json</span><span class="line"><span class="attribute">DNT</span>: 1</span><span class="line"><span class="attribute">Origin</span>: http://test.4e00.com</span><span class="line"><span class="attribute">Referer</span>: http://test.4e00.com/blog/web/2019/04/09/http-cross-origin-resource-sharing-cors.html</span><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36</span></pre></td></tr></table></figure><p>返回结果如下：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><span class="line">  <span class="attr">"args"</span>: &#123;&#125;,</span><span class="line">  <span class="attr">"data"</span>: <span class="string">"&#123;\"a\":1&#125;"</span>,</span><span class="line">  <span class="attr">"files"</span>: &#123;&#125;,</span><span class="line">  <span class="attr">"form"</span>: &#123;&#125;,</span><span class="line">  <span class="attr">"headers"</span>: &#123;</span><span class="line">    <span class="attr">"Accept"</span>: <span class="string">"*/*"</span>,</span><span class="line">    <span class="attr">"Accept-Encoding"</span>: <span class="string">"gzip, deflate, br"</span>,</span><span class="line">    <span class="attr">"Accept-Language"</span>: <span class="string">"en-US,en;q=0.9,zh;q=0.8,zh-CN;q=0.7,zh-TW;q=0.6,ja;q=0.5,sv;q=0.4,hu;q=0.3,fr;q=0.2,sn;q=0.1,pt;q=0.1"</span>,</span><span class="line">    <span class="attr">"Content-Length"</span>: <span class="string">"7"</span>,</span><span class="line">    <span class="attr">"Content-Type"</span>: <span class="string">"application/json"</span>,</span><span class="line">    <span class="attr">"Dnt"</span>: <span class="string">"1"</span>,</span><span class="line">    <span class="attr">"Host"</span>: <span class="string">"httpbin.org"</span>,</span><span class="line">    <span class="attr">"Origin"</span>: <span class="string">"http://test.4e00.com"</span>,</span><span class="line">    <span class="attr">"Referer"</span>: <span class="string">"http://test.4e00.com/blog/web/2019/04/09/http-cross-origin-resource-sharing-cors.html"</span>,</span><span class="line">    <span class="attr">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36"</span></span><span class="line">  &#125;,</span><span class="line">  <span class="attr">"json"</span>: &#123;</span><span class="line">    <span class="attr">"a"</span>: <span class="number">1</span></span><span class="line">  &#125;,</span><span class="line">  <span class="attr">"origin"</span>: <span class="string">"10.87.121.107"</span>,</span><span class="line">  <span class="attr">"url"</span>: <span class="string">"https://httpbin.org/post"</span></span><span class="line">&#125;</span></pre></td></tr></table></figure><h2 id="Spring-boot-application-return-403-for-CORS-OPTIONS"><a href="#Spring-boot-application-return-403-for-CORS-OPTIONS" class="headerlink" title="Spring boot application return 403 for CORS OPTIONS"></a>Spring boot application return 403 for CORS OPTIONS</h2><p>一个跨域 POST 请求至后端 nginx，然后转发给 spring boot 应用，浏览器控制台抛错如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">OPTIONS http://www.example.com/cors/post/request net::ERR_ABORTED 403</span><span class="line">Access to XMLHttpRequest at &apos;http://www.example.com/cors/post/request&apos; from origin &apos;http://test.4e00.com&apos; has been blocked by CORS policy:</span><span class="line">Response to preflight request doesn&apos;t pass access control check: No &apos;Access-Control-Allow-Origin&apos; header is present on the requested resource.</span></pre></td></tr></table></figure><h3 id="Tomcat-log"><a href="#Tomcat-log" class="headerlink" title="Tomcat log"></a>Tomcat log</h3><p>spring boot 应用的 tomcat 日志 localhost-access.log 中可以看到返回的状态码就是 403，因为 OPTIONS 的 preflight 请求失败了，所以后面的 POST 请求并没有实际发送给服务器。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1 - - [09/Apr/2019:16:48:48 +0800] &quot;OPTIONS /partner/login HTTP/1.0&quot; 403 20 &quot;http://test.4e00.com&quot;</span><span class="line">&quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36&quot; 55</span></pre></td></tr></table></figure><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>这个问题一般来说是通过配置 spring boot 应用本身的设置，以达到跨域访问的效果，解决方法可参考 <a href="https://stackoverflow.com/questions/38507370/cors-preflight-request-fails-due-to-a-standard-header" target="_blank" rel="noopener">CORS preflight request fails due to a standard header</a> 这个帖子。</p><p>我这里只是测试使用，因为中间是经过 nginx 反向代理的，所以直接通过 nginx 配置覆盖 spring boot tomcat 返回的 403 状态，绕过这个问题，即允许所有的跨域请求，包括数据修改的 POST 请求，nginx 配置部分如下：</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">location</span> / &#123;</span><span class="line">    <span class="attribute">proxy_pass</span> http://127.0.0.1:8080/;</span><span class="line"></span><span class="line">    <span class="attribute">add_header</span> Access-Control-Allow-Origin <span class="variable">$http_origin</span>;</span><span class="line">    <span class="attribute">add_header</span> Access-Control-Allow-Methods GET,POST,OPTIONS;</span><span class="line">    <span class="attribute">add_header</span> Access-Control-Allow-Credentials <span class="literal">true</span>;</span><span class="line">    <span class="attribute">add_header</span> Access-Control-Allow-Headers DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type;</span><span class="line"></span><span class="line">    <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><span class="line">    <span class="attribute">proxy_set_header</span> Host <span class="variable">$http_host</span>;</span><span class="line"></span><span class="line">    <span class="attribute">if</span> (<span class="variable">$request_method</span> = OPTIONS) &#123;</span><span class="line">        <span class="attribute">return</span> <span class="number">204</span>; <span class="comment"># 用这里覆盖 spring boot tomcat 返回的 403 状态</span></span><span class="line">    &#125;</span><span class="line">&#125;</span></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS" target="_blank" rel="noopener">HTTP 访问控制 - CORS</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS" target="_blank" rel="noopener">Cross-Origin Resource Sharing - CORS</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Preflight_request" target="_blank" rel="noopener">Preflight request</a></li><li><a href="https://stackoverflow.com/questions/29954037/why-is-an-options-request-sent-and-can-i-disable-it" target="_blank" rel="noopener">Why is an OPTIONS request sent and can I disable it</a></li><li><a href="https://stackoverflow.com/questions/38507370/cors-preflight-request-fails-due-to-a-standard-header" target="_blank" rel="noopener">CORS preflight request fails due to a standard header</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Preflight-request&quot;&gt;&lt;a href=&quot;#Preflight-request&quot; class=&quot;headerlink&quot; title=&quot;Preflight request&quot;&gt;&lt;/a&gt;Preflight request&lt;/h2&gt;&lt;p&gt;一个 CORS 预检请求是用于检查服务器是否支持 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/CORS&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CORS&lt;/a&gt; 即跨域资源共享。&lt;/p&gt;
&lt;p&gt;它一般是用了以下几个 HTTP 请求首部的 OPTIONS 请求：Access-Control-Request-Method 和 Access-Control-Request-Headers，以及一个 Origin 首部。&lt;/p&gt;
&lt;p&gt;当有必要的时候，浏览器会自动发出一个预检请求；所以在正常情况下，前端开发者不需要自己去发这样的请求。&lt;/p&gt;
&lt;p&gt;这里先看个简单的例子，下文有详细说明预检请求过程，一个客户端可能会在实际发送一个 DELETE 请求之前，先向服务器发起一个预检请求，用于询问是否可以向服务器发起一个 DELETE 请求：&lt;/p&gt;
&lt;figure class=&quot;highlight http&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;OPTIONS /resource/foo&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Access-Control-Request-Method&lt;/span&gt;: DELETE&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Access-Control-Request-Headers&lt;/span&gt;: origin, x-requested-with&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Origin&lt;/span&gt;: https://foo.bar.org&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果服务器允许，那么服务器就会响应这个预检请求，并且其响应首部 Access-Control-Allow-Methods 会将 DELETE 包含在其中：&lt;/p&gt;
&lt;figure class=&quot;highlight http&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;HTTP/1.1 &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt; OK&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Content-Length&lt;/span&gt;: 0&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Connection&lt;/span&gt;: keep-alive&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Access-Control-Allow-Origin&lt;/span&gt;: https://foo.bar.org&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Access-Control-Allow-Methods&lt;/span&gt;: POST, GET, OPTIONS, DELETE&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Access-Control-Max-Age&lt;/span&gt;: 86400&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="web" scheme="http://www.4e00.com/categories/web/"/>
    
    
  </entry>
  
  <entry>
    <title>tcp 参数 so_linger 说明及测试</title>
    <link href="http://www.4e00.com/linux/2019/03/27/tcp-option-so-linger.html"/>
    <id>http://www.4e00.com/linux/2019/03/27/tcp-option-so-linger.html</id>
    <published>2019-03-27T06:17:06.000Z</published>
    <updated>2019-05-07T12:22:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="java-Socket-SO-LINGER-设置方法源码"><a href="#java-Socket-SO-LINGER-设置方法源码" class="headerlink" title="java Socket SO_LINGER 设置方法源码"></a>java Socket SO_LINGER 设置方法源码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">999</span><span class="line">1000</span><span class="line">1001</span><span class="line">1002</span><span class="line">1003</span><span class="line">1004</span><span class="line">1005</span><span class="line">1006</span><span class="line">1007</span><span class="line">1008</span><span class="line">1009</span><span class="line">1010</span><span class="line">1011</span><span class="line">1012</span><span class="line">1013</span><span class="line">1014</span><span class="line">1015</span><span class="line">1016</span><span class="line">1017</span><span class="line">1018</span><span class="line">1019</span><span class="line">1020</span><span class="line">1021</span><span class="line">1022</span><span class="line">1023</span><span class="line">1024</span><span class="line">1025</span><span class="line">1026</span><span class="line">1027</span></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><span class="line"><span class="comment"> * Enable/disable &#123;<span class="doctag">@link</span> SocketOptions#SO_LINGER SO_LINGER&#125; with the</span></span><span class="line"><span class="comment"> * specified linger time in seconds. The maximum timeout value is platform</span></span><span class="line"><span class="comment"> * specific.</span></span><span class="line"><span class="comment"> *</span></span><span class="line"><span class="comment"> * The setting only affects socket close.</span></span><span class="line"><span class="comment"> *</span></span><span class="line"><span class="comment"> * <span class="doctag">@param</span> on     whether or not to linger on.</span></span><span class="line"><span class="comment"> * <span class="doctag">@param</span> linger how long to linger for, if on is true.</span></span><span class="line"><span class="comment"> * <span class="doctag">@exception</span> SocketException if there is an error</span></span><span class="line"><span class="comment"> * in the underlying protocol, such as a TCP error.</span></span><span class="line"><span class="comment"> * <span class="doctag">@exception</span> IllegalArgumentException if the linger value is negative.</span></span><span class="line"><span class="comment"> * <span class="doctag">@since</span> JDK1.1</span></span><span class="line"><span class="comment"> * <span class="doctag">@see</span> #getSoLinger()</span></span><span class="line"><span class="comment"> */</span></span><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSoLinger</span><span class="params">(<span class="keyword">boolean</span> on, <span class="keyword">int</span> linger)</span> <span class="keyword">throws</span> SocketException </span>&#123;</span><span class="line">    <span class="keyword">if</span> (isClosed())</span><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> SocketException(<span class="string">"Socket is closed"</span>);</span><span class="line">    <span class="keyword">if</span> (!on) &#123;</span><span class="line">        getImpl().setOption(SocketOptions.SO_LINGER, <span class="keyword">new</span> Boolean(on));</span><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><span class="line">        <span class="keyword">if</span> (linger &lt; <span class="number">0</span>) &#123;</span><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"invalid value for SO_LINGER"</span>);</span><span class="line">        &#125;</span><span class="line">        <span class="keyword">if</span> (linger &gt; <span class="number">65535</span>)</span><span class="line">            linger = <span class="number">65535</span>;</span><span class="line">        getImpl().setOption(SocketOptions.SO_LINGER, <span class="keyword">new</span> Integer(linger));</span><span class="line">    &#125;</span><span class="line">&#125;</span></pre></td></tr></table></figure><h2 id="Socket-SO-LINGER-参数设置说明"><a href="#Socket-SO-LINGER-参数设置说明" class="headerlink" title="Socket SO_LINGER 参数设置说明"></a>Socket SO_LINGER 参数设置说明</h2><p>SO_LINGER 这个参数是控制 socket 关闭后的行为，不看系统底层的实现，只从上面 java 代码的实现来看，这个方法的二个参数<code>on</code>和<code>linger</code>有以下三种组合：</p><h3 id="on-false"><a href="#on-false" class="headerlink" title="on = false"></a>on = false</h3><p>这是默认行为，当<code>on</code>为<code>false</code>时，<code>linger</code>对应的设置就没有意义，当 socket 主动 close，调用的线程会马上返回，不会阻塞，残留在缓冲区中的数据将继续发送给对端，并且与对端进行 FIN-ACK 协议交换，最后进入 TIME_WAIT 状态。</p><h3 id="on-true-linger-gt-0"><a href="#on-true-linger-gt-0" class="headerlink" title="on = true, linger &gt; 0"></a>on = true, linger &gt; 0</h3><p>调用 close 的线程将阻塞，发生两种可能的情况：</p><ol><li>是剩余的数据继续发送，进行关闭协议交换；</li><li>就是超时过期，剩余的数据将被删除，进行 FIN-ACK 交换。</li></ol><h3 id="on-true-linger-0"><a href="#on-true-linger-0" class="headerlink" title="on = true, linger = 0"></a>on = true, linger = 0</h3><p>这种方式就是所谓<code>hard-close</code>，这个方式是讨论或者争论最多的用法，任何剩余的数据都被立即丢弃，并且 FIN-ACK 交换也不会发生，替代产生 RST ，让对端抛出<code>connection reset</code>的 SocketException 。</p><a id="more"></a><h2 id="测试-sock-程序下载"><a href="#测试-sock-程序下载" class="headerlink" title="测试 sock 程序下载"></a>测试 sock 程序下载</h2><p>下面程序演示会使用到 sock 程序，此程序可从 <a href="http://www.kohala.com/start/unpv12e.html" target="_blank" rel="noopener">UNIX Network Programming, Volume 1, Second Edition: Networking APIs: Sockets and XTI, Prentice Hall, 1998, ISBN 0-13-490012-X</a> 这里下载 sock 程序源码，另外我也在 <a href="https://github.com/yuweijun/tcpip-illustrated-v1" target="_blank" rel="noopener">github</a> 上放了一份源码和在 Linux 平台上编译生成的可执行程序，不同平台可以参照 README 文件编译安装，或者直接从 sourceforge.net 下载二进制 <a href="http://ttcplinux.sourceforge.net/tools/sock" target="_blank" rel="noopener">sock</a> 程序。</p><h2 id="正常四次挥手关闭连接过程"><a href="#正常四次挥手关闭连接过程" class="headerlink" title="正常四次挥手关闭连接过程"></a>正常四次挥手关闭连接过程</h2><img src="/blog/img/linux/tcp/tcp-close.png" class="image-md" title="[tcp-close.png]"><h2 id="发送-RST-异常终止一个连接"><a href="#发送-RST-异常终止一个连接" class="headerlink" title="发送 RST 异常终止一个连接"></a>发送 RST 异常终止一个连接</h2><p>终止一个连接的正常方式是 TCP 连接中的一方发送 FIN，有时这也称为<code>有序释放</code>（orderly release），因为在所有排队数据都已发送之后才发送 FIN，正常情况下没有任何数据丢失。但也有可能发送一个复位报文段而不是 FIN 来中途释放一个连接，有时称这为<code>异常释放</code>（abortive release）。</p><p>异常终止一个连接对应用程序来说有两个优点：</p><ol><li>丢弃任何待发数据并立即发送复位报文段；</li><li>RST 的接收方会区分另一端执行的是异常关闭还是正常关闭，应用程序使用的 API 必须提供产生异常关闭而不是正常关闭的手段。</li></ol><p>Socket API 通过<code>linger on close</code>选项（SO_LINGER）提供了这种异常关闭的能力，激活此选项并将停留时间设为<code>0</code>，这将导致连接关闭时进行复位 RST 而不是正常的 FIN，上述原文如下：</p><h3 id="TCP-IP-Illustrated-Aborting-a-Connection"><a href="#TCP-IP-Illustrated-Aborting-a-Connection" class="headerlink" title="TCP/IP Illustrated - Aborting a Connection"></a>TCP/IP Illustrated - Aborting a Connection</h3><p>We saw in Section 18.2 that the normal way to terminate a connection is for one side to send a FIN. This is sometimes called an <code>orderly release</code> since the FIN is sent after all previously queued data has been sent, and there is normally no loss of data. But it&#39;s also possible to abort a connection by sending a reset instead of a FIN. This is sometimes called an <code>abortive release</code>.</p><p>Aborting a connection provides two features to the application:</p><ol><li>any queued data is thrown away and the reset is sent immediately, and</li><li>the receiver of the RST can tell that the other end did an abort instead of a normal close. The API being used by the application must provide a way to generate the abort instead of a normal close.</li></ol><p>We can watch this abort sequence happen using our sock program. The sockets API provides this capability by using the &quot;linger on close&quot; socket option (SO_LINGER). We specify the -L option with a linger time of 0. This causes the abort to be sent when the connection is closed, instead of the normal FIN.</p><h2 id="RST-终止连接示例"><a href="#RST-终止连接示例" class="headerlink" title="RST 终止连接示例"></a>RST 终止连接示例</h2><p>使用复位 RST 而不是 FIN 来异常终止一个连接示例如下，中间的命令是使用 <a href="https://github.com/yuweijun/tcpip-illustrated-v1" target="_blank" rel="noopener">sock</a> 程序启动服务，最下面的命令是客户端输入<code>Hello World</code>之后按<kbd>Ctrl-D</kbd>输入文件结束符：</p><img src="/blog/img/linux/tcp/solinger/tcp-rst-instead-fin-sock-1.png" class="image-hg" title="[Aborting a connection with a reset (RST) instead of a FIN]"><p>上图第 <code>1~3</code> 个数据包显示出建立连接的正常过程。第 <code>5</code> 个数据包发送我们键入的数据行（12 个字符和 Unix 换行符），第 <code>6</code> 个数据包是对收到数据的确认。</p><p>第 <code>7</code> 个数据包对应为终止客户程序而键入的文件结束符<kbd>Ctrl-D</kbd>。由于我们指明使用异常关闭而不是正常关闭（命令行中的<code>-L0</code>选项），因此最后的第 <code>8</code> 个数据包中客户端的 TCP 发送一个 RST 而不是通常的 FIN 。RST 报文段中包含一个序号和确认序号。需要注意的是 RST 报文段不会导致另一端产生任何响应，另一端根本不进行确认。收到 RST 的一方将终止该连接，并通知应用层连接复位。</p><h2 id="stackoverflow-com-上关于-TCP-linger-true-timeout-0-的讨论"><a href="#stackoverflow-com-上关于-TCP-linger-true-timeout-0-的讨论" class="headerlink" title="stackoverflow.com 上关于 TCP linger=true, timeout=0 的讨论"></a>stackoverflow.com 上关于 TCP linger=true, timeout=0 的讨论</h2><p>将<code>SO_LINGER</code>超时设置为<code>0</code>的典型原因是避免大量连接处于 TIME_WAIT 状态，因为这些过多 TIME_WAIT 连接，最终可能会阻止服务器打开新连接。</p><p>当关闭 TCP 连接时，发起关闭的一方（主动关闭）最终会在 TIME_WAIT 中连接几分钟，如果是服务器启动连接关闭的协议，并且涉及大量短连接，那么服务器可能容易受到过多 TIME_WAIT 连接问题的影响。</p><p>使用<code>linger=true, timeout=0</code>来避免 TIME_WAIT 连接数过多问题，这并不是一个好主意，TIME_WAIT 存在是有原因的（确保来自旧连接的数据包不会干扰新连接），如果可能的话，最好将协议重新设计为客户端启动连接关闭的协议。</p><p>要了解为什么 TIME_WAIT 状态是我们的朋友，请阅读 Stevens 等人的<code>UNIX 网络编程第三版</code>中的第<code>2.7</code>节，原版内容如下：</p><h3 id="UNIX-Network-Programming-2-7-TIME-WAIT-State"><a href="#UNIX-Network-Programming-2-7-TIME-WAIT-State" class="headerlink" title="UNIX Network Programming - 2.7 TIME_WAIT State"></a>UNIX Network Programming - 2.7 TIME_WAIT State</h3><p>Undoubtedly, one of the most misunderstood aspects of TCP with regard to network programming is its TIME_WAIT state. We can see in Figure 2.4 that the end that performs the active close goes through this state. The duration that this endpoint remains in this state is twice the maximum segment lifetime (MSL), sometimes called 2MSL.</p><p>Every implementation of TCP must choose a value for the MSL. The recommended value in RFC 1122 [Braden 1989] is 2 minutes, although Berkeley-derived implementations have traditionally used a value of 30 seconds instead. This means the duration of the TIME_WAIT state is between 1 and 4 minutes. The MSL is the maximum amount of time that any given IP datagram can live in a network. We know this time is bounded because every datagram contains an 8-bit hop limit (the IPv4 TTL field in Figure A.1 and the IPv6 hop limit field in Figure A.2) with a maximum value of 255. Although this is a hop limit and not a true time limit, the assumption is made that a packet with the maximum hop limit of 255 cannot exist in a network for more than MSL seconds.</p><p>The way in which a packet gets &quot;<strong>lost</strong>&quot; in a network is usually the result of routing anomalies. A router crashes or a link between two routers goes down and it takes the routing protocols seconds or minutes to stabilize and find an alternate path. During that time period, routing loops can occur (router A sends packets to router B, and B sends them back to A) and packets can get caught in these loops. In the meantime, assuming the lost packet is a TCP segment, the sending TCP times out and retransmits the packet, and the retransmitted packet gets to the final destination by some alternate path. But sometime later (up to MSL seconds after the lost packet started on its journey), the routing loop is corrected and the packet that was lost in the loop is sent to the final destination. This original packet is called a lost duplicate or a wandering duplicate. TCP must handle these duplicates.</p><p>There are two reasons for the TIME_WAIT state:</p><ol><li>To implement TCP&#39;s full-duplex connection termination reliably</li><li>To allow old duplicate segments to expire in the network</li></ol><p>The first reason can be explained by looking at Figure 2.5 and assuming that the final ACK is lost. The server will resend its final FIN, so the client must maintain state information, allowing it to resend the final ACK. If it did not maintain this information, it would respond with an RST (a different type of TCP segment), which would be interpreted by the server as an error. If TCP is performing all the work necessary to terminate both directions of data flow cleanly for a connection (its full-duplex close), then it must correctly handle the loss of any of these four segments.</p><p>This example also shows why the end that performs the active close is the end that remains in the TIME_WAIT state:</p><blockquote><p>because that end is the one that might have to retransmit the final ACK.</p></blockquote><p>To understand the second reason for the TIME_WAIT state, assume we have a TCP connection between 12.106.32.254 port 1500 and 206.168.112.219 port 21. This connection is closed and then sometime later, we establish another connection between the same IP addresses and ports: 12.106.32.254 port 1500 and 206.168.112.219 port 21. This latter connection is called an incarnation of the previous connection since the IP addresses and ports are the same. TCP must prevent old duplicates from a connection from reappearing at some later time and being misinterpreted as belonging to a new incarnation of the same connection. To do this, TCP will not initiate a new incarnation of a connection that is currently in the TIME_WAIT state. Since the duration of the TIME_WAIT state is twice the MSL, this allows MSL seconds for a packet in one direction to be lost, and another MSL seconds for the reply to be lost. By enforcing this rule, we are guaranteed that when we successfully establish a TCP connection, all old duplicates from previous incarnations of the connection have expired in the network.</p><p>There is an exception to this rule. Berkeley-derived implementations will initiate a new incarnation of a connection that is currently in the TIME_WAIT state if the arriving SYN has a sequence number that is &quot;greater than&quot; the ending sequence number from the previous incarnation. Pages 958–959 of TCPv2 talk about this in more detail. This requires the server to perform the active close, since the TIME_WAIT state must exist on the end that receives the next SYN. This capability is used by the rsh command. RFC 1185 [Jacobson, Braden, and Zhang 1990] talks about some pitfalls in doing this.</p><h3 id="UNIX-Network-Programming-7-4-SO-LINGER-Socket-Option"><a href="#UNIX-Network-Programming-7-4-SO-LINGER-Socket-Option" class="headerlink" title="UNIX Network Programming - 7.4 SO_LINGER Socket Option"></a>UNIX Network Programming - 7.4 SO_LINGER Socket Option</h3><p>This option specifies how the <code>close</code> function operates for a connection-oriented protocol (e.g., for TCP and SCTP, but not for UDP). By default, <code>close</code> returns immediately, but if there is any data still remaining in the socket send buffer, the system will try to deliver the data to the peer.</p><p>The <code>SO_LINGER</code> socket option lets us change this default. This option requires the following structure to be passed between the user process and the kernel. It is defined by including <code>&lt;sys/socket.h&gt;</code>.</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">linger</span> &#123;</span></span><span class="line">    <span class="keyword">int</span> l_onoff;  <span class="comment">/* 0=off, nonzero=on */</span></span><span class="line">    <span class="keyword">int</span> l_linger; <span class="comment">/* linger time, POSIX specifies units as seconds */</span></span><span class="line">&#125;;</span></pre></td></tr></table></figure><p>Calling setsockopt leads to one of the following three scenarios, depending on the values of the two structure members:</p><ol><li>If l_onoff is 0, the option is turned off. The value of l_linger is ignored and the previously discussed TCP default applies: <code>close</code> returns immediately.</li><li>If l_onoff is nonzero and l_linger is zero, TCP aborts the connection when it is closed (pp. 1019–1020 of TCPv2). That is, TCP discards any data still remaining in the socket send buffer and sends an RST to the peer, not the normal four-packet connection termination sequence (Section 2.6). We will show an example of this in Figure 16.21. This avoids TCP&#39;s TIME_WAIT state, but in doing so, leaves open the possibility of another incarnation of this connection being created within 2MSL seconds (Section 2.7) and having old duplicate segments from the just-terminated connection being incorrectly delivered to the new incarnation. SCTP will also do an abortive close of the socket by sending an ABORT chunk to the peer (see Section 9.2 of [Stewart and Xie 2001]) when l_onoff is nonzero and l_linger is zero. Occasional USENET postings advocate the use of this feature just to avoid the TIME_WAIT state and to be able to restart a listening server even if connections are still in use with the server&#39;s well-known port. This should NOT be done and could lead to data corruption, as detailed in RFC 1337 [Braden 1992]. Instead, the SO_REUSEADDR socket option should always be used in the server before the call to bind, as we will describe shortly. <strong>The TIME_WAIT state is our friend</strong> and is there to help us (i.e., to let old duplicate segments expire in the network). <strong>Instead of trying to avoid the state, we should understand it</strong> (Section 2.7). There are certain circumstances which warrant using this feature to send an abortive close. One example is an RS-232 terminal server, which might hang forever in CLOSE_WAIT trying to deliver data to a struck terminal port, but would properly reset the stuck port if it got an RST to discard the pending data.</li><li>If l_onoff is nonzero and l_linger is nonzero, then the kernel will linger when the socket is closed (p. 472 of TCPv2). That is, if there is any data still remaining in the socket send buffer, the process is put to sleep until either: (i) all the data is sent and acknowledged by the peer TCP, or (ii) the linger time expires. If the socket has been set to nonblocking (Chapter 16), it will not wait for the close to complete, even if the linger time is nonzero. When using this feature of the SO_LINGER option, it is important for the application to check the return value from close, because if the linger time expires before the remaining data is sent and acknowledged, close returns EWOULDBLOCK and any remaining data in the send buffer is discarded.</li></ol><p>We now need to see exactly when a close on a socket returns given the various scenarios we looked at. We assume that the client writes data to the socket and then calls close. Figure 7.7 shows the default situation.</p><p>The SO_LINGER socket option gives us more control over when close returns and also lets us force an RST to be sent instead of TCP&#39;s four-packet connection termination sequence. We must be careful sending RSTs, because this avoids TCP&#39;s TIME_WAIT state. Much of the time, this socket option does not provide the information that we need, in which case, an application-level ACK is required.</p><h3 id="Purposes-for-the-TIME-WAIT-state"><a href="#Purposes-for-the-TIME-WAIT-state" class="headerlink" title="Purposes for the TIME-WAIT state"></a>Purposes for the TIME-WAIT state</h3><p>The most known one is to <strong>prevent delayed segments</strong> from one connection being accepted by a later connection relying on the same quadruplet (source address, source port, destination address, destination port). The sequence number also needs to be in a certain range to be accepted. This narrows a bit the problem but it still exists, especially on fast connections with large receive windows. RFC 1337 explains in details what happens when the TIME-WAIT state is deficient. Here is an example of what could be avoided if the TIME-WAIT state wasn’t shortened:</p><img src="/blog/img/linux/tcp/tcp-close-duplicate-segment.svg" title="[Due to a shortened TIME-WAIT state, a delayed TCP segment has been accepted in an unrelated connection]"><p>The other purpose is to ensure <strong>the remote end has closed the connection</strong>. When the last ACK is lost, the remote end stays in the LAST-ACK state. Without the TIME-WAIT state, a connection could be reopened while the remote end still thinks the previous connection is valid. When it receives a SYN segment (and the sequence number matches), it will answer with a RST as it is not expecting such a segment. The new connection will be aborted with an error:</p><img src="/blog/img/linux/tcp/tcp-close-last-ack.svg" title="[If the remote end stays in LAST-ACK state because the last ACK was lost, opening a new connection with the same quadruplet will not work]"><h2 id="TCP-状态变化示意图"><a href="#TCP-状态变化示意图" class="headerlink" title="TCP 状态变化示意图"></a>TCP 状态变化示意图</h2><img src="/blog/img/linux/tcp/tcpip-state-transition-diagram.png" title="[tcpip-state-transition-diagram.png]"><h3 id="When-to-use-SO-LINGER-with-timeout-0"><a href="#When-to-use-SO-LINGER-with-timeout-0" class="headerlink" title="When to use SO_LINGER with timeout 0"></a>When to use SO_LINGER with timeout 0</h3><p>Again, according to &quot;UNIX Network Programming&quot; third edition, setting SO_LINGER with timeout <code>0</code> prior to calling <code>close()</code> will cause the normal termination sequence not to be initiated.</p><p>Instead, the peer setting this option and calling <code>close()</code> will send a RST (connection reset) which indicates an error condition and this is how it will be perceived at the other end. You will typically see errors like <code>Connection reset by peer</code>.</p><p>Therefore, in the normal situation it is a really bad idea to set SO_LINGER with timeout <code>0</code> prior to calling <code>close()</code> – from now on called abortive close – in a server application.</p><p>However, certain situation warrants doing so anyway:</p><ol><li>If the a client of your server application misbehaves (times out, returns invalid data, etc.) an abortive close makes sense to avoid being stuck in CLOSE_WAIT or ending up in the TIME_WAIT state.</li><li>If you must restart your server application which currently has thousands of client connections you might consider setting this socket option to avoid thousands of server sockets in TIME_WAIT (when calling <code>close()</code> from the server end) as this might prevent the server from getting available ports for new client connections after being restarted.</li><li>On page 202 in the aforementioned book it specifically says:<br> There are certain circumstances which warrant using this feature to send an abortive close. One example is an RS-232 terminal server, which might hang forever in CLOSE_WAIT trying to deliver data to a stuck terminal port, but would properly reset the stuck port if it got an RST to discard the pending data.</li><li>I would recommend this long article which I believe gives a very good answer to your question.</li></ol><p>As mentioned previously, the TIME_WAIT state is intended to allow any datagrams lingering from a closed connection to be discarded. During this period, the waiting TCP usually has little to do; it merely holds the state until the 2MSL timer expires.</p><h2 id="Linux-TCP-SO-LINGER-相关源码"><a href="#Linux-TCP-SO-LINGER-相关源码" class="headerlink" title="Linux TCP SO_LINGER 相关源码"></a>Linux TCP SO_LINGER 相关源码</h2><p><a href="https://github.com/torvalds/linux/blob/v5.0/net/ipv4/tcp.c" target="_blank" rel="noopener">https://github.com/torvalds/linux/blob/v5.0/net/ipv4/tcp.c</a> 摘录部分源码内容，关于<code>abort call</code>源码注释说明如下：</p><figure class="highlight c"><figcaption><span>tcp.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">203</span><span class="line">204</span></pre></td><td class="code"><pre><span class="line">*  Salvatore Sanfilippo    :   Support SO_LINGER with linger == <span class="number">1</span> <span class="keyword">and</span></span><span class="line">*                              lingertime == <span class="number">0</span> (RFC <span class="number">793</span> ABORT Call)</span></pre></td></tr></table></figure><p>关于 TCP 状态的说明注释部分：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">213</span><span class="line">214</span><span class="line">215</span><span class="line">216</span><span class="line">217</span><span class="line">218</span><span class="line">219</span><span class="line">220</span><span class="line">221</span><span class="line">222</span><span class="line">223</span><span class="line">224</span><span class="line">225</span><span class="line">226</span><span class="line">227</span><span class="line">228</span><span class="line">229</span><span class="line">230</span><span class="line">231</span><span class="line">232</span><span class="line">233</span><span class="line">234</span><span class="line">235</span><span class="line">236</span><span class="line">237</span><span class="line">238</span><span class="line">239</span><span class="line">240</span><span class="line">241</span><span class="line">242</span><span class="line">243</span><span class="line">244</span><span class="line">245</span></pre></td><td class="code"><pre><span class="line">* Description of States:</span><span class="line">*</span><span class="line">*  TCP_SYN_SENT        sent a connection request, waiting <span class="keyword">for</span> ack</span><span class="line">*</span><span class="line">*  TCP_SYN_RECV        received a connection request, sent ack,</span><span class="line">*                      waiting <span class="keyword">for</span> <span class="keyword">final</span> ack in three-way handshake.</span><span class="line">*</span><span class="line">*  TCP_ESTABLISHED     connection established</span><span class="line">*</span><span class="line">*  TCP_FIN_WAIT1       our side has shutdown, waiting to complete</span><span class="line">*                      transmission of remaining buffered data</span><span class="line">*</span><span class="line">*  TCP_FIN_WAIT2       all buffered data sent, waiting <span class="keyword">for</span> remote</span><span class="line">*                      to shutdown</span><span class="line">*</span><span class="line">*  TCP_CLOSING         both sides have shutdown but we still have</span><span class="line">*                      data we have to finish sending</span><span class="line">*</span><span class="line">*  TCP_TIME_WAIT       timeout to <span class="keyword">catch</span> resent junk before entering</span><span class="line">*                      closed, can only be entered from FIN_WAIT2</span><span class="line">*                      <span class="keyword">or</span> CLOSING.  Required because the other end</span><span class="line">*                      may <span class="keyword">not</span> have gotten our last ACK causing it</span><span class="line">*                      <span class="function">to retransmit the data <span class="title">packet</span> <span class="params">(which we ignore)</span></span></span><span class="line"><span class="function">*</span></span><span class="line"><span class="function">*  TCP_CLOSE_WAIT      remote side has shutdown <span class="keyword">and</span> is waiting <span class="keyword">for</span></span></span><span class="line"><span class="function">*                      us to finish writing our data <span class="keyword">and</span> to shutdown</span></span><span class="line"><span class="function">*                      <span class="params">(we have to close() to move on to LAST_ACK)</span></span></span><span class="line"><span class="function">*</span></span><span class="line"><span class="function">*  TCP_LAST_ACK        out side has shutdown after remote has</span></span><span class="line">*                      shutdown.  There may still be data in our</span><span class="line">*                      buffer that we have to finish sending</span><span class="line">*</span><span class="line">*  TCP_CLOSE           socket is finished</span></pre></td></tr></table></figure><p><code>tcp_close(socket, timeout)</code>方法源码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">2320</span><span class="line">2321</span><span class="line">2322</span><span class="line">2323</span><span class="line">2324</span><span class="line">2325</span><span class="line">2326</span><span class="line">2327</span><span class="line">2328</span><span class="line">2329</span><span class="line">2330</span><span class="line">2331</span><span class="line">2332</span><span class="line">2333</span><span class="line">2334</span><span class="line">2335</span><span class="line">2336</span><span class="line">2337</span><span class="line">2338</span><span class="line">2339</span><span class="line">2340</span><span class="line">2341</span><span class="line">2342</span><span class="line">2343</span><span class="line">2344</span><span class="line">2345</span><span class="line">2346</span><span class="line">2347</span><span class="line">2348</span><span class="line">2349</span><span class="line">2350</span><span class="line">2351</span><span class="line">2352</span><span class="line">2353</span><span class="line">2354</span><span class="line">2355</span><span class="line">2356</span><span class="line">2357</span><span class="line">2358</span><span class="line">2359</span><span class="line">2360</span><span class="line">2361</span><span class="line">2362</span><span class="line">2363</span><span class="line">2364</span><span class="line">2365</span><span class="line">2366</span><span class="line">2367</span><span class="line">2368</span><span class="line">2369</span><span class="line">2370</span><span class="line">2371</span><span class="line">2372</span><span class="line">2373</span><span class="line">2374</span><span class="line">2375</span><span class="line">2376</span><span class="line">2377</span><span class="line">2378</span><span class="line">2379</span><span class="line">2380</span><span class="line">2381</span><span class="line">2382</span><span class="line">2383</span><span class="line">2384</span><span class="line">2385</span><span class="line">2386</span><span class="line">2387</span><span class="line">2388</span><span class="line">2389</span><span class="line">2390</span><span class="line">2391</span><span class="line">2392</span><span class="line">2393</span><span class="line">2394</span><span class="line">2395</span><span class="line">2396</span><span class="line">2397</span><span class="line">2398</span><span class="line">2399</span><span class="line">2400</span><span class="line">2401</span><span class="line">2402</span><span class="line">2403</span><span class="line">2404</span><span class="line">2405</span><span class="line">2406</span><span class="line">2407</span><span class="line">2408</span><span class="line">2409</span><span class="line">2410</span><span class="line">2411</span><span class="line">2412</span><span class="line">2413</span><span class="line">2414</span><span class="line">2415</span><span class="line">2416</span><span class="line">2417</span><span class="line">2418</span><span class="line">2419</span><span class="line">2420</span><span class="line">2421</span><span class="line">2422</span><span class="line">2423</span><span class="line">2424</span><span class="line">2425</span><span class="line">2426</span><span class="line">2427</span><span class="line">2428</span><span class="line">2429</span><span class="line">2430</span><span class="line">2431</span><span class="line">2432</span><span class="line">2433</span><span class="line">2434</span><span class="line">2435</span><span class="line">2436</span><span class="line">2437</span><span class="line">2438</span><span class="line">2439</span><span class="line">2440</span><span class="line">2441</span><span class="line">2442</span><span class="line">2443</span><span class="line">2444</span><span class="line">2445</span><span class="line">2446</span><span class="line">2447</span><span class="line">2448</span><span class="line">2449</span><span class="line">2450</span><span class="line">2451</span><span class="line">2452</span><span class="line">2453</span><span class="line">2454</span><span class="line">2455</span><span class="line">2456</span><span class="line">2457</span><span class="line">2458</span><span class="line">2459</span><span class="line">2460</span><span class="line">2461</span><span class="line">2462</span><span class="line">2463</span><span class="line">2464</span><span class="line">2465</span><span class="line">2466</span><span class="line">2467</span><span class="line">2468</span><span class="line">2469</span><span class="line">2470</span><span class="line">2471</span><span class="line">2472</span><span class="line">2473</span><span class="line">2474</span><span class="line">2475</span><span class="line">2476</span><span class="line">2477</span><span class="line">2478</span><span class="line">2479</span><span class="line">2480</span><span class="line">2481</span><span class="line">2482</span><span class="line">2483</span><span class="line">2484</span><span class="line">2485</span><span class="line">2486</span><span class="line">2487</span><span class="line">2488</span><span class="line">2489</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tcp_close</span><span class="params">(struct sock *sk, <span class="keyword">long</span> timeout)</span></span></span><span class="line"><span class="function"></span>&#123;</span><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sk_buff</span> *<span class="title">skb</span>;</span></span><span class="line">    <span class="keyword">int</span> data_was_unread = <span class="number">0</span>;</span><span class="line">    <span class="keyword">int</span> state;</span><span class="line"></span><span class="line">    lock_sock(sk);</span><span class="line">    sk-&gt;sk_shutdown = SHUTDOWN_MASK;</span><span class="line"></span><span class="line">    <span class="keyword">if</span> (sk-&gt;sk_state == TCP_LISTEN) &#123;</span><span class="line">        tcp_set_state(sk, TCP_CLOSE);</span><span class="line"></span><span class="line">        <span class="comment">/* Special case. */</span></span><span class="line">        inet_csk_listen_stop(sk);</span><span class="line"></span><span class="line">        <span class="keyword">goto</span> adjudge_to_death;</span><span class="line">    &#125;</span><span class="line"></span><span class="line">    <span class="comment">/*  We need to flush the recv. buffs.  We do this only on the</span></span><span class="line"><span class="comment">     *  descriptor close, not protocol-sourced closes, because the</span></span><span class="line"><span class="comment">     *  reader process may not have drained the data yet!</span></span><span class="line"><span class="comment">     */</span></span><span class="line">    <span class="keyword">while</span> ((skb = __skb_dequeue(&amp;sk-&gt;sk_receive_queue)) != <span class="literal">NULL</span>) &#123;</span><span class="line">        u32 len = TCP_SKB_CB(skb)-&gt;end_seq - TCP_SKB_CB(skb)-&gt;seq;</span><span class="line"></span><span class="line">        <span class="keyword">if</span> (TCP_SKB_CB(skb)-&gt;tcp_flags &amp; TCPHDR_FIN)</span><span class="line">            len--;</span><span class="line">        data_was_unread += len;</span><span class="line">        __kfree_skb(skb);</span><span class="line">    &#125;</span><span class="line"></span><span class="line">    sk_mem_reclaim(sk);</span><span class="line"></span><span class="line">    <span class="comment">/* If socket has been already reset (e.g. in tcp_reset()) - kill it. */</span></span><span class="line">    <span class="keyword">if</span> (sk-&gt;sk_state == TCP_CLOSE)</span><span class="line">        <span class="keyword">goto</span> adjudge_to_death;</span><span class="line"></span><span class="line">    <span class="comment">/* As outlined in RFC 2525, section 2.17, we send a RST here because</span></span><span class="line"><span class="comment">     * data was lost. To witness the awful effects of the old behavior of</span></span><span class="line"><span class="comment">     * always doing a FIN, run an older 2.1.x kernel or 2.0.x, start a bulk</span></span><span class="line"><span class="comment">     * GET in an FTP client, suspend the process, wait for the client to</span></span><span class="line"><span class="comment">     * advertise a zero window, then kill -9 the FTP client, wheee...</span></span><span class="line"><span class="comment">     * Note: timeout is always zero in such a case.</span></span><span class="line"><span class="comment">     */</span></span><span class="line">    <span class="keyword">if</span> (unlikely(tcp_sk(sk)-&gt;repair)) &#123;</span><span class="line">        sk-&gt;sk_prot-&gt;disconnect(sk, <span class="number">0</span>);</span><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data_was_unread) &#123;</span><span class="line">        <span class="comment">/* Unread data was tossed, zap the connection. */</span></span><span class="line">        NET_INC_STATS(sock_net(sk), LINUX_MIB_TCPABORTONCLOSE);</span><span class="line">        tcp_set_state(sk, TCP_CLOSE);</span><span class="line">        tcp_send_active_reset(sk, sk-&gt;sk_allocation);</span><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sock_flag(sk, SOCK_LINGER) &amp;&amp; !sk-&gt;sk_lingertime) &#123;</span><span class="line">        <span class="comment">/* Check zero linger _after_ checking for unread data. */</span></span><span class="line">        sk-&gt;sk_prot-&gt;disconnect(sk, <span class="number">0</span>);</span><span class="line">        NET_INC_STATS(sock_net(sk), LINUX_MIB_TCPABORTONDATA);</span><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tcp_close_state(sk)) &#123;</span><span class="line">        <span class="comment">/* We FIN if the application ate all the data before</span></span><span class="line"><span class="comment">         * zapping the connection.</span></span><span class="line"><span class="comment">         */</span></span><span class="line"></span><span class="line">        <span class="comment">/* RED-PEN. Formally speaking, we have broken TCP state</span></span><span class="line"><span class="comment">         * machine. State transitions:</span></span><span class="line"><span class="comment">         *</span></span><span class="line"><span class="comment">         * TCP_ESTABLISHED -&gt; TCP_FIN_WAIT1</span></span><span class="line"><span class="comment">         * TCP_SYN_RECV -&gt; TCP_FIN_WAIT1 (forget it, it's impossible)</span></span><span class="line"><span class="comment">         * TCP_CLOSE_WAIT -&gt; TCP_LAST_ACK</span></span><span class="line"><span class="comment">         *</span></span><span class="line"><span class="comment">         * are legal only when FIN has been sent (i.e. in window),</span></span><span class="line"><span class="comment">         * rather than queued out of window. Purists blame.</span></span><span class="line"><span class="comment">         *</span></span><span class="line"><span class="comment">         * F.e. "RFC state" is ESTABLISHED,</span></span><span class="line"><span class="comment">         * if Linux state is FIN-WAIT-1, but FIN is still not sent.</span></span><span class="line"><span class="comment">         *</span></span><span class="line"><span class="comment">         * The visible declinations are that sometimes</span></span><span class="line"><span class="comment">         * we enter time-wait state, when it is not required really</span></span><span class="line"><span class="comment">         * (harmless), do not send active resets, when they are</span></span><span class="line"><span class="comment">         * required by specs (TCP_ESTABLISHED, TCP_CLOSE_WAIT, when</span></span><span class="line"><span class="comment">         * they look as CLOSING or LAST_ACK for Linux)</span></span><span class="line"><span class="comment">         * Probably, I missed some more holelets.</span></span><span class="line"><span class="comment">         *                      --ANK</span></span><span class="line"><span class="comment">         * XXX (TFO) - To start off we don't support SYN+ACK+FIN</span></span><span class="line"><span class="comment">         * in a single packet! (May consider it later but will</span></span><span class="line"><span class="comment">         * probably need API support or TCP_CORK SYN-ACK until</span></span><span class="line"><span class="comment">         * data is written and socket is closed.)</span></span><span class="line"><span class="comment">         */</span></span><span class="line">        tcp_send_fin(sk);</span><span class="line">    &#125;</span><span class="line"></span><span class="line">    sk_stream_wait_close(sk, timeout);</span><span class="line"></span><span class="line">adjudge_to_death:</span><span class="line">    state = sk-&gt;sk_state;</span><span class="line">    sock_hold(sk);</span><span class="line">    sock_orphan(sk);</span><span class="line"></span><span class="line">    local_bh_disable();</span><span class="line">    bh_lock_sock(sk);</span><span class="line">    <span class="comment">/* remove backlog if any, without releasing ownership. */</span></span><span class="line">    __release_sock(sk);</span><span class="line"></span><span class="line">    percpu_counter_inc(sk-&gt;sk_prot-&gt;orphan_count);</span><span class="line"></span><span class="line">    <span class="comment">/* Have we already been destroyed by a softirq or backlog? */</span></span><span class="line">    <span class="keyword">if</span> (state != TCP_CLOSE &amp;&amp; sk-&gt;sk_state == TCP_CLOSE)</span><span class="line">        <span class="keyword">goto</span> out;</span><span class="line"></span><span class="line">    <span class="comment">/*  This is a (useful) BSD violating of the RFC. There is a</span></span><span class="line"><span class="comment">     *  problem with TCP as specified in that the other end could</span></span><span class="line"><span class="comment">     *  keep a socket open forever with no application left this end.</span></span><span class="line"><span class="comment">     *  We use a 1 minute timeout (about the same as BSD) then kill</span></span><span class="line"><span class="comment">     *  our end. If they send after that then tough - BUT: long enough</span></span><span class="line"><span class="comment">     *  that we won't make the old 4*rto = almost no time - whoops</span></span><span class="line"><span class="comment">     *  reset mistake.</span></span><span class="line"><span class="comment">     *</span></span><span class="line"><span class="comment">     *  Nope, it was not mistake. It is really desired behaviour</span></span><span class="line"><span class="comment">     *  f.e. on http servers, when such sockets are useless, but</span></span><span class="line"><span class="comment">     *  consume significant resources. Let's do it with special</span></span><span class="line"><span class="comment">     *  linger2 option.                 --ANK</span></span><span class="line"><span class="comment">     */</span></span><span class="line"></span><span class="line">    <span class="keyword">if</span> (sk-&gt;sk_state == TCP_FIN_WAIT2) &#123;</span><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">tcp_sock</span> *<span class="title">tp</span> = <span class="title">tcp_sk</span>(<span class="title">sk</span>);</span></span><span class="line">        <span class="keyword">if</span> (tp-&gt;linger2 &lt; <span class="number">0</span>) &#123;</span><span class="line">            tcp_set_state(sk, TCP_CLOSE);</span><span class="line">            tcp_send_active_reset(sk, GFP_ATOMIC);</span><span class="line">            __NET_INC_STATS(sock_net(sk),</span><span class="line">                    LINUX_MIB_TCPABORTONLINGER);</span><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><span class="line">            <span class="keyword">const</span> <span class="keyword">int</span> tmo = tcp_fin_time(sk);</span><span class="line"></span><span class="line">            <span class="keyword">if</span> (tmo &gt; TCP_TIMEWAIT_LEN) &#123;</span><span class="line">                inet_csk_reset_keepalive_timer(sk,</span><span class="line">                        tmo - TCP_TIMEWAIT_LEN);</span><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><span class="line">                tcp_time_wait(sk, TCP_FIN_WAIT2, tmo);</span><span class="line">                <span class="keyword">goto</span> out;</span><span class="line">            &#125;</span><span class="line">        &#125;</span><span class="line">    &#125;</span><span class="line">    <span class="keyword">if</span> (sk-&gt;sk_state != TCP_CLOSE) &#123;</span><span class="line">        sk_mem_reclaim(sk);</span><span class="line">        <span class="keyword">if</span> (tcp_check_oom(sk, <span class="number">0</span>)) &#123;</span><span class="line">            tcp_set_state(sk, TCP_CLOSE);</span><span class="line">            tcp_send_active_reset(sk, GFP_ATOMIC);</span><span class="line">            __NET_INC_STATS(sock_net(sk),</span><span class="line">                    LINUX_MIB_TCPABORTONMEMORY);</span><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!check_net(sock_net(sk))) &#123;</span><span class="line">            <span class="comment">/* Not possible to send reset; just close */</span></span><span class="line">            tcp_set_state(sk, TCP_CLOSE);</span><span class="line">        &#125;</span><span class="line">    &#125;</span><span class="line"></span><span class="line">    <span class="keyword">if</span> (sk-&gt;sk_state == TCP_CLOSE) &#123;</span><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">request_sock</span> *<span class="title">req</span> = <span class="title">tcp_sk</span>(<span class="title">sk</span>)-&gt;<span class="title">fastopen_rsk</span>;</span></span><span class="line">        <span class="comment">/* We could get here with a non-NULL req if the socket is</span></span><span class="line"><span class="comment">         * aborted (e.g., closed with unread data) before 3WHS</span></span><span class="line"><span class="comment">         * finishes.</span></span><span class="line"><span class="comment">         */</span></span><span class="line">        <span class="keyword">if</span> (req)</span><span class="line">            reqsk_fastopen_remove(sk, req, <span class="literal">false</span>);</span><span class="line">        inet_csk_destroy_sock(sk);</span><span class="line">    &#125;</span><span class="line">    <span class="comment">/* Otherwise, socket is reprieved until protocol close. */</span></span><span class="line"></span><span class="line">out:</span><span class="line">    bh_unlock_sock(sk);</span><span class="line">    local_bh_enable();</span><span class="line">    release_sock(sk);</span><span class="line">    sock_put(sk);</span><span class="line">&#125;</span></pre></td></tr></table></figure><p>上面源码第 2371 行是 linger 结构体的字段 l_onoff 为<code>1</code>而 l_linger 为<code>0</code>的情况，此时调用<code>sk-&gt;sk_prot-&gt;disconnect(sk, 0)</code> -&gt; <code>tcp_disconnect()</code>函数，丢失所有接收数据并且直接断开连接，具体也就是发送 RST 数据包，清空相关接收队列；第 2375 行到第 2405 行代码属于正常的结束流程，即四次挥手，此时需先调用函数<code>tcp_close_state()</code>切换状态，并判断是否需要发送 FIN 数据包（比如，如果当前还处于 TCP_SYN_SENT 状态，连接尚未完全建立，自然就不用发送 FIN 数据包），如果需要发送 FIN 数据包则调用<code>tcp_send_fin()</code>函数。</p><h2 id="关于-TIME-WAIT-状态优化"><a href="#关于-TIME-WAIT-状态优化" class="headerlink" title="关于 TIME_WAIT 状态优化"></a>关于 TIME_WAIT 状态优化</h2><p>网上常可以看到类似如下的优化设置：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><i class="fa fa-usd"></i> <span class="built_in">echo</span> 30 &gt; /proc/sys/net/ipv4/tcp_fin_timeout</span><span class="line"></span><span class="line"><span class="comment"># only for positive close endpoint</span></span><span class="line"><i class="fa fa-usd"></i> <span class="built_in">echo</span> 1 &gt; /proc/sys/net/ipv4/tcp_tw_reuse</span><span class="line"></span><span class="line"><span class="comment"># don't run below cmd</span></span><span class="line"><i class="fa fa-usd"></i> <span class="built_in">echo</span> 1 &gt; /proc/sys/net/ipv4/tcp_tw_recycle</span></pre></td></tr></table></figure><h3 id="关于-tcp-tw-recycle"><a href="#关于-tcp-tw-recycle" class="headerlink" title="关于 tcp_tw_recycle"></a>关于 tcp_tw_recycle</h3><p>上面的设置有问题，尤其是<code>tcp_tw_recycle</code>，并且从 Linux-4.12 之后移除了<code>tcp_tw_recycle</code>这个选项，更多细节可参考此文章 <a href="https://vincent.bernat.ch/en/blog/2014-tcp-time-wait-state-linux" target="_blank" rel="noopener">Coping with the TCP TIME-WAIT state on busy Linux servers</a>。</p><h3 id="关于-tcp-tw-reuse-参数说明"><a href="#关于-tcp-tw-reuse-参数说明" class="headerlink" title="关于 tcp_tw_reuse 参数说明"></a>关于 tcp_tw_reuse 参数说明</h3><p>TIME-WAIT 状态是为了防止不相关的延迟请求包被接受。但在某些特定条件下很有可能出现新建立的 TCP 连接请求包被老连接（同样的四元组，暂时还是 TIME-WAIT 状态，回收中）错误处理。</p><p>RFC1323 提供了一组 TCP 扩展，以提高高带宽路径的性能。除此之外，它还定义了一个带有两个四字节时间戳字段的新 TCP 选项，第一个是 TCP 发送方的当前时钟时间戳，而第二个是从远程主机接收到的最新时间戳。</p><p>通过启用<code>net.ipv4.tcp_tw_reuse</code>，如果新时间戳严格大于为先前连接记录的最新时间戳，则 Linux 将重新使用 TIME-WAIT 状态的现有连接用于新的传出连接：TIME-WAIT 状态中的连接可在一秒钟后重复使用。</p><h4 id="tcp-tw-reuse-安全性"><a href="#tcp-tw-reuse-安全性" class="headerlink" title="tcp_tw_reuse 安全性"></a>tcp_tw_reuse 安全性</h4><p>如果另一端发过来的 FIN 包接及时收到，本地端的 ACK 包也被发送出去，则本地端进入 TIME-WAIT 状态。一旦新的连接替换了状态为 TIME-WAIT 的旧连接，新连接的 SYN 包会被另一端忽略掉（由于时间戳 timestamps），也不会应答 RST 包（注意与前面那张使用相同的四元组打开的新连接被 RST 的区别，如果没有时间戳这里直接返回 RST 包并关闭连接），而是通过重新传输 FIN 段来应答，如下图所示。FIN 包将会收到一个 RST 包的应答（因为本地连接是 SYN-SENT 状态），这会让远程端跳过 LAST-ACK 状态。最初的 SYN 段最终将被重新发送（一秒钟后），因为没有应答，并且建立连接时没有明显的错误，除了稍微延迟。</p><img src="/blog/img/linux/tcp/tcp-close-last-ack-reuse.svg" title="[If the remote end stays in LAST-ACK state because the last ACK was lost, the remote connection will be reset when the local end transition to the SYN-SENT state]"><p>在客户端（尤其是服务器上，某服务以客户端形式运行时，比如 nginx 反向代理）上启用<code>net.ipv4.tcp_tw_reuse</code>，还算是安全的解决 TIME-WAIT 的方案。</p><h2 id="MSL-设置"><a href="#MSL-设置" class="headerlink" title="MSL 设置"></a>MSL 设置</h2><p>MSL(Maximum Segment Lifetime)是最大分节生命期，一般为<code>60 秒</code>(linux)，<code>120 秒</code>(Windows)，有些系统则是<code>30 秒</code>，Windows 也是建议为<code>30 秒</code>。</p><h3 id="Linux-MSL-查看和设置"><a href="#Linux-MSL-查看和设置" class="headerlink" title="Linux MSL 查看和设置"></a>Linux MSL 查看和设置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><i class="fa fa-usd"></i> <span class="built_in">cat</span> /proc/sys/net/ipv4/tcp_fin_timeout</span><span class="line"><span class="comment"># setting</span></span><span class="line"><i class="fa fa-usd"></i> <span class="built_in">echo</span> 30 &gt; /proc/sys/net/ipv4/tcp_fin_timeout</span></pre></td></tr></table></figure><h3 id="Windows-MSL-设置"><a href="#Windows-MSL-设置" class="headerlink" title="Windows MSL 设置"></a>Windows MSL 设置</h3><p>注册表项<code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters</code>，<code>value</code>设置为<code>TcpTimedWaitDelay</code>，<code>REG_DWORD</code>类型，默认值为 16 进制的<code>0x78</code>，即<code>120 秒</code>，推荐值为<code>30 秒</code>。</p><h2 id="Java-server-client-example"><a href="#Java-server-client-example" class="headerlink" title="Java server/client example"></a>Java server/client example</h2><p>Java 代码演示 SO_LINGER 参数设置，关键代码<code>socket.setSoLinger(true, 0)</code>，先启动服务端，再启动客户端程序：</p><h3 id="SocketTcpSoLingerServer-java"><a href="#SocketTcpSoLingerServer-java" class="headerlink" title="SocketTcpSoLingerServer.java"></a>SocketTcpSoLingerServer.java</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketTcpSoLingerServer</span> </span>&#123;</span><span class="line"></span><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(SocketTcpSoLingerServer<span class="class">.<span class="keyword">class</span>)</span>;</span><span class="line"></span><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PORT = <span class="number">8888</span>;</span><span class="line"></span><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><span class="line">        ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket();</span><span class="line">        serverSocket.bind(<span class="keyword">new</span> InetSocketAddress(PORT));</span><span class="line"></span><span class="line">        LOGGER.info(<span class="string">"server startup at &#123;&#125;"</span>, PORT);</span><span class="line"></span><span class="line">        <span class="keyword">byte</span>[] data = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">32</span>];</span><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><span class="line">            Socket socket = serverSocket.accept();</span><span class="line">            LOGGER.info(<span class="string">"1. socket so linger : &#123;&#125;"</span>, socket.getSoLinger());</span><span class="line">            socket.setSoLinger(<span class="keyword">true</span>, <span class="number">0</span>);</span><span class="line">            <span class="comment">// socket.setSoLinger(true, 100);</span></span><span class="line">            LOGGER.info(<span class="string">"2. socket so linger : &#123;&#125;"</span>, socket.getSoLinger());</span><span class="line"></span><span class="line">            <span class="keyword">try</span> (InputStream in = socket.getInputStream();</span><span class="line">                 OutputStream out = socket.getOutputStream()) &#123;</span><span class="line">                <span class="keyword">int</span> i = <span class="number">1</span>;</span><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><span class="line">                    <span class="keyword">try</span> &#123;</span><span class="line">                        <span class="keyword">int</span> read = in.read(data);</span><span class="line">                        <span class="keyword">if</span> (read &gt; <span class="number">0</span>) &#123;</span><span class="line">                            String line = <span class="keyword">new</span> String(data, <span class="number">0</span>, read);</span><span class="line">                            <span class="comment">// 延时返回，客户端要发送 FIN 包，即调用 socket.shutdownOutput()</span></span><span class="line">                            TimeUnit.MILLISECONDS.sleep(<span class="number">1500L</span>);</span><span class="line">                            LOGGER.info(<span class="string">"&#123;&#125; : &#123;&#125;"</span>, i++, line);</span><span class="line">                            out.write(line.getBytes());</span><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (read == -<span class="number">1</span>) &#123;</span><span class="line">                            LOGGER.info(<span class="string">"close socket"</span>);</span><span class="line">                            socket.close();</span><span class="line">                            <span class="keyword">break</span>;</span><span class="line">                        &#125;</span><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><span class="line">                        LOGGER.error(<span class="string">"close socket for error"</span>, e);</span><span class="line">                        socket.close();</span><span class="line">                        <span class="keyword">break</span>;</span><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><span class="line">                        e.printStackTrace();</span><span class="line">                    &#125;</span><span class="line">                &#125;</span><span class="line">            &#125;</span><span class="line">        &#125;</span><span class="line">    &#125;</span><span class="line">&#125;</span></pre></td></tr></table></figure><h3 id="SocketTcpSoLingerClient-java"><a href="#SocketTcpSoLingerClient-java" class="headerlink" title="SocketTcpSoLingerClient.java"></a>SocketTcpSoLingerClient.java</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketTcpSoLingerClient</span> </span>&#123;</span><span class="line"></span><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(SocketTcpSoLingerClient<span class="class">.<span class="keyword">class</span>)</span>;</span><span class="line"></span><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PORT = <span class="number">8888</span>;</span><span class="line"></span><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><span class="line">        Socket socket = <span class="keyword">new</span> Socket(<span class="string">"localhost"</span>, PORT);</span><span class="line"></span><span class="line">        <span class="keyword">try</span> (InputStream socketInputStream = socket.getInputStream();</span><span class="line">             OutputStream socketOutputStream = socket.getOutputStream()) &#123;</span><span class="line"></span><span class="line">            String head = <span class="string">"hello "</span>;</span><span class="line">            String body = <span class="string">"world"</span>;</span><span class="line">            socketOutputStream.write(head.getBytes());</span><span class="line">            socketOutputStream.write(body.getBytes());</span><span class="line"></span><span class="line">            <span class="comment">// 如果客户端不关闭输出，则服务器和客户端都收不到关闭的 FIN 包，从而连接会一直保持</span></span><span class="line">            <span class="keyword">boolean</span> shutdownOutput = <span class="keyword">true</span>;</span><span class="line">            <span class="comment">// boolean shutdownOutput = false;</span></span><span class="line">            <span class="keyword">if</span> (shutdownOutput) &#123;</span><span class="line">                <span class="comment">// 这里调用了 socket.shutdownOutput()返回时，hello 和 world 未必已经成功发送到对方了</span></span><span class="line">                socket.shutdownOutput();</span><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><span class="line">                <span class="comment">// 用定时器来延时关闭连接</span></span><span class="line">                <span class="comment">// 等 3 秒是为了让服务器全部输出完成，双方一起关闭</span></span><span class="line">                <span class="keyword">final</span> Timer timer = <span class="keyword">new</span> Timer();</span><span class="line">                timer.schedule(<span class="keyword">new</span> TimerTask() &#123;</span><span class="line">                    <span class="meta">@Override</span></span><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><span class="line">                        <span class="keyword">try</span> &#123;</span><span class="line">                            LOGGER.info(<span class="string">"socket shutdown output in timer : &#123;&#125;"</span>, timer);</span><span class="line">                            socket.shutdownOutput();</span><span class="line">                            timer.cancel();</span><span class="line">                        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><span class="line">                            LOGGER.error(<span class="string">"socket shutdown error"</span>, e);</span><span class="line">                        &#125;</span><span class="line">                    &#125;</span><span class="line">                &#125;, <span class="number">3000L</span>);</span><span class="line">            &#125;</span><span class="line"></span><span class="line">            LOGGER.info(<span class="string">"socket shutdown output"</span>);</span><span class="line"></span><span class="line">            <span class="keyword">int</span> i = <span class="number">1</span>;</span><span class="line">            <span class="keyword">byte</span>[] data = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">32</span>];</span><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><span class="line">                <span class="keyword">int</span> read = socketInputStream.read(data);</span><span class="line">                <span class="keyword">if</span> (read &gt; <span class="number">0</span>) &#123;</span><span class="line">                    String line = <span class="keyword">new</span> String(data, <span class="number">0</span>, read);</span><span class="line">                    LOGGER.info(<span class="string">"&#123;&#125; : &#123;&#125;"</span>, i++, line);</span><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (read == -<span class="number">1</span>) &#123;</span><span class="line">                    LOGGER.info(<span class="string">"socket closed"</span>);</span><span class="line">                    socket.close();</span><span class="line">                    <span class="keyword">break</span>;</span><span class="line">                &#125;</span><span class="line">            &#125;</span><span class="line">        &#125;</span><span class="line">    &#125;</span><span class="line">&#125;</span></pre></td></tr></table></figure><h3 id="数据抓包截图"><a href="#数据抓包截图" class="headerlink" title="数据抓包截图"></a>数据抓包截图</h3><p>上面的 Java 程序运行后，抓包截图如下，可以看到第 9 行在客户端发送 FIN 包之后，TCP 连接形成半闭状态，服务端仍然在发送数据给客户端，最后客户端 ACK 确认接收完数据，服务器不是正常回应以 FIN 包，而是一个 RST 包，双方完成连接关闭：</p><img src="/blog/img/linux/tcp/solinger/server-socket-solinger-true-0-java-client.png" class="image-hg" title="[server-socket-solinger-true-0-java-client.png]"><h2 id="总结-SO-LINGER-参数用法"><a href="#总结-SO-LINGER-参数用法" class="headerlink" title="总结 SO_LINGER 参数用法"></a>总结 SO_LINGER 参数用法</h2><p>慎重使用<code>on=true, linger=0</code>，使用 RST 代替 FIN 直接强制关闭连接，主动关闭的一方也不会进入 TIME_WAIT 阶段，会减少系统的连接数，提高并发连接能力，但是这种异常关闭连接的方式，TCP 连接关闭的 TIME_WAIT 的作用也就没有了，是个有利有弊的用法，尽量不要使用，而是通过设计应用层协议来避免 TIME_WAIT 连接过多的问题。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol><li><a href="https://github.com/torvalds/linux/blob/v5.0/net/ipv4/tcp.c" target="_blank" rel="noopener">Linux TCP 源码</a></li><li><a href="http://www.masterraghu.com/subjects/np/introduction/unix_network_programming_v1.3/ch02.html" target="_blank" rel="noopener">Chapter 2. The Transport Layer: TCP, UDP, and SCTP</a></li><li><a href="https://vincent.bernat.ch/en/blog/2014-tcp-time-wait-state-linux" target="_blank" rel="noopener">Coping with the TCP TIME-WAIT state on busy Linux servers</a></li><li><a href="http://www.masterraghu.com/subjects/np/introduction/unix_network_programming_v1.3/ch04lev1sec5.html" target="_blank" rel="noopener">4.5 listen Function</a></li><li><a href="http://www.pcvr.nl/tcpip/tcp_conn.htm#18_2" target="_blank" rel="noopener">TCP Connection Establishment and Termination</a></li><li><a href="http://docs.52im.net/extend/docs/book/tcpip/vol1/18/" target="_blank" rel="noopener">第 18 章 TCP 连接的建立与终止</a></li><li><a href="https://docs.microsoft.com/en-us/biztalk/technical-guides/settings-that-can-be-modified-to-improve-network-performance" target="_blank" rel="noopener">Settings that can be Modified to Improve Network Performance</a></li><li><a href="https://stackoverflow.com/questions/3757289/tcp-option-so-linger-zero-when-its-required" target="_blank" rel="noopener">When to use SO_LINGER with timeout 0</a></li><li><a href="http://www.lenky.info/archives/2013/02/2220" target="_blank" rel="noopener">Socket 选项系列之 SO_LINGER</a></li><li><a href="https://docs.microsoft.com/en-us/biztalk/technical-guides/settings-that-can-be-modified-to-improve-network-performance" target="_blank" rel="noopener">Adjust the MaxUserPort and TcpTimedWaitDelay settings</a></li><li><a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=4396e46187ca5070219b81773c4e65088dac50cc" target="_blank" rel="noopener">tcp: remove tcp_tw_recycle</a></li><li><a href="http://www.cnxct.com/coping-with-the-tcp-time_wait-state-on-busy-linux-servers-in-chinese-and-dont-enable-tcp_tw_recycle/" target="_blank" rel="noopener">不要在 linux 上启用 net.ipv4.tcp_tw_recycle 参数</a></li><li><a href="/blog/linux/2016/08/06/tcp-open-and-close.html">tcp connection open and close</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;java-Socket-SO-LINGER-设置方法源码&quot;&gt;&lt;a href=&quot;#java-Socket-SO-LINGER-设置方法源码&quot; class=&quot;headerlink&quot; title=&quot;java Socket SO_LINGER 设置方法源码&quot;&gt;&lt;/a&gt;java Socket SO_LINGER 设置方法源码&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;999&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;1001&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;1002&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;1003&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;1004&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;1005&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;1006&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;1007&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;1008&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;1009&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;1010&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;1011&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;1012&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;1013&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;1014&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;1015&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;1016&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;1017&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;1018&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;1019&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;1020&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;1021&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;1022&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;1023&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;1025&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;1026&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;1027&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * Enable/disable &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@link&lt;/span&gt; SocketOptions#SO_LINGER SO_LINGER&amp;#125; with the&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * specified linger time in seconds. The maximum timeout value is platform&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * specific.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; *&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * The setting only affects socket close.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; *&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; on     whether or not to linger on.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; linger how long to linger for, if on is true.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@exception&lt;/span&gt; SocketException if there is an error&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * in the underlying protocol, such as a TCP error.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@exception&lt;/span&gt; IllegalArgumentException if the linger value is negative.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@since&lt;/span&gt; JDK1.1&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@see&lt;/span&gt; #getSoLinger()&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setSoLinger&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; on, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; linger)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; SocketException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (isClosed())&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SocketException(&lt;span class=&quot;string&quot;&gt;&quot;Socket is closed&quot;&lt;/span&gt;);&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!on) &amp;#123;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        getImpl().setOption(SocketOptions.SO_LINGER, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Boolean(on));&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (linger &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; IllegalArgumentException(&lt;span class=&quot;string&quot;&gt;&quot;invalid value for SO_LINGER&quot;&lt;/span&gt;);&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (linger &amp;gt; &lt;span class=&quot;number&quot;&gt;65535&lt;/span&gt;)&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;            linger = &lt;span class=&quot;number&quot;&gt;65535&lt;/span&gt;;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        getImpl().setOption(SocketOptions.SO_LINGER, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Integer(linger));&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Socket-SO-LINGER-参数设置说明&quot;&gt;&lt;a href=&quot;#Socket-SO-LINGER-参数设置说明&quot; class=&quot;headerlink&quot; title=&quot;Socket SO_LINGER 参数设置说明&quot;&gt;&lt;/a&gt;Socket SO_LINGER 参数设置说明&lt;/h2&gt;&lt;p&gt;SO_LINGER 这个参数是控制 socket 关闭后的行为，不看系统底层的实现，只从上面 java 代码的实现来看，这个方法的二个参数&lt;code&gt;on&lt;/code&gt;和&lt;code&gt;linger&lt;/code&gt;有以下三种组合：&lt;/p&gt;
&lt;h3 id=&quot;on-false&quot;&gt;&lt;a href=&quot;#on-false&quot; class=&quot;headerlink&quot; title=&quot;on = false&quot;&gt;&lt;/a&gt;on = false&lt;/h3&gt;&lt;p&gt;这是默认行为，当&lt;code&gt;on&lt;/code&gt;为&lt;code&gt;false&lt;/code&gt;时，&lt;code&gt;linger&lt;/code&gt;对应的设置就没有意义，当 socket 主动 close，调用的线程会马上返回，不会阻塞，残留在缓冲区中的数据将继续发送给对端，并且与对端进行 FIN-ACK 协议交换，最后进入 TIME_WAIT 状态。&lt;/p&gt;
&lt;h3 id=&quot;on-true-linger-gt-0&quot;&gt;&lt;a href=&quot;#on-true-linger-gt-0&quot; class=&quot;headerlink&quot; title=&quot;on = true, linger &amp;gt; 0&quot;&gt;&lt;/a&gt;on = true, linger &amp;gt; 0&lt;/h3&gt;&lt;p&gt;调用 close 的线程将阻塞，发生两种可能的情况：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;是剩余的数据继续发送，进行关闭协议交换；&lt;/li&gt;
&lt;li&gt;就是超时过期，剩余的数据将被删除，进行 FIN-ACK 交换。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;on-true-linger-0&quot;&gt;&lt;a href=&quot;#on-true-linger-0&quot; class=&quot;headerlink&quot; title=&quot;on = true, linger = 0&quot;&gt;&lt;/a&gt;on = true, linger = 0&lt;/h3&gt;&lt;p&gt;这种方式就是所谓&lt;code&gt;hard-close&lt;/code&gt;，这个方式是讨论或者争论最多的用法，任何剩余的数据都被立即丢弃，并且 FIN-ACK 交换也不会发生，替代产生 RST ，让对端抛出&lt;code&gt;connection reset&lt;/code&gt;的 SocketException 。&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://www.4e00.com/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>vim plugin vim-space doc</title>
    <link href="http://www.4e00.com/linux/2019/03/23/vim-plugin-vim-space-doc.html"/>
    <id>http://www.4e00.com/linux/2019/03/23/vim-plugin-vim-space-doc.html</id>
    <published>2019-03-23T04:27:14.000Z</published>
    <updated>2019-03-26T13:15:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vim-space-vim"><a href="#vim-space-vim" class="headerlink" title="vim-space.vim"></a>vim-space.vim</h2><p>vim 中处理空格相关的工具集。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><i class="fa fa-usd"></i> <span class="built_in">git</span> <span class="built_in">clone</span> https://github.com/yuweijun/vim-space.git</span></pre></td></tr></table></figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>使用<code>vundle</code>管理安装如下：</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> nocompatible</span><span class="line"><span class="keyword">filetype</span> off</span><span class="line"></span><span class="line"><span class="keyword">set</span> rtp+=~/.<span class="keyword">vim</span>/bundle/Vundle.<span class="keyword">vim</span></span><span class="line"></span><span class="line"><span class="keyword">call</span> vundle#begin()</span><span class="line"><span class="comment">" Plugin ...</span></span><span class="line">Plugin <span class="string">'yuweijun/vim-space'</span></span><span class="line"><span class="keyword">call</span> vundle#end()</span><span class="line"></span><span class="line"><span class="keyword">filetype</span> plugin <span class="built_in">indent</span> <span class="keyword">on</span></span></pre></td></tr></table></figure><p>使用<code>vim-plug</code>管理安装的配置如下：</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">call</span> plug#begin(<span class="string">'~/.local/share/nvim/plugged'</span>)</span><span class="line"><span class="comment">" Plug ...</span></span><span class="line">Plug <span class="string">'yuweijun/vim-space'</span></span><span class="line"><span class="keyword">call</span> plug#end()</span></pre></td></tr></table></figure><a id="more"></a><h2 id="插件功能"><a href="#插件功能" class="headerlink" title="插件功能"></a>插件功能</h2><ol><li>在中文字符和英文字符相接位置插入一个<code>空格</code>，快捷键为<code>&lt;leader&gt;sa</code></li><li>删除中文字符和英文字符相接位置的<code>空格</code>，快捷键为<code>&lt;leader&gt;sd</code></li><li>以<code>//</code>开始的注释行，在斜杠后面加入一个<code>空格</code>，快捷键为<code>&lt;leader&gt;sc</code></li><li>替换<code>U+00A0</code>不可中断空格为普通空格<code>U+0020</code>，快捷键为<code>&lt;leader&gt;sr</code></li></ol><h2 id="U-00A0-不可中断空格说明"><a href="#U-00A0-不可中断空格说明" class="headerlink" title="U+00A0 不可中断空格说明"></a>U+00A0 不可中断空格说明</h2><h3 id="英语原文及缩写"><a href="#英语原文及缩写" class="headerlink" title="英语原文及缩写"></a>英语原文及缩写</h3><ol><li>NON-BREAKING SPACE</li><li>HTML 中用<code>&amp;nbsp;</code>来表示，实际上就是不可中断空格的英文缩写</li><li>HTML 中也可以用<code>&amp;#160;</code>或者<code>&amp;#xA0;</code>来表示</li><li>UNICODE 码为<code>U+00A0</code></li><li>UTF-8 编码为<code>C2 A0</code></li></ol><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>有些数字字母的组合，如<code>100 km</code>，希望排版时将之视为一个整体，不要在空格的位置将<code>100</code>和<code>km</code>分离开，就用<code>U+00A0</code>这个特殊的空格来将之连接在一起。</p><h3 id="不可中断空格变体"><a href="#不可中断空格变体" class="headerlink" title="不可中断空格变体"></a>不可中断空格变体</h3><ol><li><code>U+2007</code></li><li><code>U+202F</code></li></ol><h3 id="输出不可中断空格"><a href="#输出不可中断空格" class="headerlink" title="输出不可中断空格"></a>输出不可中断空格</h3><table><thead><tr><th style="text-align:left">System/application</th><th style="text-align:left">method</th></tr></thead><tbody><tr><td style="text-align:left">Windows</td><td style="text-align:left"><kbd>Alt+0160</kbd></td></tr><tr><td style="text-align:left">MacOS</td><td style="text-align:left"><kbd>⌥ Opt+Space</kbd></td></tr><tr><td style="text-align:left">Vim</td><td style="text-align:left"><kbd>Ctrl+K, Space, Space</kbd> 或者 <kbd>Ctrl+V, U00A0</kbd></td></tr><tr><td style="text-align:left">Emacs</td><td style="text-align:left"><kbd>Ctrl+X, 8 Space</kbd></td></tr></tbody></table><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol><li><a href="https://github.com/yuweijun/vim-space" target="_blank" rel="noopener">vim-space.vim</a></li><li><a href="https://en.wikipedia.org/wiki/Non-breaking_space" target="_blank" rel="noopener">Non-breaking space</a></li><li><a href="https://www.ibm.com/developerworks/cn/java/unicode-programming-language/index.html" target="_blank" rel="noopener">Unicode 及编码方式概述</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;vim-space-vim&quot;&gt;&lt;a href=&quot;#vim-space-vim&quot; class=&quot;headerlink&quot; title=&quot;vim-space.vim&quot;&gt;&lt;/a&gt;vim-space.vim&lt;/h2&gt;&lt;p&gt;vim 中处理空格相关的工具集。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;i class=&quot;fa fa-usd&quot;&gt;&lt;/i&gt; &lt;span class=&quot;built_in&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; https://github.com/yuweijun/vim-space.git&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;vundle&lt;/code&gt;管理安装如下：&lt;/p&gt;
&lt;figure class=&quot;highlight vim&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; nocompatible&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;filetype&lt;/span&gt; off&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; rtp+=~/.&lt;span class=&quot;keyword&quot;&gt;vim&lt;/span&gt;/bundle/Vundle.&lt;span class=&quot;keyword&quot;&gt;vim&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;call&lt;/span&gt; vundle#begin()&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&quot; Plugin ...&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;Plugin &lt;span class=&quot;string&quot;&gt;&#39;yuweijun/vim-space&#39;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;call&lt;/span&gt; vundle#end()&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;filetype&lt;/span&gt; plugin &lt;span class=&quot;built_in&quot;&gt;indent&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用&lt;code&gt;vim-plug&lt;/code&gt;管理安装的配置如下：&lt;/p&gt;
&lt;figure class=&quot;highlight vim&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;call&lt;/span&gt; plug#begin(&lt;span class=&quot;string&quot;&gt;&#39;~/.local/share/nvim/plugged&#39;&lt;/span&gt;)&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&quot; Plug ...&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;Plug &lt;span class=&quot;string&quot;&gt;&#39;yuweijun/vim-space&#39;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;call&lt;/span&gt; plug#end()&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="linux" scheme="http://www.4e00.com/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>vim killer plugin - vim easy align</title>
    <link href="http://www.4e00.com/vim/2019/03/20/vim-killer-plugin-vim-easy-align.html"/>
    <id>http://www.4e00.com/vim/2019/03/20/vim-killer-plugin-vim-easy-align.html</id>
    <published>2019-03-20T06:39:50.000Z</published>
    <updated>2020-03-06T01:24:26.143Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vim-easy-align"><a href="#vim-easy-align" class="headerlink" title="vim-easy-align"></a>vim-easy-align</h2><p>一个功能强大的排版对齐工具，但实际上组合键使用有一定难度，并不完全像插件名称所示的那么简单。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>使用 <a href="https://github.com/junegunn/vim-plug" target="_blank" rel="noopener">vim-plug</a> 管理插件，加入以下配置到<code>.vimrc</code>中后再执行<code>PlugInstall</code>。</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">Plug <span class="string">'junegunn/vim-easy-align'</span></span></pre></td></tr></table></figure><h2 id="配置组合键映射"><a href="#配置组合键映射" class="headerlink" title="配置组合键映射"></a>配置组合键映射</h2><p>在<code>.vimrc</code>中加入以下配置：</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">xmap</span> ga <span class="symbol">&lt;Plug&gt;</span>(EasyAlign)</span><span class="line"><span class="keyword">nmap</span> ga <span class="symbol">&lt;Plug&gt;</span>(EasyAlign)</span></pre></td></tr></table></figure><h3 id="按键说明"><a href="#按键说明" class="headerlink" title="按键说明"></a>按键说明</h3><ol><li><code>ga</code>组合键激活<code>:EasyAlign</code>命令</li><li><code>Enter</code>回车键设置<code>左/中/右</code>对齐方式，连续按回车可切换对齐方式</li><li>根据第几个指定的分隔符进行对齐，默认使用第一个分隔符<ul><li><code>1</code>         第一个分隔符对齐</li><li><code>2</code>         第二个分隔符对齐</li><li><code>*</code>         所有分隔符对齐</li><li><code>**</code>        所有分隔符对齐，左对齐和右对齐循环</li><li><code>-</code>         即<code>-1</code>，最后一个分隔符对齐</li><li><code>-2</code>        倒数第二个分隔符对齐</li></ul></li><li>分隔符如<code>&lt;Space&gt;</code>, <code>=</code>, <code>:</code>, <code>.</code>, <code>|</code>, <code>&amp;</code>, <code>#</code>, <code>,</code>，或者在按<kbd>Ctrl-X</kbd>之后使用正则表达式进行分隔对齐</li></ol><h2 id="测试文本对齐"><a href="#测试文本对齐" class="headerlink" title="测试文本对齐"></a>测试文本对齐</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apple   =red</span><span class="line">grass+=green</span><span class="line">sky-=   blue</span></pre></td></tr></table></figure><p>然后将以上内容保存到一个文本文件中，并执行以下组合键，关于 vim 的 text objects command 可以参考<a href="/blog/vim/2016/07/17/vim-killer-plugin-surround.html#Text-objects-commands">这里</a>的说明。</p><ul><li><code>vipga=</code><ul><li><code>v</code>isual-select <code>i</code>nner <code>p</code>aragraph</li><li>Start EasyAlign command (<code>ga</code>)</li><li>Align around <code>=</code></li><li>在可视模式下选中段落，并使用<code>ga</code>激活<code>EasyAlign</code>插件，在第一个<code>=</code>位置对齐选中的段落</li></ul></li><li><code>gaip=</code><ul><li>Start EasyAlign command (<code>ga</code>) for <code>i</code>nner <code>p</code>aragraph</li><li>Align around <code>=</code></li><li>使用<code>ga</code>激活<code>EasyAlign</code>插件，然后选中段落，并在第一个<code>=</code>位置执行对齐操作</li></ul></li></ul><a id="more"></a><h2 id="官方示例动图演示"><a href="#官方示例动图演示" class="headerlink" title="官方示例动图演示"></a>官方示例动图演示</h2><p>常用的对齐操作就是以下 3 种，其他更多组合使用说明参考官方的<a href="https://github.com/junegunn/vim-easy-align/blob/master/README.md" target="_blank" rel="noopener">README.md</a>文档。</p><h3 id="按-对齐"><a href="#按-对齐" class="headerlink" title="按 = 对齐"></a>按 <code>=</code> 对齐</h3><p><img src="/blog/img/linux/vim/easy-align/equals.gif" alt></p><h3 id="按-lt-Space-gt-对齐"><a href="#按-lt-Space-gt-对齐" class="headerlink" title="按 &lt;Space&gt; 对齐"></a>按 <code>&lt;Space&gt;</code> 对齐</h3><p><img src="/blog/img/linux/vim/easy-align/spaces.gif" alt></p><h3 id="按-对齐-markdown-的-table"><a href="#按-对齐-markdown-的-table" class="headerlink" title="按 | 对齐 markdown 的 table"></a>按 <code>|</code> 对齐 markdown 的 table</h3><p><img src="/blog/img/linux/vim/easy-align/tables.gif" alt></p><h3 id="其他更多组合键效果演示动图"><a href="#其他更多组合键效果演示动图" class="headerlink" title="其他更多组合键效果演示动图"></a>其他更多组合键效果演示动图</h3><p><img src="/blog/img/linux/vim/easy-align/commas.gif" alt></p><p><img src="/blog/img/linux/vim/easy-align/regex.gif" alt></p><p><img src="/blog/img/linux/vim/easy-align/modes.gif" alt></p><p><img src="/blog/img/linux/vim/easy-align/yaml.gif" alt></p><p><img src="/blog/img/linux/vim/easy-align/blockwise-visual.gif" alt></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol><li><a href="https://github.com/junegunn/vim-easy-align" target="_blank" rel="noopener">vim-easy-align</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;vim-easy-align&quot;&gt;&lt;a href=&quot;#vim-easy-align&quot; class=&quot;headerlink&quot; title=&quot;vim-easy-align&quot;&gt;&lt;/a&gt;vim-easy-align&lt;/h2&gt;&lt;p&gt;一个功能强大的排版对齐工具，但实际上组合键使用有一定难度，并不完全像插件名称所示的那么简单。&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;使用 &lt;a href=&quot;https://github.com/junegunn/vim-plug&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;vim-plug&lt;/a&gt; 管理插件，加入以下配置到&lt;code&gt;.vimrc&lt;/code&gt;中后再执行&lt;code&gt;PlugInstall&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight vim&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Plug &lt;span class=&quot;string&quot;&gt;&#39;junegunn/vim-easy-align&#39;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;配置组合键映射&quot;&gt;&lt;a href=&quot;#配置组合键映射&quot; class=&quot;headerlink&quot; title=&quot;配置组合键映射&quot;&gt;&lt;/a&gt;配置组合键映射&lt;/h2&gt;&lt;p&gt;在&lt;code&gt;.vimrc&lt;/code&gt;中加入以下配置：&lt;/p&gt;
&lt;figure class=&quot;highlight vim&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;xmap&lt;/span&gt; ga &lt;span class=&quot;symbol&quot;&gt;&amp;lt;Plug&amp;gt;&lt;/span&gt;(EasyAlign)&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;nmap&lt;/span&gt; ga &lt;span class=&quot;symbol&quot;&gt;&amp;lt;Plug&amp;gt;&lt;/span&gt;(EasyAlign)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;按键说明&quot;&gt;&lt;a href=&quot;#按键说明&quot; class=&quot;headerlink&quot; title=&quot;按键说明&quot;&gt;&lt;/a&gt;按键说明&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;ga&lt;/code&gt;组合键激活&lt;code&gt;:EasyAlign&lt;/code&gt;命令&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Enter&lt;/code&gt;回车键设置&lt;code&gt;左/中/右&lt;/code&gt;对齐方式，连续按回车可切换对齐方式&lt;/li&gt;
&lt;li&gt;根据第几个指定的分隔符进行对齐，默认使用第一个分隔符&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1&lt;/code&gt;         第一个分隔符对齐&lt;/li&gt;
&lt;li&gt;&lt;code&gt;2&lt;/code&gt;         第二个分隔符对齐&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt;         所有分隔符对齐&lt;/li&gt;
&lt;li&gt;&lt;code&gt;**&lt;/code&gt;        所有分隔符对齐，左对齐和右对齐循环&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-&lt;/code&gt;         即&lt;code&gt;-1&lt;/code&gt;，最后一个分隔符对齐&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-2&lt;/code&gt;        倒数第二个分隔符对齐&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分隔符如&lt;code&gt;&amp;lt;Space&amp;gt;&lt;/code&gt;, &lt;code&gt;=&lt;/code&gt;, &lt;code&gt;:&lt;/code&gt;, &lt;code&gt;.&lt;/code&gt;, &lt;code&gt;|&lt;/code&gt;, &lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;#&lt;/code&gt;, &lt;code&gt;,&lt;/code&gt;，或者在按&lt;kbd&gt;Ctrl-X&lt;/kbd&gt;之后使用正则表达式进行分隔对齐&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;测试文本对齐&quot;&gt;&lt;a href=&quot;#测试文本对齐&quot; class=&quot;headerlink&quot; title=&quot;测试文本对齐&quot;&gt;&lt;/a&gt;测试文本对齐&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;apple   =red&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;grass+=green&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;sky-=   blue&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后将以上内容保存到一个文本文件中，并执行以下组合键，关于 vim 的 text objects command 可以参考&lt;a href=&quot;/blog/vim/2016/07/17/vim-killer-plugin-surround.html#Text-objects-commands&quot;&gt;这里&lt;/a&gt;的说明。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vipga=&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;v&lt;/code&gt;isual-select &lt;code&gt;i&lt;/code&gt;nner &lt;code&gt;p&lt;/code&gt;aragraph&lt;/li&gt;
&lt;li&gt;Start EasyAlign command (&lt;code&gt;ga&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Align around &lt;code&gt;=&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在可视模式下选中段落，并使用&lt;code&gt;ga&lt;/code&gt;激活&lt;code&gt;EasyAlign&lt;/code&gt;插件，在第一个&lt;code&gt;=&lt;/code&gt;位置对齐选中的段落&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gaip=&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;Start EasyAlign command (&lt;code&gt;ga&lt;/code&gt;) for &lt;code&gt;i&lt;/code&gt;nner &lt;code&gt;p&lt;/code&gt;aragraph&lt;/li&gt;
&lt;li&gt;Align around &lt;code&gt;=&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;ga&lt;/code&gt;激活&lt;code&gt;EasyAlign&lt;/code&gt;插件，然后选中段落，并在第一个&lt;code&gt;=&lt;/code&gt;位置执行对齐操作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="vim" scheme="http://www.4e00.com/categories/vim/"/>
    
    
  </entry>
  
</feed>
